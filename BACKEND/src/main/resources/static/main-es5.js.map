{"version":3,"sources":["$_lazy_route_resource lazy namespace object","src/app/app.component.html","src/app/components/allpatients-page/allpatients-page.component.html","src/app/components/ccadmin-profile/ccadmin-profile.component.html","src/app/components/clinic-search/clinic-search.component.html","src/app/components/clinicadministrator-page/clinicadministrator-page.component.html","src/app/components/clinicadministrator-profile/clinicadministrator-profile.component.html","src/app/components/clinics-page/clinics-page.component.html","src/app/components/codebook/codebook.component.html","src/app/components/doctor-page/doctor-page.component.html","src/app/components/doctor-profile/doctor-profile.component.html","src/app/components/login/login.component.html","src/app/components/medical-history-page/medical-history-page.component.html","src/app/components/medical-record-page/medical-record-page.component.html","src/app/components/nurse-page/nurse-page.component.html","src/app/components/nurse-profile/nurse-profile.component.html","src/app/components/nurse-vacation-req/nurse-vacation-req.component.html","src/app/components/patient-doctor-search/patient-doctor-search.component.html","src/app/components/patient-doctors-list/patient-doctors-list.component.html","src/app/components/patient-page/patient-page.component.html","src/app/components/patient-profile/patient-profile.component.html","src/app/components/register-patient/register-patient.component.html","src/app/components/vacation-request-register/vacation-request-register.component.html","node_modules/tslib/tslib.es6.js","src/app/app-routing.module.ts","src/app/app.component.css","src/app/app.component.ts","src/app/app.module.ts","src/app/components/allpatients-page/allpatients-page.component.css","src/app/components/allpatients-page/allpatients-page.component.ts","src/app/components/ccadmin-profile/ccadmin-profile.component.css","src/app/components/ccadmin-profile/ccadmin-profile.component.ts","src/app/components/clinic-search/clinic-search.component.css","src/app/components/clinic-search/clinic-search.component.ts","src/app/components/clinicadministrator-page/clinicadministrator-page.component.css","src/app/components/clinicadministrator-page/clinicadministrator-page.component.ts","src/app/components/clinicadministrator-profile/clinicadministrator-profile.component.css","src/app/components/clinicadministrator-profile/clinicadministrator-profile.component.ts","src/app/components/clinics-page/clinics-page.component.css","src/app/components/clinics-page/clinics-page.component.ts","src/app/components/codebook-dto.ts","src/app/components/codebook/codebook.component.css","src/app/components/codebook/codebook.component.ts","src/app/components/doctor-page/doctor-page.component.css","src/app/components/doctor-page/doctor-page.component.ts","src/app/components/doctor-profile/doctor-profile.component.css","src/app/components/doctor-profile/doctor-profile.component.ts","src/app/components/login/login.component.css","src/app/components/login/login.component.ts","src/app/components/medical-history-page/medical-history-page.component.css","src/app/components/medical-history-page/medical-history-page.component.ts","src/app/components/medical-record-page/medical-record-page.component.css","src/app/components/medical-record-page/medical-record-page.component.ts","src/app/components/nurse-page/nurse-page.component.css","src/app/components/nurse-page/nurse-page.component.ts","src/app/components/nurse-profile/nurse-profile.component.css","src/app/components/nurse-profile/nurse-profile.component.ts","src/app/components/nurse-vacation-req/nurse-vacation-req.component.css","src/app/components/nurse-vacation-req/nurse-vacation-req.component.ts","src/app/components/patient-doctor-search/patient-doctor-search.component.css","src/app/components/patient-doctor-search/patient-doctor-search.component.ts","src/app/components/patient-doctors-list/patient-doctors-list.component.css","src/app/components/patient-doctors-list/patient-doctors-list.component.ts","src/app/components/patient-page/patient-page.component.css","src/app/components/patient-page/patient-page.component.ts","src/app/components/patient-profile/patient-profile.component.css","src/app/components/patient-profile/patient-profile.component.ts","src/app/components/register-patient/register-patient.component.css","src/app/components/register-patient/register-patient.component.ts","src/app/components/vacation-request-register/vacation-request-register.component.css","src/app/components/vacation-request-register/vacation-request-register.component.ts","src/app/material-module.ts","src/app/models/clinic.ts","src/app/models/clinicAdministrator.ts","src/app/models/clinicalCenterAdministrator.ts","src/app/models/doctor.ts","src/app/models/examination.ts","src/app/models/examinationKind.ts","src/app/models/examinationStatus.ts","src/app/models/examinationTable.ts","src/app/models/examinationType.ts","src/app/models/medicalRecord.ts","src/app/models/nurse.ts","src/app/models/patient.ts","src/app/models/patientStatus.ts","src/app/models/role.ts","src/app/models/user.ts","src/app/models/zahtev.ts","src/app/models/zahtevStatus.ts","src/app/services/clinic-administrator.service.ts","src/app/services/clinic.service.ts","src/app/services/clinicalCenterAdministrator.service.ts","src/app/services/doctor.service.ts","src/app/services/examination-type.service.ts","src/app/services/examination.service.ts","src/app/services/medical-record.service.ts","src/app/services/nurse.service.ts","src/app/services/patient.service.ts","src/app/services/user.service.ts","src/app/services/vacation.service.ts","src/environments/environment.ts","src/main.ts"],"names":[],"mappings":"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","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\r\\n    <mat-sidenav #drawer class=\\\"sidenav\\\" fixedInViewport [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\r\\n      [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\" [opened]=\\\"(isHandset$ | async) === true\\\">\\r\\n      <mat-toolbar>Menu</mat-toolbar>\\r\\n        <mat-nav-list *ngIf = \\\"isNone()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/login\\\">Login</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/register\\\">Register</a>\\r\\n        </mat-nav-list>\\r\\n  \\r\\n        <mat-nav-list *ngIf=\\\"isPatient()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/patient/profile\\\">Profile</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/medicalRecord\\\">Medical record</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/medicalHistory\\\">Medical history</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/clinics\\\">Clinics</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n  \\r\\n        <mat-nav-list *ngIf=\\\"isDoctor()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/doctor/profile\\\">Profile</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n\\r\\n        <mat-nav-list *ngIf=\\\"isClinicAdministrator()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/clinicAdministrator/profile\\\">Profile</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n\\r\\n        <mat-nav-list *ngIf=\\\"isNurse()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/nurse/profile\\\">Profile</a>\\r\\n          <a mat-list-item routerLink=\\\"/nurse/allpatients\\\">All patients</a>\\r\\n          <a mat-list-item routerLink=\\\"/nurse/VacationRequest\\\">Vacation request</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n\\r\\n        <mat-nav-list *ngIf=\\\"isCCAdmin()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/clinicalCenterAdministrator/profile\\\">Profile</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n    </mat-sidenav>\\r\\n    <mat-sidenav-content>\\r\\n      <mat-toolbar>\\r\\n        <button type=\\\"button\\\" aria-label=\\\"Toggle sidenav\\\" mat-icon-button (click)=\\\"drawer.toggle()\\\">\\r\\n          <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\r\\n        </button>\\r\\n        <span>Clinical Centre</span>\\r\\n      </mat-toolbar>\\r\\n      <!-- Add Content Here -->\\r\\n      <router-outlet></router-outlet>\\r\\n    </mat-sidenav-content>\\r\\n  </mat-sidenav-container>\"","export default \"<!-- page-header -->\\r\\n<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">All patients </h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"allpatientsDataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"name\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">\\r\\n                                    {{element.name}}\\r\\n                                </td>\\r\\n                            </ng-container>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"surname\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Surname </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.surname}} </td>\\r\\n                            </ng-container>\\r\\n\\r\\n                            <ng-container matColumnDef=\\\"address\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Address </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.address}} </td>\\r\\n                            </ng-container>\\r\\n\\r\\n\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                        <mat-paginator [pageSize]=itemsPerPage showFirstLastButtons></mat-paginator>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>{{selectedCCAdmin.name}} profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"ccadminForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" ccadminForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n  \\r\\n              \\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","export default \"<h2 mat-dialog-title>Dialog</h2>\\r\\n\\r\\n<mat-dialog-content [formGroup]=\\\"SearchClinicsGroup\\\">\\r\\n\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput id=\\\"date\\\" [matDatepickerFilter]=\\\"myFilter\\\" [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\r\\n      <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n      <mat-datepicker #picker></mat-datepicker>\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div>\\r\\n    <mat-form-field>\\r\\n      <mat-select id=\\\"type\\\" placeholder=\\\"Select examination type\\\">\\r\\n        <mat-option *ngFor=\\\"let examination_type of types\\\" value=\\\"option\\\">{{examination_type.label}}</mat-option>\\r\\n      </mat-select>\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n  <button class=\\\"mat-raised-button mat-primary\\\"(click)=\\\"save()\\\">Search</button>\\r\\n</mat-dialog-actions>\"","export default \"<h1>Welcome clinicadministrator!</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>Profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"clinicAdministratorProfileForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorProfileForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && clinicAdministratorProfileForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorProfileForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && clinicAdministratorProfileForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorProfileForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && clinicAdministratorProfileForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorProfileForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && clinicAdministratorProfileForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorProfileForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && clinicAdministratorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"clinic\\\">Clinic</label>\\r\\n                <input type=\\\"text\\\" id=\\\"clinic\\\" formControlName=\\\"clinic\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorProfileForm.get('clinic').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && clinicAdministratorProfileForm.get('clinic').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('clinic').errors['required']\\\">Clinic name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","export default \"\\r\\n<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"clinicDataSource\\\" class=\\\"mat-elevation-z8\\\" matSort>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Name\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Clinic name </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Address\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Clinic address </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.address}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"ClinicRating\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Clinic rating </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.clinicRating}} </td>\\r\\n  </ng-container>\\r\\n  <div *ngIf=\\\"condition; then thenBlock else elseBlock\\\"></div>\\r\\n  <ng-template #elseBlock>\\r\\n    <ng-container matColumnDef=\\\"Price\\\">\\r\\n      <th  mat-header-cell *matHeaderCellDef> Price </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> 0 </td>\\r\\n    </ng-container>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #thenBlock>\\r\\n    <ng-container matColumnDef=\\\"Price\\\">\\r\\n      <th  mat-header-cell *matHeaderCellDef> Price </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> 0 </td>\\r\\n    </ng-container>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Doctors\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Doctors </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <button mat-flat-button color=\\\"warn\\\" (click)=\\\"doctorList(element)\\\"> Doctors </button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n<button mat-raised-button color=\\\"primary\\\" (click)=\\\"openDialog()\\\">Search</button>\"","export default \"<div class=\\\"row\\\">  \\r\\n    <div class=\\\"col\\\">\\r\\n            <div class=\\\"container\\\" style=\\\"width:40%\\\">\\r\\n                    <form [formGroup]=\\\"addMedicine\\\" style=\\\"text-align:center\\\"\\r\\n                        (ngSubmit)=\\\"addCodebookMedicine()\\\">\\r\\n                        <span class=\\\"text-nowrap\\\">Add medicine</span>\\r\\n                \\r\\n                        <div class=\\\"input-group mb-3\\\">\\r\\n                            <input class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"label\\\"\\r\\n                            id=\\\"label\\\" placeholder=\\\"Label\\\" \\r\\n                            formControlName=\\\"label\\\">\\r\\n                            <div class=\\\"input-group-append\\\">\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n                        </div>  \\r\\n                    </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n    <table  class=\\\"table\\\">  \\r\\n        <thead>  \\r\\n            <tr>  \\r\\n                    <th scope=\\\"col\\\">                 Id </th>\\r\\n                    <th scope=\\\"col\\\">                 Name </th> \\r\\n                    <th scope=\\\"col\\\"></th>\\r\\n            </tr>  \\r\\n        </thead>  \\r\\n        <tbody>  \\r\\n\\r\\n         \\r\\n\\r\\n             <tr *ngFor=\\\"let medicine of codebook.medicines\\\">  \\r\\n                <td>{{medicine.id}}</td>  \\r\\n                <td>{{medicine.label}}</td>  \\r\\n                <td><button (click)=\\\"deleteMedicine(medicine)\\\" class='btn btn-primary'>Delete</button>   \\r\\n                  \\r\\n                </td>  \\r\\n              </tr>   \\r\\n        </tbody><br>  \\r\\n    </table>  \\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col\\\">\\r\\n            <div class=\\\"container\\\" style=\\\"width:40%\\\">\\r\\n                    <form [formGroup]=\\\"addDiagnose\\\" style=\\\"text-align:center\\\"\\r\\n                        (ngSubmit)=\\\"addCodebookDiagnose()\\\">\\r\\n                        <span class=\\\"text-nowrap\\\">Add diagnose</span>\\r\\n                \\r\\n                        <div class=\\\"input-group mb-3\\\">\\r\\n                            <input class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"title\\\"\\r\\n                            id=\\\"title\\\" placeholder=\\\"Title\\\" \\r\\n                            formControlName=\\\"title\\\">\\r\\n                            <div class=\\\"input-group-append\\\">\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n                        </div>  \\r\\n                    </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n    <table class=\\\"table\\\">  \\r\\n        <thead>  \\r\\n            <tr>  \\r\\n                    <th scope=\\\"col\\\">            Diagnose ID</th>\\r\\n                    <th scope=\\\"col\\\">            Diagnose name</th> \\r\\n                    <th scope=\\\"col\\\"></th>  \\r\\n            </tr>  \\r\\n        </thead>  \\r\\n        <tbody>  \\r\\n             <tr *ngFor=\\\"let diagnose of codebook.diagnoses\\\">  \\r\\n                <td>{{diagnose.id}}</td>  \\r\\n                <td>{{diagnose.title}}</td>  \\r\\n                \\r\\n                <td><button (click)=\\\"deleteDiagnose(diagnose)\\\" class='btn btn-primary'>Delete</button>   \\r\\n                  \\r\\n                </td>  \\r\\n              </tr>   \\r\\n        </tbody><br>  \\r\\n    </table>\\r\\n</div>  \\r\\n\\r\\n\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<h1>WELCOME DOCTOR</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"doctorProfileForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" doctorProfileForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"workHoursFrom\\\">Work hours from</label>\\r\\n              <input type=\\\"number\\\" id=\\\"workHoursFrom\\\" formControlName=\\\"workHoursFrom\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['required']\\\">Work hours from is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['minlength']\\\">A work hours must have at least 2\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"workHoursTo\\\">Work hours to</label>\\r\\n              <input type=\\\"number\\\" id=\\\"workHoursTo\\\" formControlName=\\\"workHoursTo\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['required']\\\">Work hours to is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['minlength']\\\">A work hours to must have at least 2\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","export default \"<div class=\\\"main-content\\\">\\r\\n        <div class=\\\"container\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n              <mat-card>\\r\\n                <h3>Login</h3>\\r\\n                <hr>\\r\\n                <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"email\\\">Email</label>\\r\\n                    <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\">\\r\\n                    <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\r\\n                      <div *ngIf=\\\"f.email.errors.email\\\">Email must be a valid email address</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\">\\r\\n                    <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\r\\n                      <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 8 characters long</div>\\r\\n                      <div *ngIf=\\\"f.password.errors.pattern\\\">Password must contain at least 1 lowercase, 1 uppercase letter and 1 number</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <a routerLink=\\\"/patient/register\\\">Don't have an account? Register here.</a>\\r\\n                  </div>\\r\\n      \\r\\n                  <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Login</button>\\r\\n      \\r\\n                </form>\\r\\n              </mat-card>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\"","export default \"<!-- page-header -->\\r\\n<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">History of examinations and operations</h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"kind\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Kind </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">{{element.kind}}</td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"clinic\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Clinic </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.clinic}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"doctor\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Doctors </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.doctors}} </td>\\r\\n                            </ng-container>\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                        <mat-paginator [pageSize]=itemsPerPage showFirstLastButtons></mat-paginator>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">Medical record</h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"Height\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Height </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">{{element.height}}</td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Weight\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Weight </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.weight}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"BloodType\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Blood Type </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.bloodType}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Allergies\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Allergies </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.allergies}} </td>\\r\\n                            </ng-container>\\r\\n                             <ng-container matColumnDef=\\\"ExaminationReports\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Examination Reports </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.reports} </td>\\r\\n                            </ng-container>\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<h1>WELCOME NURSE</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>{{selectedNurse.name}} profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"nurseForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"email\\\">Email</label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" nurseForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"address\\\">Address</label>\\r\\n              <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('address').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('address').errors['required']\\\">Address is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"city\\\">City</label>\\r\\n              <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\"  class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('city').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('city').errors['required']\\\">City is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"country\\\">Country</label>\\r\\n              <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('country').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('country').errors['required']\\\">Country is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <!-- <div class=\\\"form-group\\\">\\r\\n               <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n               <input type=\\\"text\\\" readonly=\\\"readonly\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\"  class=\\\"form-control\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': submitted &&  patientForm.get('insuranceID').errors }\\\" />\\r\\n               <div *ngIf=\\\"submitted && patientForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                 <div *ngIf=\\\"patientForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                 </div>\\r\\n                 <div\\r\\n                   *ngIf=\\\"patientForm.get('insuranceID').errors['minlength'] ||patientForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                   Health\\r\\n                   Insurance ID must contain exactly 13 characters</div>\\r\\n               </div>\\r\\n             </div> -->\\r\\n\\r\\n\\r\\n\\r\\n             <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n           </form>\\r\\n         </mat-card>\\r\\n       </div>\\r\\n     </div>\\r\\n   </div>\\r\\n </div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>Nurse Vacation request</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"vacationRequestForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('email').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && vacationRequestForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('name').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && vacationRequestForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('name').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('name').errors['name']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Surname</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && vacationRequestForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('surname').errors['surname']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"startingDate\\\">StartingDate</label>\\r\\n                <input type=\\\"text\\\" id=\\\"startingDate\\\" formControlName=\\\"startingDate\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('startingDate').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && vacationRequestForm.get('startingDate').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('startingDate').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"finishDate\\\">FinishDate</label>\\r\\n                <input type=\\\"text\\\" id=\\\"finishDate\\\" formControlName=\\\"finishDate\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('finishDate').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && vacationRequestForm.get('finishDate').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('finishDate').errors['required']\\\">Phone Number is required</div>\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n              <button mat-raised-button style=\\\"position: center\\\" color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  \"","export default \"<h2 mat-dialog-title>Search for doctors</h2>\\r\\n<mat-dialog-content [formGroup]=\\\"SearchDoctorGroup\\\">\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" id=\\\"name\\\" formControlName=\\\"name\\\" matInput placeholder=\\\"Doctor name\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" matInput placeholder=\\\"Doctor surname\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" id=\\\"rating\\\" formControlName=\\\"rating\\\" matInput placeholder=\\\"Doctor rating\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n  <button class=\\\"mat-raised-button mat-primary\\\"(click)=\\\"save()\\\">Save</button>\\r\\n</mat-dialog-actions>\"","export default \"\\r\\n    <mat-form-field>\\r\\n        <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n      </mat-form-field>\\r\\n      <table mat-table\\r\\n             [dataSource]=\\\"doctorDataSource\\\" class=\\\"mat-elevation-z8\\\" matSort>\\r\\n  \\r\\n        <ng-container matColumnDef=\\\"Name\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> Doctor name </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n        </ng-container>\\r\\n  \\r\\n        <ng-container matColumnDef=\\\"Surname\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> Doctor surname </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.surname}} </td>\\r\\n        </ng-container>\\r\\n  \\r\\n        <ng-container matColumnDef=\\\"DoctorRating\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> Doctor rating </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.doctorRating}} </td>\\r\\n        </ng-container>\\r\\n  \\r\\n        <ng-container matColumnDef=\\\"Price\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> Price </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.specialized.price}} </td>\\r\\n        </ng-container>\\r\\n  \\r\\n  \\r\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n      </table>\\r\\n      <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"searchDoctors()\\\">Search</button>\\r\\n      <mat-dialog-actions>\\r\\n        <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n      </mat-dialog-actions>\"","export default \"<h1>WELCOME</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>{{selectedPatient.name}} profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"patientForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && patientForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" patientForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Address</label>\\r\\n                <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('address').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('address').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('city').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('city').errors['required']\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('country').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('country').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n                <input type=\\\"text\\\" readonly=\\\"readonly\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted &&  patientForm.get('insuranceID').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                  </div>\\r\\n                  <div\\r\\n                    *ngIf=\\\"patientForm.get('insuranceID').errors['minlength'] ||patientForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                    Health\\r\\n                    Insurance ID must contain exactly 13 characters</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              \\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>Registration</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && registerForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" registerForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Address</label>\\r\\n                <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('address').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('address').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('city').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('city').errors['required']\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('country').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('country').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n                <input type=\\\"text\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted &&  registerForm.get('insuranceID').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                  </div>\\r\\n                  <div\\r\\n                    *ngIf=\\\"registerForm.get('insuranceID').errors['minlength'] ||registerForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                    Health\\r\\n                    Insurance ID must contain exactly 13 characters</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <a routerLink=\\\"/patient/login\\\">Already have an account? Login here.</a>\\r\\n              </div>\\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Register</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","export default \"<table mat-table [dataSource]=\\\"RequestsDataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n    <ng-container matColumnDef=\\\"email\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> email </th>\\r\\n      <td mat-cell *matCellDef=\\\"let zahtev\\\"> {{zahtev.email}} </td>\\r\\n    </ng-container>\\r\\n  \\r\\n    <ng-container matColumnDef=\\\"startingDate\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> startingDate </th>\\r\\n      <td mat-cell *matCellDef=\\\"let zahtev\\\"> {{zahtev.startingDate}} </td>\\r\\n    </ng-container>\\r\\n  \\r\\n    <ng-container matColumnDef=\\\"finishDate\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> finishDate </th>\\r\\n      <td mat-cell *matCellDef=\\\"let zahtev\\\"> {{zahtev.finishDate}} </td>\\r\\n    </ng-container>\\r\\n  \\r\\n    <ng-container matColumnDef=\\\"approving\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Approving </th>\\r\\n      <td mat-cell *matCellDef=\\\"let zahtev\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\" (click)=\\\"onAccept(zahtev)\\\">Accept</button>\\r\\n        <button mat-raised-button color=\\\"warn\\\" class=\\\"pull-right\\\">Decline</button>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n  \\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n  </table>\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {LoginComponent} from './components/login/login.component'\r\nimport {RegisterPatientComponent} from './components/register-patient/register-patient.component'\r\nimport {PatientPageComponent} from './components/patient-page/patient-page.component'\r\nimport { DoctorPageComponent } from './components/doctor-page/doctor-page.component';\r\nimport {PatientProfileComponent} from './components/patient-profile/patient-profile.component'\r\nimport { MedicalRecordPageComponent } from './components/medical-record-page/medical-record-page.component';\r\nimport { MedicalHistoryPageComponent } from './components/medical-history-page/medical-history-page.component';\r\nimport { ClinicsPageComponent } from './components/clinics-page/clinics-page.component';\r\nimport { DoctorProfileComponent } from './components/doctor-profile/doctor-profile.component';\r\nimport {NursePageComponent} from './components/nurse-page/nurse-page.component';\r\nimport {NurseProfileComponent} from './components/nurse-profile/nurse-profile.component';\r\nimport {CCAdminProfileComponent} from './components/ccadmin-profile/ccadmin-profile.component';\r\nimport {AllPatientsPageComponent} from './components/allpatients-page/allpatients-page.component';\r\nimport { CodebookComponent} from './components/codebook/codebook.component';\r\nimport { ClinicadministratorPageComponent } from './components/clinicadministrator-page/clinicadministrator-page.component';\r\nimport { ClinicadministratorProfileComponent } from './components/clinicadministrator-profile/clinicadministrator-profile.component';\r\nimport {NurseVacationRequestComponent} from './components/nurse-vacation-req/nurse-vacation-req.component';\r\nimport { VacationRequestRegisterComponent } from './components/vacation-request-register/vacation-request-register.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'patient/register',\r\n    component: RegisterPatientComponent,\r\n  },\r\n  {\r\n    path: 'patient/home',\r\n    component: PatientPageComponent,\r\n  },\r\n  {\r\n    path:'doctor/home',\r\n    component: DoctorPageComponent\r\n  },\r\n  {\r\n    path:'doctor/profile',\r\n    component: DoctorProfileComponent\r\n  },\r\n  {\r\n    path:'clinicAdministrator/home',\r\n    component: ClinicadministratorPageComponent\r\n  },\r\n  {\r\n    path:'clinicAdministrator/profile',\r\n    component: ClinicadministratorProfileComponent\r\n  },\r\n  {\r\n    path:'clinicalCenterAdministrator/profile',\r\n    component: CCAdminProfileComponent\r\n  },\r\n\r\n  {\r\n    path:'clinicalCenterAdministrator/VacationRequests',\r\n    component: VacationRequestRegisterComponent\r\n  },\r\n  {\r\n    path:'clinicalCenterAdministrator/codebook',\r\n    component: CodebookComponent\r\n  },\r\n  {\r\n    path:'nurse/home',\r\n    component: NursePageComponent\r\n  },\r\n  {\r\n    path:'nurse/profile',\r\n    component: NurseProfileComponent\r\n  },{\r\n    path:'nurse/allpatients',\r\n    component: AllPatientsPageComponent\r\n  },\r\n  {\r\n    path: 'nurse/VacationRequest',\r\n    component: NurseVacationRequestComponent,\r\n  },\r\n  {\r\n    path:'patient/profile',\r\n    component: PatientProfileComponent\r\n  },{\r\n    path:'patient/medicalRecord',\r\n    component: MedicalRecordPageComponent\r\n  },{\r\n    path:'patient/medicalHistory',\r\n    component: MedicalHistoryPageComponent\r\n  },{\r\n    path:'patient/clinics',\r\n    component: ClinicsPageComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","export default \".example-full-width {\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .main-content {\\r\\n    margin: 20px 0;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0VBQ2I7O0VBRUE7SUFDRSxjQUFjO0VBQ2hCIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXhhbXBsZS1mdWxsLXdpZHRoIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICBcclxuICAubWFpbi1jb250ZW50IHtcclxuICAgIG1hcmdpbjogMjBweCAwO1xyXG4gIH0iXX0= */\"","import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport {UserService} from '../app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver,\r\n    private userService:UserService) { }\r\n\r\n  public isLoggedIn() {\r\n    return this.userService.isLoggedIn();\r\n  }\r\n\r\n  public isNone(){\r\n    return this.userService.isNone();\r\n  }\r\n\r\n  public isPatient() {\r\n    return this.userService.isPatient();\r\n  }\r\n\r\n  public isDoctor() {\r\n    return this.userService.isDoctor();\r\n  }\r\n\r\n  public isClinicAdministrator() {\r\n    return this.userService.isClinicAdministrator();\r\n  }\r\n\r\n  public isNurse() {\r\n    return this.userService.isNurse();\r\n  }\r\n  \r\n  public isCCAdmin() {\r\n    return this.userService.isCCAdmin();\r\n  }\r\n  public onLogout() {\r\n    this.userService.logout();\r\n  }\r\n\r\n}\r\n\r\n","\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule, MatCardModule, MatFormFieldModule, MatInputModule } from '@angular/material';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport {DemoMaterialModule} from './material-module';\r\n\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegisterPatientComponent } from './components/register-patient/register-patient.component';\r\nimport { PatientPageComponent } from './components/patient-page/patient-page.component';\r\nimport { DoctorPageComponent } from './components/doctor-page/doctor-page.component';\r\nimport { PatientProfileComponent } from './components/patient-profile/patient-profile.component';\r\nimport { DoctorProfileComponent } from './components/doctor-profile/doctor-profile.component';\r\nimport { MedicalRecordPageComponent } from './components/medical-record-page/medical-record-page.component';\r\nimport { MedicalHistoryPageComponent } from './components/medical-history-page/medical-history-page.component';\r\nimport { ClinicsPageComponent } from './components/clinics-page/clinics-page.component';\r\nimport {NursePageComponent} from './components/nurse-page/nurse-page.component';\r\nimport {NurseProfileComponent} from './components/nurse-profile/nurse-profile.component';\r\n\r\nimport { ClinicSearchComponent } from './components/clinic-search/clinic-search.component';\r\nimport { PatientDoctorsListComponent } from './components/patient-doctors-list/patient-doctors-list.component';\r\nimport { PatientDoctorSearchComponent } from './components/patient-doctor-search/patient-doctor-search.component';\r\n\r\nimport { CCAdminProfileComponent } from './components/ccadmin-profile/ccadmin-profile.component';\r\nimport { AllPatientsPageComponent } from './components/allpatients-page/allpatients-page.component';\r\n\r\nimport { CodebookComponent } from './components/codebook/codebook.component';\r\nimport { ClinicadministratorPageComponent } from './components/clinicadministrator-page/clinicadministrator-page.component';\r\nimport { ClinicadministratorProfileComponent } from './components/clinicadministrator-profile/clinicadministrator-profile.component';\r\nimport { NurseVacationRequestComponent } from './components/nurse-vacation-req/nurse-vacation-req.component';\r\nimport { VacationRequestRegisterComponent } from './components/vacation-request-register/vacation-request-register.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterPatientComponent,\r\n    PatientPageComponent,\r\n    DoctorPageComponent,\r\n    PatientProfileComponent,\r\n    DoctorProfileComponent,\r\n    MedicalRecordPageComponent,\r\n    MedicalHistoryPageComponent,\r\n    ClinicsPageComponent,\r\n    NursePageComponent,\r\n    NurseProfileComponent,\r\n    NurseVacationRequestComponent,\r\n    ClinicSearchComponent,\r\n    PatientDoctorsListComponent,\r\n    PatientDoctorSearchComponent,\r\n    CodebookComponent,\r\n    CCAdminProfileComponent,\r\n    AllPatientsPageComponent,\r\n    ClinicadministratorPageComponent,\r\n    ClinicadministratorProfileComponent,\r\n    VacationRequestRegisterComponent,\r\n\r\n\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    ToastrModule.forRoot({\r\n      timeOut: 2000,\r\n      positionClass: 'toast-top-right',\r\n      preventDuplicates: true,\r\n    }),\r\n    LayoutModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    MatNativeDateModule,\r\n    DemoMaterialModule,\r\n  ],\r\n  entryComponents: [\r\n\r\n    ClinicSearchComponent,\r\n    PatientDoctorsListComponent,\r\n    PatientDoctorSearchComponent,\r\n    NurseVacationRequestComponent,\r\n    CCAdminProfileComponent,\r\n    AllPatientsPageComponent,\r\n    VacationRequestRegisterComponent\r\n\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWxscGF0aWVudHMtcGFnZS9hbGxwYXRpZW50cy1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Patient } from 'src/app/models/patient';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { PatientService } from 'src/app/services/patient.service';   // nemam za sve pacijente?\r\n\r\n@Component({\r\n  selector: 'app-allpatients-page',\r\n  templateUrl: './allpatients-page.component.html',\r\n  styleUrls: ['./allpatients-page.component.css']\r\n})\r\nexport class AllPatientsPageComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['name', 'surname', 'address'];\r\n  patient: Patient;\r\n  allpatientsDataSource = new MatTableDataSource<Patient>();\r\n  allpatients: Array<Patient> = new Array<Patient>();\r\n  \r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private patientService: PatientService\r\n  ) {\r\n    this.allpatients=this.patientService.getAllPatients();\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n\r\n  }\r\n\r\n  all() {\r\n      this.allpatientsDataSource = new MatTableDataSource(this.patientService.getAllPatients());\r\n      this.allpatientsDataSource.paginator = this.paginator;\r\n  }\r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2NhZG1pbi1wcm9maWxlL2NjYWRtaW4tcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ClinicalCenterAdministrator } from '../../models/clinicalCenterAdministrator';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { ClinicalCenterAdministratorService } from '../../services/clinicalCenterAdministrator.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-ccadmin-profile',\r\n  templateUrl: './ccadmin-profile.component.html',\r\n  styleUrls: ['./ccadmin-profile.component.css']\r\n})\r\nexport class CCAdminProfileComponent implements OnInit {\r\n\r\n  ccadminForm: FormGroup;\r\n  submitted = false;\r\n  selectedCCAdmin: ClinicalCenterAdministrator;\r\n  user:User;\r\n  clinicalCenterAdministrator:ClinicalCenterAdministrator;\r\n\r\n  constructor(\r\n    private ccadminService: ClinicalCenterAdministratorService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedCCAdmin=ccadminService.getCCAdmin(this.user.email);\r\n    console.log(this.selectedCCAdmin);\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.ccadminForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedCCAdmin.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedCCAdmin.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedCCAdmin.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedCCAdmin.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedCCAdmin.number, [Validators.required, Validators.minLength(9)]),\r\n     });\r\n  }\r\n\r\n  get f() {\r\n    return this.ccadminForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.ccadminForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.clinicalCenterAdministrator = new ClinicalCenterAdministrator(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.CCADMIN);\r\n    \r\n    this.editClinicalCenterAdministrator();\r\n    \r\n  }\r\n\r\n    public editClinicalCenterAdministrator(){\r\n      this.ccadminService.editCCAdmin(this.clinicalCenterAdministrator).subscribe(\r\n        data => {\r\n          this.userService.setUser(this.user);\r\n          this.ccadminService.setCCAdmin(this.clinicalCenterAdministrator);\r\n          this.router.navigate(['/clinicalCenterAdministrator/profile']);\r\n        },\r\n        error => {\r\n          alert('Error edit clinical center administrator');\r\n        }\r\n      );\r\n    }\r\n\r\n \r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljLXNlYXJjaC9jbGluaWMtc2VhcmNoLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { ExaminationType } from 'src/app/models/examinationType';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { ExaminationTypeService } from 'src/app/services/examination-type.service';\r\n\r\n@Component({\r\n  selector: 'app-clinic-search',\r\n  templateUrl: './clinic-search.component.html',\r\n  styleUrls: ['./clinic-search.component.css']\r\n})\r\nexport class ClinicSearchComponent implements OnInit {\r\n\r\n  SearchClinicsGroup: FormGroup;\r\n  types: Array<ExaminationType> = new Array<ExaminationType>();\r\n  myFilter = (d: Date): boolean => {\r\n    const day = d.getDay();\r\n    // Subota i nedelja se ne radi.\r\n    return day !== 0 && day !== 6;\r\n  }\r\n\r\n  constructor(private formBuilder: FormBuilder, private examinationTypeService: ExaminationTypeService , private dialogRef: MatDialogRef<ClinicSearchComponent>,\r\n              @Inject(MAT_DIALOG_DATA) data) {\r\n    this.types = examinationTypeService.getAllTypes();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.SearchClinicsGroup = this.formBuilder.group({\r\n      date: new FormControl('', [Validators.required]),\r\n      type: new FormControl('', [Validators.required]),\r\n    });\r\n  }\r\n  get f() {\r\n    return this.SearchClinicsGroup.controls;\r\n  }\r\n\r\n  save() {\r\n    this.dialogRef.close(this.SearchClinicsGroup.value);\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljYWRtaW5pc3RyYXRvci1wYWdlL2NsaW5pY2FkbWluaXN0cmF0b3ItcGFnZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-clinicadministrator-page',\r\n  templateUrl: './clinicadministrator-page.component.html',\r\n  styleUrls: ['./clinicadministrator-page.component.css']\r\n})\r\nexport class ClinicadministratorPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljYWRtaW5pc3RyYXRvci1wcm9maWxlL2NsaW5pY2FkbWluaXN0cmF0b3ItcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { ClinicAdministrator } from 'src/app/models/clinicAdministrator';\r\nimport { User } from 'src/app/models/user';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { Router } from '@angular/router';\r\nimport { ClinicAdministratorService } from 'src/app/services/clinic-administrator.service';\r\nimport { Role } from 'src/app/models/role';\r\n\r\n@Component({\r\n  selector: 'app-clinicadministrator-profile',\r\n  templateUrl: './clinicadministrator-profile.component.html',\r\n  styleUrls: ['./clinicadministrator-profile.component.css']\r\n})\r\nexport class ClinicadministratorProfileComponent implements OnInit {\r\n\r\n  clinicAdministratorProfileForm: FormGroup;\r\n  submitted = false;\r\n  clinicAdministrator: ClinicAdministrator;\r\n  selectedClinicAdministrator: ClinicAdministrator;\r\n  user: User;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private clinicAdministratorService: ClinicAdministratorService,\r\n               private  userService: UserService) {\r\n    this.user = JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedClinicAdministrator = clinicAdministratorService.getClinicAdministrator(this.user.email);\r\n    console.log(this.selectedClinicAdministrator);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.clinicAdministratorProfileForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedClinicAdministrator.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedClinicAdministrator.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedClinicAdministrator.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedClinicAdministrator.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedClinicAdministrator.number, [Validators.required, Validators.minLength(9)]),\r\n      clinic: new FormControl(this.selectedClinicAdministrator.clinic, [Validators.required]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.clinicAdministratorProfileForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.clinicAdministratorProfileForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.clinicAdministrator = new ClinicAdministrator(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.clinic.value,\r\n    );\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.CLINICADMINISTRATOR);\r\n\r\n    this.editClinicAdministrator();\r\n  }\r\n\r\n  private editClinicAdministrator() {\r\n    this.clinicAdministratorService.editClinicAdministrator(this.clinicAdministrator).subscribe(\r\n      data => {\r\n        this.userService.setUser(this.user);\r\n        this.clinicAdministratorService.setClinicAdministrator(this.clinicAdministrator);\r\n        this.router.navigate(['/clinicAdministrator/home']);\r\n        console.log('uspesno');\r\n      },\r\n      error => {\r\n        alert('Error edit clinicAdministrator');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","export default \"div {\\r\\n    width: 100%;\\r\\n  \\r\\n  }\\r\\n  \\r\\n  table {\\r\\n    width: 75%;\\r\\n    margin-top:50px;\\r\\n    margin-left:300px;\\r\\n  \\r\\n  }\\r\\n  \\r\\n  .mat-form-field {\\r\\n    font-size: 14px;\\r\\n    margin-top:50px;\\r\\n    margin-left:300px;\\r\\n    width: 75%;\\r\\n  }\\r\\n  \\r\\n  mat-paginator {\\r\\n    width: 75%;\\r\\n    margin-left:300px;\\r\\n  }\\r\\n  \\r\\n  tr.example-detail-row {\\r\\n    height: 0;\\r\\n  }\\r\\n  \\r\\n  tr.example-element-row:not(.example-expanded-row):hover {\\r\\n    background: #777;\\r\\n  }\\r\\n  \\r\\n  tr.example-element-row:not(.example-expanded-row):active {\\r\\n    background: #efefef;\\r\\n  }\\r\\n  \\r\\n  .example-element-row td {\\r\\n    border-bottom-width: 0;\\r\\n  }\\r\\n  \\r\\n  .example-element-detail {\\r\\n    overflow: hidden;\\r\\n    display: -webkit-box;\\r\\n    display: flex;\\r\\n  }\\r\\n  \\r\\n  .example-element-diagram {\\r\\n    min-width: 80px;\\r\\n    border: 2px solid black;\\r\\n    padding: 8px;\\r\\n    font-weight: lighter;\\r\\n    margin: 8px 0;\\r\\n    height: 104px;\\r\\n  }\\r\\n  \\r\\n  .example-element-name {\\r\\n    font-weight: bold;\\r\\n    font-size: 40px;\\r\\n    line-height: normal;\\r\\n  }\\r\\n  \\r\\n  .example-element-description {\\r\\n    padding: 16px;\\r\\n  }\\r\\n  \\r\\n  .example-element-description-attribution {\\r\\n    opacity: 0.5;\\r\\n  }\\r\\n  \\r\\n  .mat-raised-button {\\r\\n    margin-left:300px;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9jbGluaWNzLXBhZ2UvY2xpbmljcy1wYWdlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXOztFQUViOztFQUVBO0lBQ0UsVUFBVTtJQUNWLGVBQWU7SUFDZixpQkFBaUI7O0VBRW5COztFQUNBO0lBQ0UsZUFBZTtJQUNmLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsVUFBVTtFQUNaOztFQUNBO0lBQ0UsVUFBVTtJQUNWLGlCQUFpQjtFQUNuQjs7RUFFQTtJQUNFLFNBQVM7RUFDWDs7RUFFQTtJQUNFLGdCQUFnQjtFQUNsQjs7RUFFQTtJQUNFLG1CQUFtQjtFQUNyQjs7RUFFQTtJQUNFLHNCQUFzQjtFQUN4Qjs7RUFFQTtJQUNFLGdCQUFnQjtJQUNoQixvQkFBYTtJQUFiLGFBQWE7RUFDZjs7RUFFQTtJQUNFLGVBQWU7SUFDZix1QkFBdUI7SUFDdkIsWUFBWTtJQUNaLG9CQUFvQjtJQUNwQixhQUFhO0lBQ2IsYUFBYTtFQUNmOztFQUVBO0lBQ0UsaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixtQkFBbUI7RUFDckI7O0VBRUE7SUFDRSxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxZQUFZO0VBQ2Q7O0VBQ0E7SUFDRSxpQkFBaUI7RUFDbkIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2NsaW5pY3MtcGFnZS9jbGluaWNzLXBhZ2UuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImRpdiB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICBcclxuICB9XHJcbiAgXHJcbiAgdGFibGUge1xyXG4gICAgd2lkdGg6IDc1JTtcclxuICAgIG1hcmdpbi10b3A6NTBweDtcclxuICAgIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG4gIFxyXG4gIH1cclxuICAubWF0LWZvcm0tZmllbGQge1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgbWFyZ2luLXRvcDo1MHB4O1xyXG4gICAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbiAgICB3aWR0aDogNzUlO1xyXG4gIH1cclxuICBtYXQtcGFnaW5hdG9yIHtcclxuICAgIHdpZHRoOiA3NSU7XHJcbiAgICBtYXJnaW4tbGVmdDozMDBweDtcclxuICB9XHJcbiAgXHJcbiAgdHIuZXhhbXBsZS1kZXRhaWwtcm93IHtcclxuICAgIGhlaWdodDogMDtcclxuICB9XHJcbiAgXHJcbiAgdHIuZXhhbXBsZS1lbGVtZW50LXJvdzpub3QoLmV4YW1wbGUtZXhwYW5kZWQtcm93KTpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjNzc3O1xyXG4gIH1cclxuICBcclxuICB0ci5leGFtcGxlLWVsZW1lbnQtcm93Om5vdCguZXhhbXBsZS1leHBhbmRlZC1yb3cpOmFjdGl2ZSB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZWZlZmVmO1xyXG4gIH1cclxuICBcclxuICAuZXhhbXBsZS1lbGVtZW50LXJvdyB0ZCB7XHJcbiAgICBib3JkZXItYm90dG9tLXdpZHRoOiAwO1xyXG4gIH1cclxuICBcclxuICAuZXhhbXBsZS1lbGVtZW50LWRldGFpbCB7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICB9XHJcbiAgXHJcbiAgLmV4YW1wbGUtZWxlbWVudC1kaWFncmFtIHtcclxuICAgIG1pbi13aWR0aDogODBweDtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1xyXG4gICAgcGFkZGluZzogOHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XHJcbiAgICBtYXJnaW46IDhweCAwO1xyXG4gICAgaGVpZ2h0OiAxMDRweDtcclxuICB9XHJcbiAgXHJcbiAgLmV4YW1wbGUtZWxlbWVudC1uYW1lIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1zaXplOiA0MHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcclxuICB9XHJcbiAgXHJcbiAgLmV4YW1wbGUtZWxlbWVudC1kZXNjcmlwdGlvbiB7XHJcbiAgICBwYWRkaW5nOiAxNnB4O1xyXG4gIH1cclxuICBcclxuICAuZXhhbXBsZS1lbGVtZW50LWRlc2NyaXB0aW9uLWF0dHJpYnV0aW9uIHtcclxuICAgIG9wYWNpdHk6IDAuNTtcclxuICB9XHJcbiAgLm1hdC1yYWlzZWQtYnV0dG9uIHtcclxuICAgIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG4gIH0iXX0= */\"","import { Component, OnInit, ViewChild, Input } from '@angular/core';\r\nimport { Clinic } from 'src/app/models/clinic';\r\nimport { MatTableDataSource, MatPaginator, MatDialog } from '@angular/material';\r\nimport { ClinicService } from 'src/app/services/clinic.service';\r\nimport { Doctor } from 'src/app/models/doctor';\r\nimport { trigger, state, transition, style, animate } from '@angular/animations';\r\nimport { DoctorService } from 'src/app/services/doctor.service';\r\nimport { ClinicSearchComponent } from '../clinic-search/clinic-search.component';\r\nimport { PatientDoctorsListComponent } from '../patient-doctors-list/patient-doctors-list.component';\r\n\r\n@Component({\r\n  selector: 'app-clinics-page',\r\n  templateUrl: './clinics-page.component.html',\r\n  styleUrls: ['./clinics-page.component.css'],\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({height: '0px', minHeight: '0'})),\r\n      state('expanded', style({height: '*'})),\r\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\r\n    ]),\r\n  ],\r\n})\r\nexport class ClinicsPageComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['Name', 'Address', 'ClinicRating', 'Price', 'Doctors'];\r\n  clinic: Clinic;\r\n  clinicDataSource = new MatTableDataSource<Clinic>();\r\n  doctorDataSource=new MatTableDataSource<Doctor>();\r\n\r\n  clinics: Array<Clinic> = new Array<Clinic>();\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n\r\n  condition: boolean;\r\n\r\n  tmp: string;\r\n  tmp1: string;\r\n  @Input() doctorListComponent: PatientDoctorsListComponent;\r\n  \r\n\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private clinicService: ClinicService,\r\n    private doctorService: DoctorService,\r\n    public dialog: MatDialog\r\n  ) {\r\n    this.clinics=this.clinicService.getAllClinics();\r\n    console.log(this.clinics);\r\n    this.doctors = this.doctorService.getAllDoctors();\r\n    this.condition=true;\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n    this.clinicDataSource.paginator = this.paginator;\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.clinicDataSource.filter = filterValue.trim().toLowerCase();\r\n    if (this.clinicDataSource.paginator) {\r\n      this.clinicDataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  all() {\r\n      this.clinicDataSource = new MatTableDataSource(this.clinicService.getAllClinics());\r\n  }\r\n\r\n  openDialog() {\r\n    const dialog = this.dialog.open(ClinicSearchComponent);\r\n    dialog.afterClosed().subscribe(data => {\r\n       if (data !== undefined) {\r\n         this.clinics = data.clinics;\r\n         this.clinicDataSource = new MatTableDataSource(this.clinics);\r\n         this.condition = false;\r\n         this.tmp = data.date;\r\n       }\r\n      }\r\n    );\r\n  }\r\n\r\n  doctorList(element: Clinic) {\r\n    this.doctorService.setDoctorss(element.doctors);\r\n    console.log(element);\r\n    for (const d of element.doctors) {\r\n     //  this.tmp1 = this.doctorService.getDoctorsTermins(this.tmp, d.email);\r\n     //  console.log(this.tmp1);\r\n    }\r\n    const dialog = this.dialog.open(PatientDoctorsListComponent);\r\n\r\n  }\r\n\r\n}\r\n","export class CodebookDTO {\r\n\r\n    medicine:any;\r\n    diagnose:any;\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY29kZWJvb2svY29kZWJvb2suY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ClinicalCenterAdministratorService } from '../../services/clinicalCenterAdministrator.service';\r\nimport { CodebookDTO } from '../codebook-dto'\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { MedicalHistoryPageComponent } from '../medical-history-page/medical-history-page.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-codebook',\r\n  templateUrl: './codebook.component.html',\r\n  styleUrls: ['./codebook.component.css']\r\n})\r\nexport class CodebookComponent implements OnInit {\r\n\r\n  constructor(private codebookService: ClinicalCenterAdministratorService, private formBuilder: FormBuilder) { }\r\n  addMedicine : FormGroup;\r\n  addDiagnose : FormGroup;\r\n  codebook : any;\r\n\r\n  ngOnInit() {\r\n\r\n    this.addMedicine  = this.formBuilder.group({\r\n      'label' : new FormControl('', Validators.required)\r\n    });\r\n\r\n    this.addDiagnose = this.formBuilder.group({\r\n      'title' : new FormControl('', Validators.required)\r\n    });\r\n\r\n    this.codebookService.returnCodebook().subscribe(data =>{\r\n      this.codebook = data;\r\n    },\r\n    error=>{}\r\n    )\r\n\r\n\r\n  }\r\n  addCodebookMedicine(){\r\n    var si = new CodebookDTO();\r\n    si.medicine = new Object();\r\n    si.medicine.label = this.addMedicine.value.label;\r\n    this.codebookService.addCodebook(si).subscribe(data=>{this.codebook = data});\r\n  }\r\n\r\n  deleteMedicine(medicine : any){\r\n    var si = new CodebookDTO();\r\n    si.medicine = medicine;\r\n    //alert(JSON.stringify(si));\r\n    this.codebookService.deleteCodebook(si).subscribe(data=>{this.codebook = data});\r\n  }\r\n\r\n  addCodebookDiagnose() {\r\n    var codebook = new CodebookDTO();\r\n    codebook.diagnose = new Object();\r\n    codebook.diagnose.title = this.addDiagnose.value.title;\r\n    this.codebookService.addCodebook(codebook).subscribe(data=>{this.codebook = data});\r\n  }\r\n\r\n  deleteDiagnose(diagnose : any) {\r\n    var codebook = new CodebookDTO();\r\n    codebook.diagnose = diagnose;\r\n    this.codebookService.deleteCodebook(codebook).subscribe(data=>{this.codebook = data});\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXBhZ2UvZG9jdG9yLXBhZ2UuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-doctor-page',\r\n  templateUrl: './doctor-page.component.html',\r\n  styleUrls: ['./doctor-page.component.css']\r\n})\r\nexport class DoctorPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXByb2ZpbGUvZG9jdG9yLXByb2ZpbGUuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Doctor } from '../../models/doctor';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { DoctorService } from '../../services/doctor.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\n\r\n@Component({\r\n  selector: 'app-doctor-profile',\r\n  templateUrl: './doctor-profile.component.html',\r\n  styleUrls: ['./doctor-profile.component.css']\r\n})\r\nexport class DoctorProfileComponent implements OnInit {\r\n\r\n  \r\n  doctorProfileForm: FormGroup;\r\n  submitted = false;\r\n  doctor: Doctor;\r\n  selectedDoctor: Doctor;\r\n  user: User;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private doctorService: DoctorService,\r\n              private  userService: UserService) {\r\n    this.user = JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedDoctor = doctorService.getDoctor(this.user.email);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.doctorProfileForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedDoctor.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedDoctor.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedDoctor.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedDoctor.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedDoctor.phone, [Validators.required, Validators.minLength(9)]),\r\n      workHoursFrom: new FormControl(this.selectedDoctor.workHoursFrom, [Validators.required, Validators.minLength(2),\r\n        Validators.maxLength(2)]),\r\n      workHoursTo: new FormControl(this.selectedDoctor.workHoursTo, [Validators.required, Validators.minLength(2),\r\n        Validators.maxLength(2)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.doctorProfileForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.doctorProfileForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.doctor = new Doctor(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.workHoursFrom.value,\r\n      this.f.workHoursTo.value,\r\n    );\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.DOCTOR);\r\n\r\n    this.editDoctor();\r\n  }\r\n\r\n  private editDoctor() {\r\n    this.doctorService.editDoctor(this.doctor).subscribe(\r\n      data => {\r\n        this.userService.setUser(this.user);\r\n        this.doctorService.setDoctor(this.doctor);\r\n        this.router.navigate(['/doctor/home']);\r\n        console.log('uspesno');\r\n      },\r\n      error => {\r\n        alert('Error edit doctor');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormGroup, FormBuilder, Validators} from '@angular/forms';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport { Router } from '@angular/router';\r\nimport {User} from '../../models/user';\r\nimport {Role} from '../../models/role';\r\nimport {UserService} from '../../services/user.service';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport { NurseService } from 'src/app/services/nurse.service';\r\n\r\nimport { MedicalRecordService } from 'src/app/services/medical-record.service';\r\n\r\nimport { ClinicalCenterAdministratorService } from 'src/app/services/clinicalCenterAdministrator.service';\r\nimport { ClinicAdministratorService } from 'src/app/services/clinic-administrator.service';\r\n\r\n\r\n\r\nexport class LoginUser {\r\n  constructor(\r\n    public email: string,\r\n    public password: string\r\n  ) {}\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n\r\n  private loginForm: FormGroup;\r\n  private submitted = false;\r\n  private user:User;\r\n  private loginUser:LoginUser;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService,\r\n    private doctorService:DoctorService,\r\n    private nurseService:NurseService,\r\n    private clinicAdministratorService:ClinicAdministratorService,\r\n\r\n    private recordService:MedicalRecordService,\r\n\r\n    private ccadminService:ClinicalCenterAdministratorService,\r\n\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loginForm=this.formBuilder.group({\r\n      email: ['',[Validators.required,Validators.email]],\r\n      password: ['',Validators.required]\r\n    })\r\n  }\r\n\r\n  get f(){\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  private onSubmit(){\r\n    this.submitted=true;\r\n\r\n    if(this.loginForm.invalid)\r\n    return;\r\n  \r\n\r\n  this.loginUser=new LoginUser(\r\n    this.f.email.value,\r\n    this.f.password.value\r\n  )\r\n    this.user=this.userService.getUser(this.f.email.value);\r\n    console.log(this.user);\r\n    this.attemptLogin();\r\n  }\r\n\r\n  public attemptLogin() {\r\n    if (this.user.role === Role.PATIENT && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.patientService.loginPatient(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/patient/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.DOCTOR && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.doctorService.loginDoctor(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/doctor/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.CLINICADMINISTRATOR && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.clinicAdministratorService.loginClinicAdministrator(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/clinicAdministrator/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.NURSE && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.nurseService.loginNurse(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/nurse/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.CCADMIN && this.loginUser.password === this.user.password) {\r\n      \r\n    \r\n      console.log(this.user);\r\n      this.ccadminService.loginCCAdmin(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in as ccadmin');\r\n            this.router.navigate(['/clinicalCenterAdministrator/profile']);\r\n          } else {\r\n            console.log('Login error as ccadmin');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1oaXN0b3J5LXBhZ2UvbWVkaWNhbC1oaXN0b3J5LXBhZ2UuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Examination } from 'src/app/models/examination';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { ExaminationService } from 'src/app/services/examination.service';\r\nimport { ExaminationTable } from 'src/app/models/examinationTable';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { User } from 'src/app/models/user';\r\nimport { Patient } from 'src/app/models/patient';\r\nimport { PatientService } from 'src/app/services/patient.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-medical-history-page',\r\n  templateUrl: './medical-history-page.component.html',\r\n  styleUrls: ['./medical-history-page.component.css']\r\n})\r\nexport class MedicalHistoryPageComponent implements OnInit {\r\n\r\n  exTable: ExaminationTable;\r\n  displayedColumns: string[] = ['kind', 'clinic', 'doctor'];\r\n  dataSource = new MatTableDataSource<ExaminationTable>();\r\n  examinations: Array<Examination> = this.examinationService.getAllExaminations();\r\n  exTables: Array<ExaminationTable>=new Array<ExaminationTable>();\r\n  tmp: Array<Examination> = new Array<Examination>();\r\n  loggedUser: string = this.userService.isLoggedIn();\r\n  user: User;\r\n  tmpStr = this.loggedUser.split(',');\r\n  tmpStr1 = this.tmpStr[0].split(':');\r\n  str= \"\";\r\n  constructor(private patientService: PatientService, private examinationService: ExaminationService,\r\n              private userService: UserService) {\r\n    this.user = JSON.parse(this.loggedUser);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    for (const c of this.examinations) {\r\n      if (c.patient.email === this.user.email) {\r\n        this.tmp.push(c);\r\n        for(const s of c.doctors){\r\n          this.str=s.name+ \" \";\r\n        }\r\n        this.exTable= new ExaminationTable(this.kindExamination(c.kind.toString()),this.str,c.clinic.name);\r\n        this.exTables.push(this.exTable);\r\n        console.log(this.exTable);\r\n      }\r\n    }\r\n    this.dataSource = new MatTableDataSource(this.exTables);\r\n    console.log(this.exTables);\r\n    this.str=\"\";\r\n  }\r\n\r\n    kindExamination(kind: string) {\r\n    if (kind === 'EXAMINATION') {\r\n      return \"EXAMINATION\";\r\n    } else {\r\n      return \"OPERATION\";\r\n    }\r\n  }\r\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1yZWNvcmQtcGFnZS9tZWRpY2FsLXJlY29yZC1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { MedicalRecordService } from 'src/app/services/medical-record.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { User } from 'src/app/models/user';\r\nimport { PatientProfileComponent } from '../patient-profile/patient-profile.component';\r\nimport { Patient } from 'src/app/models/patient';\r\nimport { MedicalRecord } from 'src/app/models/medicalRecord';\r\n\r\n\r\n@Component({\r\n  selector: 'app-medical-record-page',\r\n  templateUrl: './medical-record-page.component.html',\r\n  styleUrls: ['./medical-record-page.component.css']\r\n})\r\nexport class MedicalRecordPageComponent implements OnInit {\r\n  \r\n  \r\n  records: Array<MedicalRecord> = new Array<MedicalRecord>();\r\n  loggedUser: string = this.userService.isLoggedIn();\r\n  user: User;\r\n  mr: MedicalRecord;\r\n  displayedColumns: string[] = ['Height', 'Weight','BloodType','Allergies','ExaminationReports'];\r\n  dataSource= new MatTableDataSource<MedicalRecord>();\r\n  rec:Array<MedicalRecord>=new Array<MedicalRecord>();\r\n\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private medicalRecordService: MedicalRecordService, \r\n    private userService: UserService\r\n    ) {\r\n      this.records = medicalRecordService.getAllMedicalRecords();\r\n      this.user = JSON.parse(this.loggedUser);\r\n      this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.setAll();\r\n    this.dataSource = new MatTableDataSource(this.rec);\r\n    this.dataSource.paginator = this.paginator;\r\n}\r\n\r\n  setAll() {\r\n    for (let i = 0; i < this.records.length; i++) {\r\n      const element = this.records[i];\r\n      let truee=0;\r\n      if(element.patient.email==this.user.email){\r\n        for(const c of this.rec){\r\n          if(c.id==element.id)\r\n          truee=1;\r\n        }\r\n        if(truee==0){\r\n          this.rec.push(this.records[i]);\r\n        }\r\n      }\r\n  }\r\n  }\r\n\r\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtcGFnZS9udXJzZS1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-page',\r\n  templateUrl: './nurse-page.component.html',\r\n  styleUrls: ['./nurse-page.component.css']\r\n})\r\nexport class NursePageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtcHJvZmlsZS9udXJzZS1wcm9maWxlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-profile',\r\n  templateUrl: './nurse-profile.component.html',\r\n  styleUrls: ['./nurse-profile.component.css']\r\n})\r\nexport class NurseProfileComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtdmFjYXRpb24tcmVxL251cnNlLXZhY2F0aW9uLXJlcS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Zahtev} from '../../models/zahtev'\r\nimport {MatDialog} from '@angular/material';\r\nimport {Router} from '@angular/router';\r\nimport {VacationService} from '../../services/vacation.service';\r\nimport {ZahtevStatus} from '../../models/zahtevStatus';\r\n\r\n@Component({\r\n  selector: 'app-nurse-vacation-req',\r\n  templateUrl: './nurse-vacation-req.component.html',\r\n  styleUrls: ['./nurse-vacation-req.component.css']\r\n})\r\nexport class NurseVacationRequestComponent implements OnInit {\r\n\r\n  vacationRequestForm: FormGroup;\r\n  submitted = false;\r\n  zahtev: Zahtev;\r\n\r\n  constructor(public dialog: MatDialog,\r\n              private formBuilder: FormBuilder,\r\n              private router: Router,\r\n              private vacationService: VacationService,\r\n  ) {}\r\n\r\n\r\n  ngOnInit() {\r\n    this.vacationRequestForm = this.formBuilder.group({\r\n      email: new FormControl('', [Validators.required]),\r\n      name: new FormControl('', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      startingDate: new FormControl('', [Validators.required]),\r\n      finishDate: new FormControl('', [Validators.required]),\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n  get f() {\r\n    return this.vacationRequestForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.vacationRequestForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.zahtev = new Zahtev(\r\n      this.f.email.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.startingDate.value,\r\n      this.f.finishDate.value,\r\n      ZahtevStatus.AWAITING_APPROVAL\r\n    );\r\n\r\n    this.zahtev = new Zahtev(this.f.email.value, this.f.name.value, this.f.surname.value, this.f.startingDate.value, this.f.finishDate.value, ZahtevStatus.AWAITING_APPROVAL);\r\n\r\n    this.createVacation();\r\n\r\n  }\r\n\r\n  private createVacation() {\r\n   \r\n\r\n    this.vacationService.newVacation1(this.zahtev).subscribe(\r\n      data => {\r\n       \r\n\r\n        this.vacationService.addVacation1(this.zahtev);\r\n        this.router.navigate(['/nurse/home']);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        console.log('greska');\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1kb2N0b3Itc2VhcmNoL3BhdGllbnQtZG9jdG9yLXNlYXJjaC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { Doctor } from 'src/app/models/doctor';\r\nimport { DoctorService } from 'src/app/services/doctor.service';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-patient-doctor-search',\r\n  templateUrl: './patient-doctor-search.component.html',\r\n  styleUrls: ['./patient-doctor-search.component.css']\r\n})\r\nexport class PatientDoctorSearchComponent implements OnInit {\r\n\r\n\r\n  SearchDoctorGroup: FormGroup;\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n  constructor(private formBuilder: FormBuilder,\r\n              private doctorService: DoctorService,\r\n              private dialogRef: MatDialogRef<PatientDoctorSearchComponent>,\r\n              @Inject(MAT_DIALOG_DATA) data) { }\r\n\r\n  ngOnInit() {\r\n    this.SearchDoctorGroup = this.formBuilder.group({\r\n      name: new FormControl(''),\r\n      surname: new FormControl(''),\r\n      rating: new FormControl('', [Validators.required, Validators.minLength(1), Validators.maxLength(1),\r\n        Validators.pattern('[0-5]*')]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.SearchDoctorGroup.controls;\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  save() {\r\n    if (this.SearchDoctorGroup.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.doctors = this.doctorService.getDoctrosWithSearch(this.f.name.value, this.f.surname.value, this.f.rating.value);\r\n    console.log(this.doctors);\r\n    this.dialogRef.close(this.doctors);\r\n  }\r\n}\r\n","export default \"table {\\r\\n    width: 100%;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9wYXRpZW50LWRvY3RvcnMtbGlzdC9wYXRpZW50LWRvY3RvcnMtbGlzdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksV0FBVztFQUNiIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9wYXRpZW50LWRvY3RvcnMtbGlzdC9wYXRpZW50LWRvY3RvcnMtbGlzdC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfSJdfQ== */\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport { MatTableDataSource, MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Doctor } from 'src/app/models/doctor';\r\nimport { DoctorService } from 'src/app/services/doctor.service';\r\nimport { PatientDoctorSearchComponent } from '../patient-doctor-search/patient-doctor-search.component';\r\n\r\n@Component({\r\n  selector: 'app-patient-doctors-list',\r\n  templateUrl: './patient-doctors-list.component.html',\r\n  styleUrls: ['./patient-doctors-list.component.css']\r\n})\r\nexport class PatientDoctorsListComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['Name', 'Surname', 'DoctorRating', 'Price'];\r\n  doctorDataSource: MatTableDataSource<Doctor>;\r\n  doctors: Array<Doctor>;\r\n  @Input() doctorSearchDialog: PatientDoctorSearchComponent;\r\n  constructor(private doctorService: DoctorService,\r\n              public searchDialog: MatDialog,\r\n              private dialogRef: MatDialogRef<PatientDoctorSearchComponent>) {\r\n    this.doctors = doctorService.getDoctorss();\r\n    this.doctorDataSource = new MatTableDataSource(this.doctors);\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.doctorDataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.doctorDataSource.paginator) {\r\n      this.doctorDataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  searchDoctors() {\r\n    const dialog = this.searchDialog.open(PatientDoctorSearchComponent);\r\n    dialog.afterClosed().subscribe(data => {\r\n        if (data !== undefined) {\r\n         this.doctors = data;\r\n         this.doctorDataSource = new MatTableDataSource(data);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1wYWdlL3BhdGllbnQtcGFnZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-patient-page',\r\n  templateUrl: './patient-page.component.html',\r\n  styleUrls: ['./patient-page.component.css']\r\n})\r\nexport class PatientPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1wcm9maWxlL3BhdGllbnQtcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Patient } from '../../models/patient';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { PatientService } from '../../services/patient.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\nimport { PatientStatus } from '../../models/patientStatus';\r\n\r\n\r\n@Component({\r\n  selector: 'app-patient-profile',\r\n  templateUrl: './patient-profile.component.html',\r\n  styleUrls: ['./patient-profile.component.css']\r\n})\r\nexport class PatientProfileComponent implements OnInit {\r\n\r\n  patientForm: FormGroup;\r\n  submitted = false;\r\n  selectedPatient: Patient;\r\n  user:User;\r\n  patient:Patient;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedPatient=patientService.getPatient(this.user.email);\r\n    console.log(this.selectedPatient);\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.patientForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedPatient.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedPatient.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedPatient.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedPatient.surname, [Validators.required]),\r\n      address: new FormControl(this.selectedPatient.address, [Validators.required]),\r\n      city: new FormControl(this.selectedPatient.city, [Validators.required]),\r\n      country: new FormControl(this.selectedPatient.country, [Validators.required]),\r\n      number: new FormControl(this.selectedPatient.number, [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl(this.selectedPatient.insuranceID, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.patientForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.patientForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.PATIENT);\r\n    \r\n    this.editPatient();\r\n    \r\n  }\r\n\r\n    public editPatient(){\r\n      this.patientService.editPatient(this.patient).subscribe(\r\n        data => {\r\n          this.userService.setUser(this.user);\r\n          this.patientService.setPatient(this.patient);\r\n          this.router.navigate(['/patient/home']);\r\n        },\r\n        error => {\r\n          alert('Error edit patient');\r\n        }\r\n      );\r\n    }\r\n\r\n \r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVnaXN0ZXItcGF0aWVudC9yZWdpc3Rlci1wYXRpZW50LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, Injectable} from '@angular/core';\r\nimport { Patient} from '../../models/patient';\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {PatientStatus} from '../../models/patientStatus';\r\nimport {Role} from '../../models/role';\r\nimport {User} from '../../models/user';\r\nimport {UserService} from '../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-register-patient',\r\n  templateUrl: './register-patient.component.html',\r\n  styleUrls: ['./register-patient.component.css']\r\n})\r\nexport class RegisterPatientComponent implements OnInit {\r\n\r\n  registerForm: FormGroup;\r\n  submitted = false;\r\n  patient: Patient;\r\n  user:User;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formBuilder.group({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl('', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      address: new FormControl('', [Validators.required]),\r\n      city: new FormControl('', [Validators.required]),\r\n      country: new FormControl('', [Validators.required]),\r\n      number: new FormControl('', [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl('', [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.PATIENT);\r\n\r\n    this.createPatient();\r\n  }\r\n\r\n  private createPatient() {\r\n    this.patientService.newPatient(this.patient).subscribe(\r\n      data => {\r\n        this.userService.addUser(this.user);\r\n        console.log(this.user);\r\n        this.patientService.addPatient(this.patient);\r\n        this.router.navigate(['/login']);\r\n      },\r\n      error => {\r\n        alert('Error registration patient');\r\n      }\r\n    );\r\n  }\r\n\r\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdmFjYXRpb24tcmVxdWVzdC1yZWdpc3Rlci92YWNhdGlvbi1yZXF1ZXN0LXJlZ2lzdGVyLmNvbXBvbmVudC5jc3MifQ== */\"","import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {Router} from '@angular/router';\r\nimport {Zahtev} from '../../models/zahtev';\r\nimport {VacationService} from '../../services/vacation.service';\r\nimport {ZahtevStatus} from '../../models/zahtevStatus';\r\n\r\n@Component({\r\n  selector: 'app-vacation-request-register',\r\n  templateUrl: './vacation-request-register.component.html',\r\n  styleUrls: ['./vacation-request-register.component.css']\r\n})\r\nexport class VacationRequestRegisterComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['email', 'startingDate', 'finishDate', 'approving'];\r\n  RequestsDataSource = new MatTableDataSource<Zahtev>();\r\n  p: Zahtev;\r\n  constructor(private vacationService: VacationService, private changeDetectorRef: ChangeDetectorRef,\r\n              private router: Router) {\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.RequestsDataSource = new MatTableDataSource<Zahtev>(this.vacationService.getAllRequests());\r\n  }\r\n\r\n  onAccept(zahtev) {\r\n    this.p = this.vacationService.getVacations(zahtev.email);\r\n    this.p.status = ZahtevStatus.APPROVED;\r\n    this.editVacation(zahtev);\r\n    this.deleteRow(zahtev);\r\n\r\n  }\r\n\r\n  private editVacation(zahtev) {\r\n    this.vacationService.editVacation(this.p).subscribe(\r\n      data => {\r\n        this.vacationService.setVacation(this.p);\r\n        this.deleteRow(zahtev);\r\n        this.router.navigate(['/clinicalCenterAdministrator/VacationRequests']);\r\n      },\r\n      error => {\r\n        alert('Error edit request');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteRow(d) {\r\n    const index = this.RequestsDataSource.data.indexOf(d);\r\n    this.RequestsDataSource.data.splice(index, 1);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { CdkStepperModule } from '@angular/cdk/stepper';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n\r\n@NgModule({\r\n  exports: [\r\n    A11yModule,\r\n    CdkStepperModule,\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    DragDropModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    PortalModule,\r\n    ScrollingModule,\r\n  ]\r\n})\r\nexport class DemoMaterialModule { }","import { Doctor } from './doctor';\r\nimport { ExaminationType } from './examinationType';\r\n\r\nexport class Clinic {\r\n  id: number;\r\n  name: string;\r\n  address: string;\r\n  description: string;\r\n  clinicRating: number;\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n  examinationTypes: Array<ExaminationType> = new Array<ExaminationType>();\r\n\r\n  constructor(name: string, address: string, description: string, doctors: Array<Doctor>, examinationTypes?: Array<ExaminationType>, clinicRating?: number, id?: number) {\r\n    this.name = name;\r\n    this.address = address;\r\n    this.description = description;\r\n    this.doctors = doctors;\r\n    this.clinicRating = clinicRating;\r\n    this.examinationTypes = examinationTypes;\r\n    this.id = id;\r\n  }\r\n}","import { Clinic } from './clinic';\r\n\r\nexport class ClinicAdministrator {\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    surname: string;\r\n    number: string;\r\n    clinic: Clinic;\r\n\r\n    constructor(email: string, password: string, name: string, surname: string, number1: string, clinic?: Clinic) {\r\n        this.email = email;\r\n        this.password = password;\r\n        this.name = name;\r\n        this.surname = surname;\r\n        this.number = number1;\r\n        this.clinic = clinic;\r\n    }\r\n}","\r\nexport class ClinicalCenterAdministrator{\r\n\r\n    constructor(\r\n        public email: string,\r\n        public password: string,\r\n        public name: string,\r\n        public surname: string,\r\n        public number: string,\r\n        \r\n    ){}\r\n}","import { Clinic } from './clinic';\r\nimport { ExaminationType } from './examinationType';\r\n\r\n\r\n  export class Doctor {\r\n\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    surname: string;\r\n    phone: string;\r\n    workHoursFrom: string;\r\n    workHoursTo: string;\r\n    clinic: Clinic;\r\n    doctorRating: number;\r\n    specialized: ExaminationType;\r\n  \r\n    constructor(email: string, password: string, name: string, surname: string, number1: string, workHoursFrom: string, workHoursTo: string, specialized?: ExaminationType, doctorRating?: number, clinic?: Clinic) {\r\n      this.email = email;\r\n      this.password = password;\r\n      this.name = name;\r\n      this.surname = surname;\r\n      this.phone = number1;\r\n      this.workHoursFrom = workHoursFrom;\r\n      this.workHoursTo = workHoursTo;\r\n      this.doctorRating = doctorRating;\r\n      this.specialized = specialized;\r\n      this.clinic = clinic;\r\n    }\r\n}","import { Doctor } from './doctor';\r\nimport { Nurse } from './nurse';\r\nimport { Patient } from './patient';\r\nimport { ExaminationType } from './examinationType';\r\nimport { Room } from './room';\r\nimport { ExaminationKind } from './examinationKind';\r\nimport { Clinic } from './clinic';\r\nimport { ExaminationStatus } from './examinationStatus';\r\nimport { Interval } from './interval';\r\n\r\nexport class Examination {\r\n  kind: ExaminationKind;\r\n  status: ExaminationStatus;\r\n  examinationType: ExaminationType;\r\n  discount: number;\r\n  doctorRating: number;\r\n  clinicRating: number;\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n  nurse: Nurse;\r\n  clinic: Clinic;\r\n  patient: Patient;\r\n  id: number;\r\n  interval: Interval;\r\n  constructor(kind: ExaminationKind, status: ExaminationStatus, examinationType: ExaminationType, discount: number,\r\n              doctorRating: number, clinicRating: number, nurse: Nurse,\r\n              clinic: Clinic, patient: Patient, doctors: Array<Doctor>, id: number, interval?: Interval) {\r\n    this.kind = kind;\r\n    this.status = status;\r\n    this.examinationType = examinationType;\r\n    this.discount = discount;\r\n    this.doctorRating = doctorRating;\r\n    this.clinicRating = clinicRating;\r\n    this.nurse = nurse;\r\n    this.clinic = clinic;\r\n    this.patient = patient;\r\n    this.doctors = doctors;\r\n    this.id = id;\r\n    this.interval = interval;\r\n  }\r\n}","export enum ExaminationKind {\r\n    EXAMINATION,\r\n    OPERATION\r\n  }","export enum ExaminationStatus {\r\n  APPROVED,\r\n  AWAITING,\r\n  PREDEF_BOOKED,\r\n  PREDEF_AVAILABLE\r\n}","export class ExaminationTable{\r\n     kind: string;\r\n   doctors:string;\r\n   clinic: string;\r\n\r\n    constructor(kind: string,doctors:string,clinic:string) {\r\n      this.kind = kind;\r\n      this.doctors=doctors;\r\n      this.clinic=clinic;\r\n  }\r\n}","export class ExaminationType {\r\n    id: number;\r\n    label: string;\r\n    price: number;\r\n    constructor(label: string, price: number, id?: number) {\r\n        this.label = label;\r\n        this.price = price;\r\n        this.id = id;\r\n    }\r\n}","import { Patient } from './patient';\r\nimport { ExaminationReport } from './examinationReport';\r\n\r\nexport class MedicalRecord{\r\n    id: number;\r\n    height: number;\r\n    weight: number;\r\n    bloodType: string;\r\n    allergies: string;\r\n    patient: Patient;\r\n    reports: Array<ExaminationReport> = new Array<ExaminationReport>();\r\n\r\n    constructor(id: number, height: number, weight: number, bloodType: string, allergies: string, patient: Patient, reports?: Array<ExaminationReport>) {\r\n    this.id = id;\r\n    this.height = height;\r\n    this.weight = weight;\r\n    this.bloodType = bloodType;\r\n    this.allergies = allergies;\r\n    this.patient = patient;\r\n    this.reports = reports;\r\n  }\r\n}","import { Time } from '@angular/common';\r\n\r\nexport class Nurse{\r\n    \r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    surname: string;\r\n    number: string;\r\n    city: string;\r\n    address: string;\r\n    country: string;\r\n    workHoursTo: Time;\r\n    workHoursFrom: Time;\r\n  \r\n\r\n    constructor(email: string, password: string, name: string, surname: string, number1: string, address: string, city: string, country: string, workHoursTo: Time, workHoursFrom: Time) {\r\n\r\n      this.email = email;\r\n      this.name = name;\r\n      this.password = password;\r\n      this.surname = surname;\r\n      this.number = number1;\r\n\r\n      this.address = address;\r\n      this.city = city;\r\n      this.country = country;\r\n      this.workHoursFrom = workHoursFrom;\r\n      this.workHoursTo = workHoursTo;\r\n\r\n    }\r\n}","import { PatientStatus } from './patientStatus';\r\n\r\nexport class Patient{\r\n\r\n    constructor(\r\n        public email: string,\r\n        public password: string,\r\n        public name: string,\r\n        public surname: string,\r\n        public number: string,\r\n        public address: string,\r\n        public city: string,\r\n        public country: string,\r\n        public insuranceID: string,\r\n        public status: PatientStatus\r\n    ){}\r\n}","export enum PatientStatus {\r\n    AWAITING,\r\n    APPROVED\r\n  }","export enum Role {\r\n  PATIENT,\r\n  DOCTOR,\r\n  NURSE,\r\n  CCADMIN,\r\n  NONE,\r\n  CLINICADMINISTRATOR,\r\n \r\n  }","import { Role } from './role';\r\n\r\nexport class User {\r\n    email: string;\r\n    password: string;\r\n    role: Role;\r\n    constructor(email:string,password:string,role:Role){\r\n        this.email=email;\r\n        this.password=password;\r\n        this.role=role;\r\n    }\r\n}\r\n","import {Clinic} from './clinic';\r\nimport {Doctor} from './doctor';\r\nimport {Nurse} from './nurse';\r\nimport {ZahtevStatus} from './zahtevStatus';\r\n\r\nexport class Zahtev {\r\n\r\n  email: string;\r\n  name: string;\r\n  surname: string;\r\n  startingDate: string;\r\n  finishDate: string;\r\n\r\n  status: ZahtevStatus;\r\n  constructor(email: string, name: string, surname: string, startingDate: string, finishDate: string, status: ZahtevStatus) {\r\n\r\n    this.email = email;\r\n    this.name = name;\r\n    this.surname = surname;\r\n    this.startingDate = startingDate;\r\n    this.finishDate = finishDate;\r\n    this.status = status;\r\n  }\r\n}\r\n","export enum ZahtevStatus {\r\n    AWAITING_APPROVAL,\r\n    APPROVED\r\n  }\r\n  ","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ClinicAdministrator } from '../models/clinicAdministrator';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UserService } from './user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClinicAdministratorService {\r\n\r\n  urlClinicAdministrator = environment.baseUrl + environment.clinicAdministrator;\r\n  listClinicAdministrators: Array<ClinicAdministrator> = new Array<ClinicAdministrator>();\r\n  clinicAdministrator: ClinicAdministrator;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserService\r\n  ) {\r\n    this.getAllClinicAdministrators();\r\n  }\r\n\r\n  public loginClinicAdministrator(clinicAdministrator) {\r\n    this.userService.setToken(clinicAdministrator);\r\n    return this.http.post(environment.baseUrl + '/login', clinicAdministrator, {responseType: 'text'});\r\n  }\r\n\r\n  public editClinicAdministrator(clinicAdministrator) {\r\n    return this.http.post(this.urlClinicAdministrator + '/edit', clinicAdministrator, {responseType: 'text'});\r\n  }\r\n\r\n  public getClinicAdministrator(email: string) {\r\n    console.log(this.listClinicAdministrators)\r\n    if ( this.listClinicAdministrators.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listClinicAdministrators) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public addClinicAdministrator(d: ClinicAdministrator) {\r\n    if (this.getClinicAdministrator(d.email) === null) {\r\n      this.listClinicAdministrators.push(d);\r\n    }\r\n  }\r\n\r\n  public setClinicAdministrator(d: ClinicAdministrator) {\r\n    for (const d1 of this.listClinicAdministrators) {\r\n      if (d1.email === d.email) {\r\n        d1.password = d.password;\r\n        d1.name = d.name;\r\n        d1.surname = d.surname;\r\n        d1.number = d.number;\r\n        d1.clinic = d.clinic;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getAllClinicAdministrators(): Array<ClinicAdministrator> {\r\n    this.http.get(this.urlClinicAdministrator + '/all').subscribe((data: ClinicAdministrator[]) => {\r\n        for (const c of data) {\r\n          this.clinicAdministrator = new ClinicAdministrator(c.email, c.password, c.name, c.surname, c.number, c.clinic);\r\n          console.log(c);\r\n          this.addClinicAdministrator(this.clinicAdministrator);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.listClinicAdministrators;\r\n  }\r\n\r\n\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Clinic } from '../models/clinic';\r\nimport { HttpClient, HttpParams } from '@angular/common/http'; \r\nimport { ExaminationType } from '../models/examinationType';\r\nimport { ExaminationTypeService } from './examination-type.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClinicService {\r\n\r\n  urlClinic = environment.baseUrl + environment.clinic;\r\n  listClinics: Array<Clinic> = new Array<Clinic>();\r\n  clinic: Clinic;\r\n  clinicsTypes: Array<Clinic> = new Array<Clinic>();\r\n  examinationTypes: Array<ExaminationType> = new Array<ExaminationType>();\r\n  constructor( private http: HttpClient, private examinationTypeService: ExaminationTypeService) {\r\n    this.examinationTypes = examinationTypeService.getAllTypes();\r\n    this.getAllClinics();\r\n  }\r\n\r\n  public addClinic(c: Clinic) {\r\n    if (this.getClinic(c.name) === null) {\r\n      this.listClinics.push(c);\r\n    }\r\n  }\r\n\r\n  public getClinic(name: string) {\r\n    if ( this.listClinics.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listClinics) {\r\n      if ( u.name === name) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getClinicByName(name) {\r\n    return this.http.get(this.urlClinic + '/' + name);\r\n  }\r\n\r\n  public getAllClinics(): Array<Clinic> {\r\n    this.http.get(this.urlClinic + '/all').subscribe((data: Clinic[]) => {\r\n      console.log(data);\r\n      for (const c of data) {\r\n        this.clinic = new Clinic(c.name, c.address, c.description, c.doctors , c.examinationTypes, c.clinicRating, c.id);\r\n        this.addClinic(this.clinic);\r\n      }\r\n    },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.listClinics;\r\n  }\r\n\r\n  public newClinic(clinic) {\r\n    return this.http.post(this.urlClinic + '/clinical-centre-admin/addClinic', clinic);\r\n  }\r\n  public getClinicsWithType(type: string): Array<Clinic> {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('type', type);\r\n    this.clinicsTypes = new Array<Clinic>();\r\n    this.http.get(this.urlClinic + '/allWithTypes', {params}).subscribe((data: Clinic[]) => {\r\n        for (const c of data) {\r\n          this.clinic = new Clinic(c.name, c.address, c.description, c.doctors , c.examinationTypes, c.clinicRating, c.id);\r\n          this.clinicsTypes.push(this.clinic);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.clinicsTypes;\r\n  }\r\n\r\n  public getClinicsWithTypes() {\r\n    return this.clinicsTypes;\r\n  }\r\n\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport {ClinicalCenterAdministrator} from '../models/clinicalCenterAdministrator';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\nexport class ClinicalCenterAdministratorService{\r\n\r\n    urlCCAdmin = environment.baseUrl + environment.clinicalCenterAdmininistrator;\r\n    listCCAdmin: Array<ClinicalCenterAdministrator>= new Array<ClinicalCenterAdministrator>();\r\n    clinicalCenterAdministrator:ClinicalCenterAdministrator;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllClinicalCenterAdministrators();\r\n    }\r\n  \r\n    public newCCAdmin(clinicalCenterAdministrator) {\r\n      return this.http.post(this.urlCCAdmin + '/register', clinicalCenterAdministrator);\r\n    }\r\n  \r\n    public loginCCAdmin(clinicalCenterAdministrator) {\r\n      this.userService.setToken(clinicalCenterAdministrator);\r\n      return this.http.post(environment.baseUrl + '/login', clinicalCenterAdministrator, {responseType: 'text'});\r\n    }\r\n\r\n    public editCCAdmin(clinicalCenterAdministrator){\r\n      return this.http.post(this.urlCCAdmin + '/edit', clinicalCenterAdministrator,{responseType: 'text'});\r\n    }\r\n  \r\n    public addCCAdmin(p: ClinicalCenterAdministrator) {\r\n      if(this.getCCAdmin(p.email)===null){\r\n        this.listCCAdmin.push(p);\r\n      }\r\n    }\r\n  \r\n    public getCCAdmin(email: string) {\r\n      if ( this.listCCAdmin.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listCCAdmin) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setCCAdmin(p: ClinicalCenterAdministrator) {\r\n\r\n      for (const p1 of this.listCCAdmin) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n         \r\n          p1.surname = p.surname;\r\n        \r\n          p1.password = p.password;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    public getAllClinicalCenterAdministrators(): Array<ClinicalCenterAdministrator> {\r\n      this.http.get(this.urlCCAdmin + '/all').subscribe((data: ClinicalCenterAdministrator[]) => {\r\n          for (const c of data) {\r\n            this.clinicalCenterAdministrator = new ClinicalCenterAdministrator(c.email,c.password,c.name,c.surname,c.number);\r\n            this.addCCAdmin(this.clinicalCenterAdministrator);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listCCAdmin;\r\n    }\r\n    addCodebook(sifarnik: any): Observable<any> {\r\n      return this.http.post(this.urlCCAdmin+\"/addCodebook\", sifarnik).pipe(map(data => {return data;}));\r\n  }\r\n  deleteCodebook(sifarnik): Observable<any> {\r\n     // alert(JSON.stringify(sifarnik));\r\n      return this.http.post(this.urlCCAdmin+\"/deleteCodebook\", sifarnik).pipe(map(data => {return data;}));\r\n  }\r\n  returnCodebook(): Observable<any> {\r\n      return this.http.get(this.urlCCAdmin+\"/returnCodebook\").pipe(map(data => {return data;}));\r\n  }\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {Doctor} from '../models/doctor';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {UserService} from './user.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DoctorService {\r\n\r\n  \r\n  urlDoctor = environment.baseUrl + environment.doctor;\r\n  listDoctors: Array<Doctor> = new Array<Doctor>();\r\n  doctor: Doctor;\r\n  editD: Doctor;\r\n  doctorss: Array<Doctor> = new Array<Doctor>();\r\n  termins: Array<string> = new Array<string>();\r\n  doctorsWithSearch: Array<Doctor> = new Array<Doctor>();\r\n  termin: string;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserService\r\n  ) {\r\n    this.getAllDoctors();\r\n  }\r\n\r\n  public loginDoctor(doctor) {\r\n    this.userService.setToken(doctor);\r\n    return this.http.post(environment.baseUrl + '/login', doctor, {responseType: 'text'});\r\n  }\r\n\r\n  public editDoctor(doctor) {\r\n    return this.http.post(this.urlDoctor + '/edit', doctor, {responseType: 'text'});\r\n  }\r\n\r\n  public getDoctor(email: string) {\r\n    if ( this.listDoctors.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listDoctors) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public addDoctor(d: Doctor) {\r\n    if (this.getDoctor(d.email) === null) {\r\n      this.listDoctors.push(d);\r\n    }\r\n  }\r\n\r\n  public setDoctor(d: Doctor) {\r\n    for (const d1 of this.listDoctors) {\r\n      if (d1.email === d.email) {\r\n        d1.password = d.password;\r\n        d1.name = d.name;\r\n        d1.surname = d.surname;\r\n        d1.phone = d.phone;\r\n        d1.workHoursFrom = d.workHoursFrom;\r\n        d1.workHoursTo = d.workHoursTo;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getAllDoctors(): Array<Doctor> {\r\n    this.http.get(this.urlDoctor + '/all').subscribe((data: Doctor[]) => {\r\n        for (const c of data) {\r\n          this.doctor = new Doctor(c.email, c.password, c.name, c.surname, c.phone, c.workHoursFrom, c.workHoursTo, c.specialized, c.doctorRating, c.clinic);\r\n          this.addDoctor(this.doctor);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.listDoctors;\r\n  }\r\n\r\n  public getDoctorsTermins(date: string, email: string): string {\r\n    let params = new HttpParams();\r\n    params = params.append('date', date);\r\n    params = params.append('email', email);\r\n    console.log(params)\r\n    this.http.get(this.urlDoctor + '/terminString', {params, responseType: 'text'}).subscribe((data: string) => {\r\n        this.termins = new Array<string>();\r\n        console.log('Ispod ovde');\r\n        console.log(data);\r\n        this.termin = data;\r\n        this.termins.push(data);\r\n\r\n\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.termin;\r\n  }\r\n\r\n  public getDoctorss() {\r\n    return this.doctorss;\r\n  }\r\n\r\n  public setDoctorss(doctorss: Array<Doctor>) {\r\n    this.doctorss = doctorss;\r\n  }\r\n\r\n  public getDoctrosWithSearch(name: string, surname: string, rating: string): Array<Doctor> {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('name', name);\r\n    params = params.append('surname', surname);\r\n    params = params.append('rating', rating);\r\n    this.doctorsWithSearch = new Array<Doctor>();\r\n    this.http.get(this.urlDoctor + '/allWithSearch', {params}).subscribe((data: Doctor[]) => {\r\n        console.log(data)\r\n        for (const c of data) {\r\n          this.doctor = new Doctor(c.email, c.password, c.name, c.surname, c.phone, c.workHoursFrom, c.workHoursTo,\r\n            c.specialized, c.doctorRating, c.clinic);\r\n          this.doctorsWithSearch.push(this.doctor);\r\n          console.log(this.doctor);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n      );\r\n\r\n    return this.doctorsWithSearch;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ExaminationType } from '../models/examinationType';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExaminationTypeService {\r\n\r\n  urlExaminationType = environment.baseUrl + environment.examinationType;\r\n  examinationTypes: Array<ExaminationType> = new Array<ExaminationType>();\r\n  type: ExaminationType;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getAllTypes(): Array<ExaminationType> {\r\n    this.http.get(this.urlExaminationType + '/all').subscribe((data: ExaminationType[]) => {\r\n        for (const c of data) {\r\n          this.type = new ExaminationType(c.label, c.price);\r\n          this.addType(this.type);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.type);\r\n    return this.examinationTypes;\r\n  }\r\n\r\n  public addType(t: ExaminationType) {\r\n    if (this.getType(t.label) === null) {\r\n      this.examinationTypes.push(t);\r\n    }\r\n  }\r\n\r\n  public getType(name: string) {\r\n    if ( this.examinationTypes.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.examinationTypes) {\r\n      if ( u.label === name) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Examination } from '../models/examination';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UserService } from './user.service';\r\nimport { ExaminationKind } from '../models/examinationKind';\r\nimport { ExaminationStatus } from '../models/examinationStatus';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExaminationService {\r\n  url = environment.baseUrl + environment.examination;\r\n  listExaminations: Array<Examination> = new Array<Examination>();\r\n  examination: Examination;\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) {\r\n    this.getAllExaminations();\r\n  }\r\n\r\n  public whichKindExamination(kind: string) {\r\n    if (kind === 'EXAMINATION') {\r\n      return ExaminationKind.EXAMINATION;\r\n    } else {\r\n      return ExaminationKind.OPERATION;\r\n    }\r\n  }\r\n\r\n  public whichStatusExamination(status: string) {\r\n    if (status === 'APPROVED') {\r\n      return ExaminationStatus.APPROVED;\r\n    } else if (status === 'AWAITING') {\r\n      return ExaminationStatus.AWAITING;\r\n    } else if (status === 'PREDEF_BOOKED') {\r\n      return  ExaminationStatus.PREDEF_BOOKED;\r\n    } else {\r\n      return ExaminationStatus.PREDEF_AVAILABLE;\r\n    }\r\n  }\r\n\r\n  public getAllExaminations(): Array<Examination> {\r\n    this.http.get(this.url + '/all').subscribe((data: Examination[]) => {\r\n        this.listExaminations = new Array<Examination>();\r\n        for (const c of data) {\r\n          this.examination =  new Examination(this.whichKindExamination(c.kind.toString()), this.whichStatusExamination(c.status.toString()), c.examinationType, c.discount, c.doctorRating, c.clinicRating, c.nurse, c.clinic, c.patient, c.doctors, c.id);\r\n          this.listExaminations.push(this.examination)\r\n          console.log(this.examination);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.listExaminations);\r\n    return this.listExaminations;\r\n  }\r\n\r\n  public addExamination(e: Examination) {\r\n    if (this.getExamination(e.id) === null) {\r\n      this.listExaminations.push(e);\r\n    }\r\n  }\r\n  public getExamination(id: number) {\r\n    if ( this.listExaminations.length === 0) {\r\n      return null;\r\n    }\r\n    for (const e of this.listExaminations) {\r\n      if (e.id === id) {\r\n        return e;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MedicalRecord } from '../models/medicalRecord';\r\nimport { ExaminationReport } from '../models/examinationReport';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MedicalRecordService {\r\n\r\n  url = environment.baseUrl + environment.medicalRecord;\r\n  listMedicalRecord: Array<MedicalRecord> = new Array<MedicalRecord>();\r\n  medicalRecord: MedicalRecord;\r\n  examinationReport: ExaminationReport;\r\n\r\n  constructor(private http: HttpClient, ) {\r\n    this.getAllMedicalRecords();\r\n  }\r\n\r\n  public addMedicalRecord(mr: MedicalRecord) {\r\n    if (this.getMedicalRecord(mr.id) === null) {\r\n      this.listMedicalRecord.push(mr);\r\n    }\r\n  }\r\n\r\n  public getAllMedicalRecords(): Array<MedicalRecord> {\r\n    this.http.get(this.url + '/all').subscribe((data: MedicalRecord[]) => {\r\n        this.listMedicalRecord = new Array<MedicalRecord>();\r\n        for (const c of data) {\r\n          // Ostalo je da se doda examinaton_report u konstruktoru\r\n          console.log(c.id);\r\n          this.medicalRecord = new MedicalRecord(c.id, c.height, c.weight, c.bloodType, c.allergies, c.patient);\r\n          this.listMedicalRecord.push(this.medicalRecord);\r\n          console.log(this.medicalRecord);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.listMedicalRecord);\r\n    return this.listMedicalRecord;\r\n  }\r\n\r\n  public getMedicalRecord(id: number) {\r\n    if (this.listMedicalRecord.length === 0) {\r\n      return null;\r\n    }\r\n    for (const e of this.listMedicalRecord) {\r\n      if (e.id === id) {\r\n        return e;\r\n      }\r\n    }\r\n  }\r\n\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport {Nurse} from '../models/nurse';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\n\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\n\r\n\r\nexport class NurseService{\r\n\r\n    urlNurse = environment.baseUrl + environment.nurse;\r\n    listNurses: Array<Nurse>= new Array<Nurse>();\r\n    nurse:Nurse;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllNurses();\r\n    }\r\n  \r\n    public newNurse(nurse) {\r\n      return this.http.post(this.urlNurse + '/register', nurse);    // da li treba ?\r\n    }\r\n  \r\n    public loginNurse(nurse) {\r\n      this.userService.setToken(nurse);\r\n      return this.http.post(environment.baseUrl + '/login', nurse, {responseType: 'text'});\r\n    }\r\n\r\n    public editNurse(nurse){\r\n      return this.http.post(this.urlNurse + '/edit', nurse,{responseType: 'text'});\r\n    }\r\n  \r\n    public addNurse(p: Nurse) {\r\n      if(this.getNurse(p.email)===null){\r\n        this.listNurses.push(p);\r\n      }\r\n    }\r\n  \r\n    public getNurse(email: string) {\r\n      if ( this.listNurses.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listNurses) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setNurse(p: Nurse) {\r\n\r\n      for (const p1 of this.listNurses) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n          p1.country = p.country;\r\n          p1.address = p.address;\r\n          p1.surname = p.surname;\r\n          p1.city = p.city;\r\n          p1.password = p.password;\r\n          p1.workHoursFrom=p.workHoursFrom;\r\n          p1.workHoursTo=p.workHoursTo;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    public getAllNurses(): Array<Nurse> {\r\n      this.http.get(this.urlNurse + '/all').subscribe((data: Nurse[]) => {\r\n          for (const c of data) {\r\n            this.nurse = new Nurse(c.email,c.password,c.name,c.surname,c.number,c.address,c.city,c.country, c.workHoursFrom, c.workHoursTo);\r\n            this.addNurse(this.nurse);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listNurses;\r\n    }\r\n  \r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport {Patient} from '../models/patient';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\nimport { PatientStatus } from '../models/patientStatus';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\nexport class PatientService{\r\n\r\n    urlPatient = environment.baseUrl + environment.patient;\r\n    listPatients: Array<Patient>= new Array<Patient>();\r\n    patient:Patient;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllPatients();\r\n    }\r\n  \r\n    public newPatient(patient) {\r\n      return this.http.post(this.urlPatient + '/register', patient);\r\n    }\r\n  \r\n    public loginPatient(patient) {\r\n      this.userService.setToken(patient);\r\n      return this.http.post(environment.baseUrl + '/login', patient, {responseType: 'text'});\r\n    }\r\n\r\n    public editPatient(patient){\r\n      return this.http.post(this.urlPatient + '/edit', patient,{responseType: 'text'});\r\n    }\r\n  \r\n    public addPatient(p: Patient) {\r\n      if(this.getPatient(p.email)===null){\r\n        this.listPatients.push(p);\r\n      }\r\n    }\r\n  \r\n    public getPatient(email: string) {\r\n      if ( this.listPatients.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listPatients) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setPatient(p: Patient) {\r\n\r\n      for (const p1 of this.listPatients) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n          p1.country = p.country;\r\n          p1.address = p.address;\r\n          p1.surname = p.surname;\r\n          p1.city = p.city;\r\n          p1.password = p.password;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    public getAllPatients(): Array<Patient> {\r\n      this.http.get(this.urlPatient + '/all').subscribe((data: Patient[]) => {\r\n          for (const c of data) {\r\n            this.patient = new Patient(c.email,c.password,c.name,c.surname,c.number,c.address,c.city,c.country,c.insuranceID,c.status);\r\n            this.addPatient(this.patient);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listPatients;\r\n    }\r\n  \r\n\r\n}","import {User} from '../models/user'\r\nimport { Injectable } from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {Role} from '../models/role';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\nexport const TOKEN='LoggedInUser';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class UserService{\r\n    urlUser = environment.baseUrl + environment.user;\r\n    users: Array<User>=new Array<User>();\r\n    user:User= new User('', '', Role.NONE);\r\n    u:User;\r\n    constructor(private router: Router, private http: HttpClient) {\r\n      this.getAllUsers();\r\n      localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n    }\r\n\r\n    public addUser(u: User){\r\n      if (this.getUser(u.email) === null) {\r\n        this.users.push(u);\r\n      }\r\n    }\r\n\r\n    \r\n  public getUser(email: string) {\r\n    if ( this.users.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.users) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n    public setToken(user){\r\n        this.user=user;\r\n        localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n\r\n    }\r\n\r\n    public isLoggedIn() {\r\n        if(localStorage.getItem(TOKEN)!==null){\r\n          return localStorage.getItem(TOKEN);\r\n        }else {\r\n          \r\n          return null;\r\n        }\r\n      }\r\n\r\n      public setUser(u: User) {\r\n\r\n        for (const p1 of this.users) {\r\n          if (p1.email === u.email) {\r\n            p1.password = u.password;\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n    public logout(){\r\n      this.router.navigate(['']);\r\n      this.user =  new User('', '', Role.NONE);\r\n      localStorage.removeItem(TOKEN);\r\n      localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n    }\r\n\r\n    public isNone() {\r\n      if (this.isLoggedIn()) {\r\n        return this.user.role === Role.NONE;\r\n      }\r\n    }\r\n    \r\n    public isPatient() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.PATIENT;\r\n        }\r\n      }\r\n\r\n      public isDoctor() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.DOCTOR;\r\n        }\r\n      }\r\n\r\n      public isNurse() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.NURSE;\r\n        }\r\n      }\r\n\r\n      public isCCAdmin() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.CCADMIN;\r\n        }\r\n      }\r\n\r\n      public isClinicAdministrator() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.CLINICADMINISTRATOR;\r\n        }\r\n      }\r\n\r\n      public getAllUsers(): Array<User> {\r\n        this.http.get(this.urlUser + '/all').subscribe((data: User[]) => {\r\n            for (const c of data) {\r\n                this.u = new User(c.email, c.password, this.whichRole(c.role.toString()));\r\n                this.addUser(this.u);\r\n            }\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }\r\n        );\r\n        console.log(this.users);\r\n        return this.users;\r\n      }\r\n\r\n      public whichRole(role: string) {\r\n        if (role === 'PATIENT') {\r\n          return Role.PATIENT;\r\n        } else if (role === 'DOCTOR') {\r\n          return  Role.DOCTOR;\r\n        } else if (role === 'NURSE') {\r\n          return  Role.NURSE;\r\n        } else if (role === 'CCADMIN') {\r\n          return  Role.CCADMIN;\r\n        } else if (role === 'CLINICADMINISTRATOR') {\r\n          return  Role.CLINICADMINISTRATOR;\r\n        } else {\r\n          console.log(\"ovde je null\");\r\n          return null;\r\n        }\r\n    \r\n      }\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport {Zahtev} from '../models/zahtev';\r\nimport {environment} from '../../environments/environment';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserService} from './user.service';\r\nimport {ZahtevStatus} from '../models/zahtevStatus';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VacationService {\r\n\r\n  urlVacation = environment.baseUrl + environment.zahtev;\r\n  listVacation: Array<Zahtev> = new Array<Zahtev>();\r\n  zahtev: Zahtev;\r\n  tmp: Array<Zahtev>;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserService\r\n  ) {\r\n\r\n     this.getAllVacations();\r\n     this.getAllRequests();\r\n  }\r\n\r\n  public newVacation(zahtev) {\r\n    return this.http.post(this.urlVacation + '/nurse/VacationRequest', zahtev);\r\n  }\r\n\r\n  public newVacation1(zahtev) {\r\n    return this.http.post(this.urlVacation + '/nurse/VacationRequest', zahtev);\r\n  }\r\n\r\n  public addVacation(v: Zahtev) {\r\n    if (this.getVacations(v.email) === null) {\r\n      this.listVacation.push(v);\r\n    }\r\n  }\r\n\r\n  public addVacation1(v: Zahtev) {\r\n    if (this.getVacations(v.email) === null) {\r\n      this.listVacation.push(v);\r\n    }\r\n  }\r\n\r\n  public getVacations(email: string) {\r\n    if ( this.listVacation.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listVacation) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  public getVacations1(email: string) {\r\n    if ( this.listVacation.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listVacation) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public editVacation(zahtev) {\r\n    return this.http.post(this.urlVacation + '/edit', zahtev, {responseType: 'text'});\r\n  }\r\n\r\n  public setVacation(p: Zahtev) {\r\n\r\n    for (const p1 of this.listVacation) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.surname = p.surname;\r\n        p1.startingDate = p.startingDate;\r\n        p1.finishDate = p.finishDate;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public setVacation1(p: Zahtev) {\r\n\r\n    for (const p1 of this.listVacation) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.surname = p.surname;\r\n        p1.startingDate = p.startingDate;\r\n        p1.finishDate = p.finishDate;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public whichStatus(status: string) {\r\n    if (status === 'AWAITING_APPROVAL') {\r\n      return ZahtevStatus.AWAITING_APPROVAL;\r\n    } else {\r\n      return ZahtevStatus.APPROVED;\r\n    }\r\n\r\n  }\r\n\r\n  public getAllVacations(): Array<Zahtev> {\r\n    this.http.get(this.urlVacation + '/all').subscribe((data: Zahtev[]) => {\r\n        for (const c of data) {\r\n          this.zahtev = new Zahtev(c.email, c.name, c.surname, c.startingDate, c.finishDate, this.whichStatus(c.status.toString()));\r\n          this.addVacation(this.zahtev);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        console.log(\"ovde je greska antonela\");\r\n      }\r\n    );\r\n\r\n    return this.listVacation;\r\n  }\r\n\r\n  public getAllRequests(): Array<Zahtev> {\r\n    this.http.get(this.urlVacation + '/VacationRequest').subscribe((data: Zahtev[]) => {\r\n        this.tmp = new Array<Zahtev>();\r\n        for (const c of data) {\r\n          this.zahtev = new Zahtev(c.email, c.name, c.surname, c.startingDate, c.finishDate, ZahtevStatus.AWAITING_APPROVAL);\r\n          this.tmp.push(this.zahtev);\r\n          console.log(this.zahtev);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.tmp);\r\n    return this.tmp;\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  baseUrl: 'http://localhost:8081',\r\n  user: '/user',\r\n  patient: '/patient',\r\n  doctor: '/doctor',\r\n  nurse: '/nurse',\r\n  clinic: '/clinic',\r\n  examination: '/examination',\r\n  medicalRecord: '/medicalRecord',\r\n  clinicalCentreAdmin: '/clinical-centre-admin',\r\n  examinationType: '/examination-type',\r\n  clinicalCenterAdmininistrator: '/clinicalCenterAdministrator',\r\n  codebook: '/codebook',\r\n  clinicAdministrator: '/clinicAdministrator',\r\n  zahtev: '/zahtev',\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import 'hammerjs';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///","file":"main-es5.js"}