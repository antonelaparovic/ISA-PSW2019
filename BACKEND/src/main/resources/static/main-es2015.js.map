<<<<<<< Updated upstream
<<<<<<< Updated upstream
{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.html","./src/app/components/allpatients-page/allpatients-page.component.html","./src/app/components/ccadmin-profile/ccadmin-profile.component.html","./src/app/components/clinics-page/clinics-page.component.html","./src/app/components/doctor-page/doctor-page.component.html","./src/app/components/doctor-profile/doctor-profile.component.html","./src/app/components/login/login.component.html","./src/app/components/medical-history-page/medical-history-page.component.html","./src/app/components/medical-record-page/medical-record-page.component.html","./src/app/components/nurse-page/nurse-page.component.html","./src/app/components/nurse-profile/nurse-profile.component.html","./src/app/components/patient-page/patient-page.component.html","./src/app/components/patient-profile/patient-profile.component.html","./src/app/components/register-patient/register-patient.component.html","./node_modules/tslib/tslib.es6.js","./src/app/app-routing.module.ts","./src/app/app.component.css","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/allpatients-page/allpatients-page.component.css","./src/app/components/allpatients-page/allpatients-page.component.ts","./src/app/components/ccadmin-profile/ccadmin-profile.component.css","./src/app/components/ccadmin-profile/ccadmin-profile.component.ts","./src/app/components/clinics-page/clinics-page.component.css","./src/app/components/clinics-page/clinics-page.component.ts","./src/app/components/doctor-page/doctor-page.component.css","./src/app/components/doctor-page/doctor-page.component.ts","./src/app/components/doctor-profile/doctor-profile.component.css","./src/app/components/doctor-profile/doctor-profile.component.ts","./src/app/components/login/login.component.css","./src/app/components/login/login.component.ts","./src/app/components/medical-history-page/medical-history-page.component.css","./src/app/components/medical-history-page/medical-history-page.component.ts","./src/app/components/medical-record-page/medical-record-page.component.css","./src/app/components/medical-record-page/medical-record-page.component.ts","./src/app/components/nurse-page/nurse-page.component.css","./src/app/components/nurse-page/nurse-page.component.ts","./src/app/components/nurse-profile/nurse-profile.component.css","./src/app/components/nurse-profile/nurse-profile.component.ts","./src/app/components/patient-page/patient-page.component.css","./src/app/components/patient-page/patient-page.component.ts","./src/app/components/patient-profile/patient-profile.component.css","./src/app/components/patient-profile/patient-profile.component.ts","./src/app/components/register-patient/register-patient.component.css","./src/app/components/register-patient/register-patient.component.ts","./src/app/material-module.ts","./src/app/models/clinic.ts","./src/app/models/clinicalCenterAdministrator.ts","./src/app/models/doctor.ts","./src/app/models/examination.ts","./src/app/models/examinationTable.ts","./src/app/models/medicalRecord.ts","./src/app/models/nurse.ts","./src/app/models/patient.ts","./src/app/models/patientStatus.ts","./src/app/models/role.ts","./src/app/models/user.ts","./src/app/services/clinic.service.ts","./src/app/services/clinicalCenterAdministrator.service.ts","./src/app/services/doctor.service.ts","./src/app/services/examination.service.ts","./src/app/services/medical-record.service.ts","./src/app/services/nurse.service.ts","./src/app/services/patient.service.ts","./src/app/services/user.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\r\\n    <mat-sidenav #drawer class=\\\"sidenav\\\" fixedInViewport [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\r\\n      [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\" [opened]=\\\"(isHandset$ | async) === true\\\">\\r\\n      <mat-toolbar>Menu</mat-toolbar>\\r\\n        <mat-nav-list *ngIf = \\\"isNone()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/login\\\">Login</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/register\\\">Register</a>\\r\\n        </mat-nav-list>\\r\\n  \\r\\n        <mat-nav-list *ngIf=\\\"isPatient()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/patient/profile\\\">Profile</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/medicalRecord\\\">Medical record</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/medicalHistory\\\">Medical history</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/clinics\\\">Clinics</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n  \\r\\n        <mat-nav-list *ngIf=\\\"isDoctor()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/doctor/profile\\\">Profile</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n\\r\\n        <mat-nav-list *ngIf=\\\"isNurse()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/nurse/profile\\\">Profile</a>\\r\\n          <a mat-list-item routerLink=\\\"/nurse/allpatients\\\">All patients</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n\\r\\n        <mat-nav-list *ngIf=\\\"isCCAdmin()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/clinicalCenterAdministrator/profile\\\">Profile</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n    </mat-sidenav>\\r\\n    <mat-sidenav-content>\\r\\n      <mat-toolbar>\\r\\n        <button type=\\\"button\\\" aria-label=\\\"Toggle sidenav\\\" mat-icon-button (click)=\\\"drawer.toggle()\\\">\\r\\n          <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\r\\n        </button>\\r\\n        <span>Clinical Centre</span>\\r\\n      </mat-toolbar>\\r\\n      <!-- Add Content Here -->\\r\\n      <router-outlet></router-outlet>\\r\\n    </mat-sidenav-content>\\r\\n  </mat-sidenav-container>\"","export default \"<!-- page-header -->\\r\\n<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">All patients </h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"allpatientsDataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"name\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">\\r\\n                                    {{element.name}}\\r\\n                                </td>\\r\\n                            </ng-container>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"surname\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Surname </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.surname}} </td>\\r\\n                            </ng-container>\\r\\n\\r\\n                            <ng-container matColumnDef=\\\"address\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Address </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.address}} </td>\\r\\n                            </ng-container>\\r\\n\\r\\n\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                        <mat-paginator [pageSize]=itemsPerPage showFirstLastButtons></mat-paginator>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>{{selectedCCAdmin.name}} profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"ccadminForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" ccadminForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n  \\r\\n              \\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","export default \"<!-- page-header -->\\r\\n<div class=\\\"page-header\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n              <div class=\\\"page-caption\\\">\\r\\n                  <h1 class=\\\"page-title\\\">Clinics in the clinical centre</h1>\\r\\n                  <div class=\\\"text-center mt-4\\\">\\r\\n                  </div>\\r\\n              </div>\\r\\n          </div>\\r\\n      </div>\\r\\n  </div>\\r\\n</div>\\r\\n<!-- /.page-header-->\\r\\n\\r\\n<!-- page-content -->\\r\\n<div class=\\\"card-section\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n      <div class=\\\"card-block bg-white mb30\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                  <!-- section-title -->\\r\\n                  <div class=\\\"section-title mb-0\\\">\\r\\n                      <table mat-table [dataSource]=\\\"clinicDataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n\\r\\n                          <ng-container matColumnDef=\\\"name\\\">\\r\\n                              <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\r\\n                              <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">\\r\\n                                  {{element.name}}\\r\\n                              </td>\\r\\n                          </ng-container>\\r\\n\\r\\n                          <ng-container matColumnDef=\\\"address\\\">\\r\\n                              <th mat-header-cell *matHeaderCellDef mat-sort-header> Address </th>\\r\\n                              <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.address}} </td>\\r\\n                          </ng-container>\\r\\n                          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                      </table>\\r\\n                      <mat-paginator [pageSize]=itemsPerPage showFirstLastButtons></mat-paginator>\\r\\n                  </div>\\r\\n                  <!-- /.section-title -->\\r\\n              </div>\\r\\n          </div>\\r\\n      </div>\\r\\n  </div>\\r\\n</div>\\r\\n<!-- /.page-content -->\"","export default \"<h1>WELCOME DOCTOR</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>{{selectedDoctor.name}} profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"doctorForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"doctorForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"doctorForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"doctorForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" doctorForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"doctorForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Address</label>\\r\\n                <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('address').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('address').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('city').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('city').errors['required']\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('country').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('country').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"specialization\\\">Specialization</label>\\r\\n                <input type=\\\"text\\\" id=\\\"specialization\\\" formControlName=\\\"specialization\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('specialization').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('specialization').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('specialization').errors['required']\\\">Specialization is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n              \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n        <div class=\\\"container\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n              <mat-card>\\r\\n                <h3>Login</h3>\\r\\n                <hr>\\r\\n                <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"email\\\">Email</label>\\r\\n                    <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\">\\r\\n                    <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\r\\n                      <div *ngIf=\\\"f.email.errors.email\\\">Email must be a valid email address</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\">\\r\\n                    <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\r\\n                      <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 8 characters long</div>\\r\\n                      <div *ngIf=\\\"f.password.errors.pattern\\\">Password must contain at least 1 lowercase, 1 uppercase letter and 1 number</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <a routerLink=\\\"/patient/register\\\">Don't have an account? Register here.</a>\\r\\n                  </div>\\r\\n      \\r\\n                  <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Login</button>\\r\\n      \\r\\n                </form>\\r\\n              </mat-card>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\"","export default \"<!-- page-header -->\\r\\n<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">History of examinations and operations</h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"Kind\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Kind </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">{{element.kind}}</td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Status\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Status </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.status}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Type\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Type </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.type}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Room\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Room </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.room}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Discount\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Discount </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.discount}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Nurse\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Nurse </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.nurse}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Doctors\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Doctors </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.doctors}} </td>\\r\\n                            </ng-container>\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                        <mat-paginator [pageSize]=itemsPerPage showFirstLastButtons></mat-paginator>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">Medical record</h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"Height\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Height </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">{{element.height}}</td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Weight\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Weight </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.weight}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"BloodType\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Blood type </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.bloodType}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Allergies\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Allergies </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.allergies}} </td>\\r\\n                            </ng-container>\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<h1>WELCOME NURSE</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>{{selectedNurse.name}} profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"nurseForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"email\\\">Email</label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" nurseForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"address\\\">Address</label>\\r\\n              <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('address').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('address').errors['required']\\\">Address is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"city\\\">City</label>\\r\\n              <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\"  class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('city').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('city').errors['required']\\\">City is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"country\\\">Country</label>\\r\\n              <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('country').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('country').errors['required']\\\">Country is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <!-- <div class=\\\"form-group\\\">\\r\\n               <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n               <input type=\\\"text\\\" readonly=\\\"readonly\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\"  class=\\\"form-control\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': submitted &&  patientForm.get('insuranceID').errors }\\\" />\\r\\n               <div *ngIf=\\\"submitted && patientForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                 <div *ngIf=\\\"patientForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                 </div>\\r\\n                 <div\\r\\n                   *ngIf=\\\"patientForm.get('insuranceID').errors['minlength'] ||patientForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                   Health\\r\\n                   Insurance ID must contain exactly 13 characters</div>\\r\\n               </div>\\r\\n             </div> -->\\r\\n\\r\\n\\r\\n\\r\\n             <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n           </form>\\r\\n         </mat-card>\\r\\n       </div>\\r\\n     </div>\\r\\n   </div>\\r\\n </div>\\r\\n\"","export default \"<h1>WELCOME</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>{{selectedPatient.name}} profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"patientForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && patientForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" patientForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Address</label>\\r\\n                <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('address').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('address').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('city').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('city').errors['required']\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('country').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('country').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n                <input type=\\\"text\\\" readonly=\\\"readonly\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted &&  patientForm.get('insuranceID').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                  </div>\\r\\n                  <div\\r\\n                    *ngIf=\\\"patientForm.get('insuranceID').errors['minlength'] ||patientForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                    Health\\r\\n                    Insurance ID must contain exactly 13 characters</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              \\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>Registration</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && registerForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" registerForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Address</label>\\r\\n                <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('address').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('address').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('city').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('city').errors['required']\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('country').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('country').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n                <input type=\\\"text\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted &&  registerForm.get('insuranceID').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                  </div>\\r\\n                  <div\\r\\n                    *ngIf=\\\"registerForm.get('insuranceID').errors['minlength'] ||registerForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                    Health\\r\\n                    Insurance ID must contain exactly 13 characters</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <a routerLink=\\\"/patient/login\\\">Already have an account? Login here.</a>\\r\\n              </div>\\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Register</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {LoginComponent} from './components/login/login.component'\r\nimport {RegisterPatientComponent} from './components/register-patient/register-patient.component'\r\nimport {PatientPageComponent} from './components/patient-page/patient-page.component'\r\nimport { DoctorPageComponent } from './components/doctor-page/doctor-page.component';\r\nimport {PatientProfileComponent} from './components/patient-profile/patient-profile.component'\r\nimport { MedicalRecordPageComponent } from './components/medical-record-page/medical-record-page.component';\r\nimport { MedicalHistoryPageComponent } from './components/medical-history-page/medical-history-page.component';\r\nimport { ClinicsPageComponent } from './components/clinics-page/clinics-page.component';\r\nimport { DoctorProfileComponent } from './components/doctor-profile/doctor-profile.component';\r\nimport {NursePageComponent} from './components/nurse-page/nurse-page.component';\r\nimport {NurseProfileComponent} from './components/nurse-profile/nurse-profile.component';\r\nimport {CCAdminProfileComponent} from './components/ccadmin-profile/ccadmin-profile.component';\r\nimport {AllPatientsPageComponent} from './components/allpatients-page/allpatients-page.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'patient/register',\r\n    component: RegisterPatientComponent,\r\n  },\r\n  {\r\n    path: 'patient/home',\r\n    component: PatientPageComponent,\r\n  },\r\n  {\r\n    path:'doctor/home',\r\n    component: DoctorPageComponent\r\n  },\r\n  {\r\n    path:'clinicalCenterAdministrator/profile',\r\n    component: CCAdminProfileComponent\r\n  },\r\n  {\r\n    path:'doctor/profile',\r\n    component: DoctorProfileComponent\r\n  },\r\n  {\r\n    path:'nurse/home',\r\n    component: NursePageComponent\r\n  },\r\n  {\r\n    path:'nurse/profile',\r\n    component: NurseProfileComponent\r\n  },{\r\n    path:'nurse/allpatients',\r\n    component: AllPatientsPageComponent\r\n  },\r\n  {\r\n    path:'patient/profile',\r\n    component: PatientProfileComponent\r\n  },{\r\n    path:'patient/medicalRecord',\r\n    component: MedicalRecordPageComponent\r\n  },{\r\n    path:'patient/medicalHistory',\r\n    component: MedicalHistoryPageComponent\r\n  },{\r\n    path:'patient/clinics',\r\n    component: ClinicsPageComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","export default \".example-full-width {\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .main-content {\\r\\n    margin: 20px 0;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0VBQ2I7O0VBRUE7SUFDRSxjQUFjO0VBQ2hCIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXhhbXBsZS1mdWxsLXdpZHRoIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICBcclxuICAubWFpbi1jb250ZW50IHtcclxuICAgIG1hcmdpbjogMjBweCAwO1xyXG4gIH0iXX0= */\"","import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport {UserService} from '../app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver,\r\n    private userService:UserService) { }\r\n\r\n  public isLoggedIn() {\r\n    return this.userService.isLoggedIn();\r\n  }\r\n\r\n  public isNone(){\r\n    return this.userService.isNone();\r\n  }\r\n\r\n  public isPatient() {\r\n    return this.userService.isPatient();\r\n  }\r\n\r\n  public isDoctor() {\r\n    return this.userService.isDoctor();\r\n  }\r\n\r\n  public isNurse() {\r\n    return this.userService.isNurse();\r\n  }\r\n  \r\n  public isCCAdmin() {\r\n    return this.userService.isCCAdmin();\r\n  }\r\n  public onLogout() {\r\n    this.userService.logout();\r\n  }\r\n\r\n}\r\n\r\n","\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule, MatCardModule, MatFormFieldModule, MatInputModule } from '@angular/material';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport {DemoMaterialModule} from './material-module';\r\n\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegisterPatientComponent } from './components/register-patient/register-patient.component';\r\nimport { PatientPageComponent } from './components/patient-page/patient-page.component';\r\nimport { DoctorPageComponent } from './components/doctor-page/doctor-page.component';\r\nimport { PatientProfileComponent } from './components/patient-profile/patient-profile.component';\r\nimport { DoctorProfileComponent } from './components/doctor-profile/doctor-profile.component';\r\nimport { MedicalRecordPageComponent } from './components/medical-record-page/medical-record-page.component';\r\nimport { MedicalHistoryPageComponent } from './components/medical-history-page/medical-history-page.component';\r\nimport { ClinicsPageComponent } from './components/clinics-page/clinics-page.component';\r\nimport {NursePageComponent} from './components/nurse-page/nurse-page.component';\r\nimport {NurseProfileComponent} from './components/nurse-profile/nurse-profile.component';\r\nimport { CCAdminProfileComponent } from './components/ccadmin-profile/ccadmin-profile.component';\r\nimport { AllPatientsPageComponent } from './components/allpatients-page/allpatients-page.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterPatientComponent,\r\n    PatientPageComponent,\r\n    DoctorPageComponent,\r\n    PatientProfileComponent,\r\n    DoctorProfileComponent,\r\n    MedicalRecordPageComponent,\r\n    MedicalHistoryPageComponent,\r\n    ClinicsPageComponent,\r\n    NursePageComponent,\r\n    NurseProfileComponent,\r\n    CCAdminProfileComponent,\r\n    AllPatientsPageComponent\r\n\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    ToastrModule.forRoot({\r\n      timeOut: 2000,\r\n      positionClass: 'toast-top-right',\r\n      preventDuplicates: true,\r\n    }),\r\n    LayoutModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    MatNativeDateModule,\r\n    DemoMaterialModule,\r\n  ],\r\n  entryComponents: [\r\n    CCAdminProfileComponent,\r\n    AllPatientsPageComponent\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWxscGF0aWVudHMtcGFnZS9hbGxwYXRpZW50cy1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Patient } from 'src/app/models/patient';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { PatientService } from 'src/app/services/patient.service';   // nemam za sve pacijente?\r\n\r\n@Component({\r\n  selector: 'app-allpatients-page',\r\n  templateUrl: './allpatients-page.component.html',\r\n  styleUrls: ['./allpatients-page.component.css']\r\n})\r\nexport class AllPatientsPageComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['name', 'surname', 'address'];\r\n  patient: Patient;\r\n  allpatientsDataSource = new MatTableDataSource<Patient>();\r\n  allpatients: Array<Patient> = new Array<Patient>();\r\n  \r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private patientService: PatientService\r\n  ) {\r\n    this.allpatients=this.patientService.getAllPatients();\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n\r\n  }\r\n\r\n  all() {\r\n      this.allpatientsDataSource = new MatTableDataSource(this.patientService.getAllPatients());\r\n      this.allpatientsDataSource.paginator = this.paginator;\r\n  }\r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2NhZG1pbi1wcm9maWxlL2NjYWRtaW4tcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ClinicalCenterAdministrator } from '../../models/clinicalCenterAdministrator';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { ClinicalCenterAdministratorService } from '../../services/clinicalCenterAdministrator.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-ccadmin-profile',\r\n  templateUrl: './ccadmin-profile.component.html',\r\n  styleUrls: ['./ccadmin-profile.component.css']\r\n})\r\nexport class CCAdminProfileComponent implements OnInit {\r\n\r\n  ccadminForm: FormGroup;\r\n  submitted = false;\r\n  selectedCCAdmin: ClinicalCenterAdministrator;\r\n  user:User;\r\n  clinicalCenterAdministrator:ClinicalCenterAdministrator;\r\n\r\n  constructor(\r\n    private ccadminService: ClinicalCenterAdministratorService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedCCAdmin=ccadminService.getCCAdmin(this.user.email);\r\n    console.log(this.selectedCCAdmin);\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.ccadminForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedCCAdmin.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedCCAdmin.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedCCAdmin.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedCCAdmin.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedCCAdmin.number, [Validators.required, Validators.minLength(9)]),\r\n     });\r\n  }\r\n\r\n  get f() {\r\n    return this.ccadminForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.ccadminForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.clinicalCenterAdministrator = new ClinicalCenterAdministrator(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.CCADMIN);\r\n    \r\n    this.editClinicalCenterAdministrator();\r\n    \r\n  }\r\n\r\n    public editClinicalCenterAdministrator(){\r\n      this.ccadminService.editCCAdmin(this.clinicalCenterAdministrator).subscribe(\r\n        data => {\r\n          this.userService.setUser(this.user);\r\n          this.ccadminService.setCCAdmin(this.clinicalCenterAdministrator);\r\n          this.router.navigate(['/clinicalCenterAdministrator/profile']);\r\n        },\r\n        error => {\r\n          alert('Error edit clinical center administrator');\r\n        }\r\n      );\r\n    }\r\n\r\n \r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljcy1wYWdlL2NsaW5pY3MtcGFnZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Clinic } from 'src/app/models/clinic';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { ClinicService } from 'src/app/services/clinic.service';\r\n\r\n@Component({\r\n  selector: 'app-clinics-page',\r\n  templateUrl: './clinics-page.component.html',\r\n  styleUrls: ['./clinics-page.component.css']\r\n})\r\nexport class ClinicsPageComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['name', 'address'];\r\n  clinic: Clinic;\r\n  clinicDataSource = new MatTableDataSource<Clinic>();\r\n  clinics: Array<Clinic> = new Array<Clinic>();\r\n  \r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private clinicService: ClinicService\r\n  ) {\r\n    this.clinics=this.clinicService.getAllClinics();\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n\r\n  }\r\n\r\n  all() {\r\n      this.clinicDataSource = new MatTableDataSource(this.clinicService.getAllClinics());\r\n      this.clinicDataSource.paginator = this.paginator;\r\n  }\r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXBhZ2UvZG9jdG9yLXBhZ2UuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-doctor-page',\r\n  templateUrl: './doctor-page.component.html',\r\n  styleUrls: ['./doctor-page.component.css']\r\n})\r\nexport class DoctorPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXByb2ZpbGUvZG9jdG9yLXByb2ZpbGUuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Doctor } from '../../models/doctor';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { DoctorService } from '../../services/doctor.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\n\r\n@Component({\r\n  selector: 'app-doctor-profile',\r\n  templateUrl: './doctor-profile.component.html',\r\n  styleUrls: ['./doctor-profile.component.css']\r\n})\r\nexport class DoctorProfileComponent implements OnInit {\r\n\r\n  doctorForm: FormGroup;\r\n  submitted = false;\r\n  selectedDoctor: Doctor;\r\n  user:User;\r\n  doctor:Doctor;\r\n\r\n  constructor(\r\n    private doctorService: DoctorService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedDoctor=doctorService.getDoctor(this.user.email);\r\n    console.log(this.selectedDoctor);\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.doctorForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedDoctor.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedDoctor.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedDoctor.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedDoctor.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedDoctor.number, [Validators.required, Validators.minLength(9)]),\r\n      address: new FormControl(this.selectedDoctor.address, [Validators.required]),\r\n      city: new FormControl(this.selectedDoctor.city, [Validators.required]),\r\n      country: new FormControl(this.selectedDoctor.country, [Validators.required]),\r\n      specialization: new FormControl(this.selectedDoctor.specialization, [Validators.required]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.doctorForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.doctorForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.doctor = new Doctor(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.specialization.value\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.DOCTOR);\r\n    \r\n    this.editDoctor();\r\n    \r\n  }\r\n\r\n    public editDoctor(){\r\n      this.doctorService.editDoctor(this.doctor).subscribe(\r\n        data => {\r\n          this.userService.setUser(this.user);\r\n          this.doctorService.setDoctor(this.doctor);\r\n          this.router.navigate(['/doctor/home']);\r\n        },\r\n        error => {\r\n          alert('Error edit doctor');\r\n        }\r\n      );\r\n    }\r\n\r\n \r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormGroup, FormBuilder, Validators} from '@angular/forms';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport { Router } from '@angular/router';\r\nimport {User} from '../../models/user';\r\nimport {Role} from '../../models/role';\r\nimport {UserService} from '../../services/user.service';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport { NurseService } from 'src/app/services/nurse.service';\r\nimport { ClinicalCenterAdministratorService } from 'src/app/services/clinicalCenterAdministrator.service';\r\n\r\n\r\nexport class LoginUser {\r\n  constructor(\r\n    public email: string,\r\n    public password: string\r\n  ) {}\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n\r\n  private loginForm: FormGroup;\r\n  private submitted = false;\r\n  private user:User;\r\n  private loginUser:LoginUser;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService,\r\n    private doctorService:DoctorService,\r\n    private nurseService:NurseService,\r\n    private ccadminService:ClinicalCenterAdministratorService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loginForm=this.formBuilder.group({\r\n      email: ['',[Validators.required,Validators.email]],\r\n      password: ['',Validators.required]\r\n    })\r\n  }\r\n\r\n  get f(){\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  private onSubmit(){\r\n    this.submitted=true;\r\n\r\n    if(this.loginForm.invalid)\r\n    return;\r\n  \r\n\r\n  this.loginUser=new LoginUser(\r\n    this.f.email.value,\r\n    this.f.password.value\r\n  )\r\n    this.user=this.userService.getUser(this.f.email.value);\r\n    console.log(this.user);\r\n    this.attemptLogin();\r\n  }\r\n\r\n  public attemptLogin() {\r\n    if (this.user.role === Role.PATIENT && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.patientService.loginPatient(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/patient/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.DOCTOR && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.doctorService.loginDoctor(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/doctor/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.NURSE && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.nurseService.loginNurse(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/nurse/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.CCADMIN && this.loginUser.password === this.user.password) {\r\n      \r\n    \r\n      console.log(this.user);\r\n      this.ccadminService.loginCCAdmin(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in as ccadmin');\r\n            this.router.navigate(['/clinicalCenterAdministrator/profile']);\r\n          } else {\r\n            console.log('Login error as ccadmin');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1oaXN0b3J5LXBhZ2UvbWVkaWNhbC1oaXN0b3J5LXBhZ2UuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Examination } from 'src/app/models/examination';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { ExaminationService } from 'src/app/services/examination.service';\r\nimport { ExaminationTable } from 'src/app/models/examinationTable';\r\n\r\n\r\n@Component({\r\n  selector: 'app-medical-history-page',\r\n  templateUrl: './medical-history-page.component.html',\r\n  styleUrls: ['./medical-history-page.component.css']\r\n})\r\nexport class MedicalHistoryPageComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['Kind', 'Status','Type','Room','Discount','Nurse','Doctors'];\r\n  examination:Examination;\r\n  dataSource= new MatTableDataSource<ExaminationTable>();\r\n  examinations:Array<Examination>=new Array<Examination>();\r\n  listEx:Array<ExaminationTable>=new Array<ExaminationTable>();\r\n  exTable:ExaminationTable;\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private examinationService:ExaminationService\r\n  ) {\r\n    this.examinations=this.examinationService.getAllExaminations();\r\n    console.log(\"medicalHPage  \"+this.examinations)\r\n    this.all();\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.fillData();\r\n    this.dataSource = new MatTableDataSource(this.listEx);\r\n    this.dataSource.paginator = this.paginator;\r\n}\r\n\r\n  fillData(){\r\n    for (let i = 0; i < this.examinations.length; i++) {\r\n      const element = this.examinations[i];\r\n      const exaTable=new ExaminationTable(this.examinations[i].id,this.examinations[i].kind,this.examinations[i].status,\"type\",\"room1\",\"0\",\"nurse1\",\"patient1\",\"doctor1,doctor2\",\"0\");\r\n      let truee=0;\r\n      for (let j = 0; j < this.listEx.length; j++) {\r\n        const elemente = this.listEx[j];\r\n        if(elemente.id===exaTable.id)\r\n            {truee=1;}\r\n      }\r\n      if(truee===0)    {\r\n        this.listEx.push(exaTable);\r\n      }\r\n  }\r\n\r\n}\r\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1yZWNvcmQtcGFnZS9tZWRpY2FsLXJlY29yZC1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MedicalRecord } from 'src/app/models/medicalRecord';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { MedicalRecordService } from 'src/app/services/medical-record.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { User } from 'src/app/models/user';\r\n\r\nexport class Table{\r\n  height:number;\r\n    weight:number;\r\n    bloodType:string;\r\n    allergies:string;\r\n\r\n    constructor(height:number,weight:number,bloodType:string,allergies:string){\r\n        this.height=height;\r\n        this.weight=weight;\r\n        this.bloodType=bloodType;\r\n        this.allergies=allergies;\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-medical-record-page',\r\n  templateUrl: './medical-record-page.component.html',\r\n  styleUrls: ['./medical-record-page.component.css']\r\n})\r\nexport class MedicalRecordPageComponent implements OnInit {\r\n\r\n\r\n  displayedColumns: string[] = ['Height', 'Weight','BloodType','Allergies'];\r\n  dataSource= new MatTableDataSource<MedicalRecord>();\r\n  record:MedicalRecord;\r\n  records:Array<MedicalRecord>=new Array<MedicalRecord>();\r\n  listTable:Array<Table>=new Array<Table>();\r\n  user:User;\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private medicalRecordService:MedicalRecordService,\r\n    private userService:UserService\r\n  ) { \r\n    this.records=this.medicalRecordService.getAllRecords();\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.fillData();\r\n    this.dataSource = new MatTableDataSource(this.listTable);\r\n}\r\n\r\nfillData(){\r\n  /*for (let i = 0; i < this.records.length; i++) {\r\n    const element = this.records[i];\r\n          const table=new Table(element.height,element.weight,element.bloodType,element.allergies);\r\n          this.listTable.push(table);\r\n          \r\n  }*/\r\n  const table=new Table(180,85,\"A+\",\"No allergies\");\r\n  this.listTable.push(table);\r\n}\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtcGFnZS9udXJzZS1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-page',\r\n  templateUrl: './nurse-page.component.html',\r\n  styleUrls: ['./nurse-page.component.css']\r\n})\r\nexport class NursePageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtcHJvZmlsZS9udXJzZS1wcm9maWxlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-profile',\r\n  templateUrl: './nurse-profile.component.html',\r\n  styleUrls: ['./nurse-profile.component.css']\r\n})\r\nexport class NurseProfileComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1wYWdlL3BhdGllbnQtcGFnZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-patient-page',\r\n  templateUrl: './patient-page.component.html',\r\n  styleUrls: ['./patient-page.component.css']\r\n})\r\nexport class PatientPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1wcm9maWxlL3BhdGllbnQtcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Patient } from '../../models/patient';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { PatientService } from '../../services/patient.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\nimport { PatientStatus } from '../../models/patientStatus';\r\n\r\n\r\n@Component({\r\n  selector: 'app-patient-profile',\r\n  templateUrl: './patient-profile.component.html',\r\n  styleUrls: ['./patient-profile.component.css']\r\n})\r\nexport class PatientProfileComponent implements OnInit {\r\n\r\n  patientForm: FormGroup;\r\n  submitted = false;\r\n  selectedPatient: Patient;\r\n  user:User;\r\n  patient:Patient;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedPatient=patientService.getPatient(this.user.email);\r\n    console.log(this.selectedPatient);\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.patientForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedPatient.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedPatient.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedPatient.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedPatient.surname, [Validators.required]),\r\n      address: new FormControl(this.selectedPatient.address, [Validators.required]),\r\n      city: new FormControl(this.selectedPatient.city, [Validators.required]),\r\n      country: new FormControl(this.selectedPatient.country, [Validators.required]),\r\n      number: new FormControl(this.selectedPatient.number, [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl(this.selectedPatient.insuranceID, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.patientForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.patientForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.PATIENT);\r\n    \r\n    this.editPatient();\r\n    \r\n  }\r\n\r\n    public editPatient(){\r\n      this.patientService.editPatient(this.patient).subscribe(\r\n        data => {\r\n          this.userService.setUser(this.user);\r\n          this.patientService.setPatient(this.patient);\r\n          this.router.navigate(['/patient/home']);\r\n        },\r\n        error => {\r\n          alert('Error edit patient');\r\n        }\r\n      );\r\n    }\r\n\r\n \r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVnaXN0ZXItcGF0aWVudC9yZWdpc3Rlci1wYXRpZW50LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, Injectable} from '@angular/core';\r\nimport { Patient} from '../../models/patient';\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {PatientStatus} from '../../models/patientStatus';\r\nimport {Role} from '../../models/role';\r\nimport {User} from '../../models/user';\r\nimport {UserService} from '../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-register-patient',\r\n  templateUrl: './register-patient.component.html',\r\n  styleUrls: ['./register-patient.component.css']\r\n})\r\nexport class RegisterPatientComponent implements OnInit {\r\n\r\n  registerForm: FormGroup;\r\n  submitted = false;\r\n  patient: Patient;\r\n  user:User;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formBuilder.group({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl('', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      address: new FormControl('', [Validators.required]),\r\n      city: new FormControl('', [Validators.required]),\r\n      country: new FormControl('', [Validators.required]),\r\n      number: new FormControl('', [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl('', [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.PATIENT);\r\n\r\n    this.createPatient();\r\n  }\r\n\r\n  private createPatient() {\r\n    this.patientService.newPatient(this.patient).subscribe(\r\n      data => {\r\n        this.userService.addUser(this.user);\r\n        console.log(this.user);\r\n        this.patientService.addPatient(this.patient);\r\n        this.router.navigate(['/login']);\r\n      },\r\n      error => {\r\n        alert('Error registration patient');\r\n      }\r\n    );\r\n  }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { CdkStepperModule } from '@angular/cdk/stepper';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n\r\n@NgModule({\r\n  exports: [\r\n    A11yModule,\r\n    CdkStepperModule,\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    DragDropModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    PortalModule,\r\n    ScrollingModule,\r\n  ]\r\n})\r\nexport class DemoMaterialModule { }","\r\nexport class Clinic {\r\n    id: number;\r\n    name: string;\r\n    address: string;\r\n    description: string;\r\n  \r\n    constructor(name: string, address: string, description: string, id?: number) {\r\n      this.name = name;\r\n      this.address = address;\r\n      this.description = description;\r\n      this.id = id;\r\n    }\r\n  }","\r\nexport class ClinicalCenterAdministrator{\r\n\r\n    constructor(\r\n        public email: string,\r\n        public password: string,\r\n        public name: string,\r\n        public surname: string,\r\n        public number: string,\r\n        \r\n    ){}\r\n}","export class Doctor {\r\n\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    surname: string;\r\n    number: string;\r\n    address: string;\r\n    city: string;\r\n    country: string;\r\n    specialization: string;\r\n  \r\n    constructor(email: string, password: string, name: string, surname: string, number1: string, address: string, city: string, country: string, specialization: string) {\r\n      this.email = email;\r\n      this.name = name;\r\n      this.password = password;\r\n      this.surname = surname;\r\n      this.number = number1;\r\n      this.address = address;\r\n      this.city = city;\r\n      this.country = country;\r\n      this.specialization = specialization;\r\n    }\r\n  }","import { Doctor } from './doctor';\r\nimport { Nurse } from './nurse';\r\nimport { Patient } from './patient';\r\nimport { ExaminationType } from './examinationType';\r\nimport { Room } from './room';\r\n\r\nexport class Examination {\r\n    id: number;\r\n    kind: String;\r\n  //  interval: DateTimeInterval;\r\n    status: String;\r\n //   examinationType: ExaminationType;\r\n   // doctors: Doctor[];\r\n  //  room: Room;\r\n    discount: number;\r\n //   nurse: Nurse;\r\n  //  patient: Patient;\r\n    constructor(id: number, kind: String,  status: String,\r\n         discount: number) {\r\n        this.id = id;\r\n        this.kind = kind;\r\n        this.status = status;\r\n     //   this.examinationType = examinationType;\r\n    //    this.room = room;\r\n        this.discount = discount;\r\n  //      this.nurse = nurse;\r\n    //    this.patient = patient;\r\n    }\r\n}","export class ExaminationTable{\r\n    id:number;\r\n     kind: String;\r\n  interval: String;\r\n    status: String;\r\n  type: String;\r\n   doctors: String;\r\n   room: String;\r\n    discount: String;\r\n  nurse: String;\r\n    patient: String;\r\n\r\n    constructor(id:number,kind: String,  status: String, type: String,\r\n      room: String, discount: String, nurse: String, patient: String,doctors:String,interval:String) {\r\n      this.id=id;\r\n      this.kind = kind;\r\n      this.status = status;\r\n      this.type = type;\r\n      this.room = room;\r\n      this.discount = discount;\r\n      this.nurse = nurse;\r\n      this.patient = patient;\r\n      this.doctors=doctors;\r\n      this.interval=interval;\r\n  }\r\n}","import { Patient } from './patient';\r\nimport { NumberValueAccessor } from '@angular/forms';\r\n\r\nexport class MedicalRecord{\r\n    height:number;\r\n    weight:number;\r\n    bloodType:string;\r\n    allergies:string;\r\n   // patient:Patient;\r\n\r\n    constructor(height:number,weight:number,bloodType:string,allergies:string){\r\n        this.height=height;\r\n        this.weight=weight;\r\n        this.bloodType=bloodType;\r\n        this.allergies=allergies;\r\n       // this.patient=patient;\r\n    }\r\n}","\r\nexport class Nurse{\r\n    \r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    surname: string;\r\n    number: string;\r\n    city: string;\r\n    address: string;\r\n    country: string;\r\n  \r\n\r\n    constructor(email: string, password: string, name: string, surname: string, number1: string, address: string, city: string, country: string) {\r\n\r\n      this.email = email;\r\n      this.name = name;\r\n      this.password = password;\r\n      this.surname = surname;\r\n      this.number = number1;\r\n\r\n      this.address = address;\r\n      this.city = city;\r\n      this.country = country;\r\n\r\n    }\r\n}","import { PatientStatus } from './patientStatus';\r\n\r\nexport class Patient{\r\n\r\n    constructor(\r\n        public email: string,\r\n        public password: string,\r\n        public name: string,\r\n        public surname: string,\r\n        public number: string,\r\n        public address: string,\r\n        public city: string,\r\n        public country: string,\r\n        public insuranceID: string,\r\n        public status: PatientStatus\r\n    ){}\r\n}","export enum PatientStatus {\r\n    AWAITING,\r\n    APPROVED\r\n  }","export enum Role {\r\n    PATIENT,\r\n    DOCTOR,\r\n    NURSE,\r\n    CCADMIN,\r\n    NONE\r\n  }","import { Role } from './role';\r\n\r\nexport class User {\r\n    email: string;\r\n    password: string;\r\n    role: Role;\r\n    constructor(email:string,password:string,role:Role){\r\n        this.email=email;\r\n        this.password=password;\r\n        this.role=role;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Clinic } from '../models/clinic';\r\nimport { HttpClient } from '@angular/common/http'; \r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClinicService {\r\n\r\n  urlClinic = environment.baseUrl + environment.clinic;\r\n  listClinics: Array<Clinic> = new Array<Clinic>();\r\n  clinic: Clinic;\r\n  constructor( private http: HttpClient) {\r\n    this.getAllClinics();\r\n  }\r\n\r\n  public addClinic(c: Clinic) {\r\n    if (this.getClinic(c.name) === null) {\r\n      this.listClinics.push(c);\r\n    }\r\n  }\r\n\r\n  public getClinic(name: string) {\r\n    if ( this.listClinics.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listClinics) {\r\n      if ( u.name === name) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getClinicByName(name) {\r\n    return this.http.get(this.urlClinic + '/' + name);\r\n  }\r\n\r\n  public getAllClinics(): Array<Clinic> {\r\n    this.http.get(this.urlClinic + '/all').subscribe((data: Clinic[]) => {\r\n      for (const c of data) {\r\n        this.clinic = new Clinic(c.name, c.address, c.description, c.id);\r\n        this.addClinic(this.clinic);\r\n        console.log(this.clinic);\r\n      }\r\n    },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listClinics;\r\n  }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport {ClinicalCenterAdministrator} from '../models/clinicalCenterAdministrator';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\n\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\nexport class ClinicalCenterAdministratorService{\r\n\r\n    urlCCAdmin = environment.baseUrl + environment.clinicalCenterAdmininistrator;\r\n    listCCAdmin: Array<ClinicalCenterAdministrator>= new Array<ClinicalCenterAdministrator>();\r\n    clinicalCenterAdministrator:ClinicalCenterAdministrator;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllClinicalCenterAdministrators();\r\n    }\r\n  \r\n    public newCCAdmin(clinicalCenterAdministrator) {\r\n      return this.http.post(this.urlCCAdmin + '/register', clinicalCenterAdministrator);\r\n    }\r\n  \r\n    public loginCCAdmin(clinicalCenterAdministrator) {\r\n      this.userService.setToken(clinicalCenterAdministrator);\r\n      return this.http.post(environment.baseUrl + '/login', clinicalCenterAdministrator, {responseType: 'text'});\r\n    }\r\n\r\n    public editCCAdmin(clinicalCenterAdministrator){\r\n      return this.http.post(this.urlCCAdmin + '/edit', clinicalCenterAdministrator,{responseType: 'text'});\r\n    }\r\n  \r\n    public addCCAdmin(p: ClinicalCenterAdministrator) {\r\n      if(this.getCCAdmin(p.email)===null){\r\n        this.listCCAdmin.push(p);\r\n      }\r\n    }\r\n  \r\n    public getCCAdmin(email: string) {\r\n      if ( this.listCCAdmin.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listCCAdmin) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setCCAdmin(p: ClinicalCenterAdministrator) {\r\n\r\n      for (const p1 of this.listCCAdmin) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n         \r\n          p1.surname = p.surname;\r\n        \r\n          p1.password = p.password;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    public getAllClinicalCenterAdministrators(): Array<ClinicalCenterAdministrator> {\r\n      this.http.get(this.urlCCAdmin + '/all').subscribe((data: ClinicalCenterAdministrator[]) => {\r\n          for (const c of data) {\r\n            this.clinicalCenterAdministrator = new ClinicalCenterAdministrator(c.email,c.password,c.name,c.surname,c.number);\r\n            this.addCCAdmin(this.clinicalCenterAdministrator);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listCCAdmin;\r\n    }\r\n  \r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {Doctor} from '../models/doctor';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserService} from './user.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DoctorService {\r\n\r\n  urlDoctor = environment.baseUrl + environment.doctor;\r\n  listDoctors: Array<Doctor> = new Array<Doctor>();\r\n  doctor:Doctor;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserService\r\n  ) { \r\n    this.getAllDoctors();\r\n  }\r\n\r\n  public newDoctor(doctor) {\r\n    return this.http.post(this.urlDoctor + '/register', doctor);\r\n  }\r\n\r\n  public loginDoctor(doctor) {\r\n    this.userService.setToken(doctor);\r\n    return this.http.post(environment.baseUrl + '/login', doctor, {responseType: 'text'});\r\n  }\r\n\r\n  public editDoctor(doctor){\r\n    return this.http.post(this.urlDoctor + '/edit', doctor,{responseType: 'text'});\r\n  }\r\n\r\n  public addDoctor(d: Doctor) {\r\n    if(this.getDoctor(d.email)===null){\r\n      this.listDoctors.push(d);\r\n    }\r\n  }\r\n\r\n  public getDoctor(email: string) {\r\n    if ( this.listDoctors.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listDoctors) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public setDoctor(p: Doctor) {\r\n\r\n    for (const p1 of this.listDoctors) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.number = p.number;\r\n        p1.surname = p.surname;\r\n        p1.password = p.password;\r\n        p1.address = p.address;\r\n        p1.city = p.city;\r\n        p1.country = p.country;\r\n        p1.specialization = p.specialization;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getAllDoctors(): Array<Doctor> {\r\n    this.http.get(this.urlDoctor + '/all').subscribe((data: Doctor[]) => {\r\n        for (const c of data) {\r\n          this.doctor = new Doctor(c.email,c.password,c.name,c.surname,c.number,c.address,c.city,c.country,c.specialization);\r\n          this.addDoctor(this.doctor);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.listDoctors;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Examination } from '../models/examination';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UserService } from './user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExaminationService {\r\n\r\n  url=environment.baseUrl+environment.examination;\r\n  listExaminations: Array<Examination> = new Array<Examination>();\r\n  examination:Examination;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserService\r\n  ) {\r\n    this.getAllExaminations();\r\n   }\r\n\r\n\r\n   public getAllExaminations(): Array<Examination> {\r\n    this.http.get(this.url + '/all').subscribe((data: Examination[]) => {\r\n      for (const c of data) {\r\n        this.examination = new Examination(c.id,c.kind,c.status,c.discount);\r\n        this.addExamination(this.examination);\r\n        console.log(this.examination);\r\n      }\r\n    },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listExaminations;\r\n  }\r\n\r\n  public addExamination(e: Examination) {\r\n    if (this.getExamination(e.id) === null) {\r\n      this.listExaminations.push(e);\r\n    }\r\n  }\r\n\r\n\r\n  public getExamination(id:number) {\r\n    if ( this.listExaminations.length === 0) {\r\n      return null;\r\n    }\r\n    for (const e of this.listExaminations) {\r\n      if ( e.id === id) {\r\n        return e;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { MedicalRecord } from '../models/medicalRecord';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MedicalRecordService {\r\n\r\n  url=environment.baseUrl+environment.medicalRecord;\r\n  record:MedicalRecord;\r\n  listRecords:Array<MedicalRecord>=new Array<MedicalRecord>();\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { \r\n    this.getAllRecords();\r\n  }\r\n\r\n\r\n\r\npublic getAllRecords(): Array<MedicalRecord> {\r\n  console.log(this.url);\r\n  this.http.get(this.url + '/all').subscribe((data: MedicalRecord[]) => {\r\n    for (const c of data) {\r\n      this.record = new MedicalRecord(c.height,c.weight,c.bloodType,c.allergies);\r\n      this.addRecord(this.record);\r\n      console.log(this.record);\r\n      console.log(c.allergies);\r\n    }\r\n  },\r\n    error => {\r\n      console.log(error);\r\n    }\r\n  );\r\n\r\n  return this.listRecords;\r\n}\r\n\r\npublic addRecord(e: MedicalRecord) {\r\n  if (this.getRecord(e.height) === null) {\r\n    this.listRecords.push(e);\r\n  }\r\n}\r\n\r\npublic getRecord(height:number) {\r\n  if ( this.listRecords.length === 0) {\r\n    return null;\r\n  }\r\n  for (const e of this.listRecords) {\r\n    if ( e.height === height ) {\r\n      return e;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport {Nurse} from '../models/nurse';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\n\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\n\r\n\r\nexport class NurseService{\r\n\r\n    urlNurse = environment.baseUrl + environment.nurse;\r\n    listNurses: Array<Nurse>= new Array<Nurse>();\r\n    nurse:Nurse;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllNurses();\r\n    }\r\n  \r\n    public newNurse(nurse) {\r\n      return this.http.post(this.urlNurse + '/register', nurse);    // da li treba ?\r\n    }\r\n  \r\n    public loginNurse(nurse) {\r\n      this.userService.setToken(nurse);\r\n      return this.http.post(environment.baseUrl + '/login', nurse, {responseType: 'text'});\r\n    }\r\n\r\n    public editNurse(nurse){\r\n      return this.http.post(this.urlNurse + '/edit', nurse,{responseType: 'text'});\r\n    }\r\n  \r\n    public addNurse(p: Nurse) {\r\n      if(this.getNurse(p.email)===null){\r\n        this.listNurses.push(p);\r\n      }\r\n    }\r\n  \r\n    public getNurse(email: string) {\r\n      if ( this.listNurses.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listNurses) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setNurse(p: Nurse) {\r\n\r\n      for (const p1 of this.listNurses) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n          p1.country = p.country;\r\n          p1.address = p.address;\r\n          p1.surname = p.surname;\r\n          p1.city = p.city;\r\n          p1.password = p.password;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    public getAllNurses(): Array<Nurse> {\r\n      this.http.get(this.urlNurse + '/all').subscribe((data: Nurse[]) => {\r\n          for (const c of data) {\r\n            this.nurse = new Nurse(c.email,c.password,c.name,c.surname,c.number,c.address,c.city,c.country);\r\n            this.addNurse(this.nurse);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listNurses;\r\n    }\r\n  \r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport {Patient} from '../models/patient';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\nimport { PatientStatus } from '../models/patientStatus';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\nexport class PatientService{\r\n\r\n    urlPatient = environment.baseUrl + environment.patient;\r\n    listPatients: Array<Patient>= new Array<Patient>();\r\n    patient:Patient;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllPatients();\r\n    }\r\n  \r\n    public newPatient(patient) {\r\n      return this.http.post(this.urlPatient + '/register', patient);\r\n    }\r\n  \r\n    public loginPatient(patient) {\r\n      this.userService.setToken(patient);\r\n      return this.http.post(environment.baseUrl + '/login', patient, {responseType: 'text'});\r\n    }\r\n\r\n    public editPatient(patient){\r\n      return this.http.post(this.urlPatient + '/edit', patient,{responseType: 'text'});\r\n    }\r\n  \r\n    public addPatient(p: Patient) {\r\n      if(this.getPatient(p.email)===null){\r\n        this.listPatients.push(p);\r\n      }\r\n    }\r\n  \r\n    public getPatient(email: string) {\r\n      if ( this.listPatients.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listPatients) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setPatient(p: Patient) {\r\n\r\n      for (const p1 of this.listPatients) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n          p1.country = p.country;\r\n          p1.address = p.address;\r\n          p1.surname = p.surname;\r\n          p1.city = p.city;\r\n          p1.password = p.password;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    public getAllPatients(): Array<Patient> {\r\n      this.http.get(this.urlPatient + '/all').subscribe((data: Patient[]) => {\r\n          for (const c of data) {\r\n            this.patient = new Patient(c.email,c.password,c.name,c.surname,c.number,c.address,c.city,c.country,c.insuranceID,c.status);\r\n            this.addPatient(this.patient);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listPatients;\r\n    }\r\n  \r\n\r\n}","import {User} from '../models/user'\r\nimport { Injectable } from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {Role} from '../models/role';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport { Nurse } from '../models/nurse';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\nexport const TOKEN='LoggedInUser';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class UserService{\r\n    urlUser = environment.baseUrl + environment.user;\r\n    users: Array<User>=new Array<User>();\r\n    user:User= new User('', '', Role.NONE);\r\n    u:User;\r\n    constructor(private router: Router, private http: HttpClient) {\r\n      this.getAllUsers();\r\n      localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n    }\r\n\r\n    public addUser(u: User){\r\n      if (this.getUser(u.email) === null) {\r\n        this.users.push(u);\r\n      }\r\n    }\r\n\r\n    \r\n  public getUser(email: string) {\r\n    if ( this.users.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.users) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n    public setToken(user){\r\n        this.user=user;\r\n        localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n\r\n    }\r\n\r\n    public isLoggedIn() {\r\n        if(localStorage.getItem(TOKEN)!==null){\r\n          return localStorage.getItem(TOKEN);\r\n        }else {\r\n          \r\n          return null;\r\n        }\r\n      }\r\n\r\n      public setUser(u: User) {\r\n\r\n        for (const p1 of this.users) {\r\n          if (p1.email === u.email) {\r\n            p1.password = u.password;\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n    public logout(){\r\n      this.router.navigate(['']);\r\n      this.user =  new User('', '', Role.NONE);\r\n      localStorage.removeItem(TOKEN);\r\n      localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n    }\r\n\r\n    public isNone() {\r\n      if (this.isLoggedIn()) {\r\n        return this.user.role === Role.NONE;\r\n      }\r\n    }\r\n    \r\n    public isPatient() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.PATIENT;\r\n        }\r\n      }\r\n\r\n      public isDoctor() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.DOCTOR;\r\n        }\r\n      }\r\n\r\n      public isNurse() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.NURSE;\r\n        }\r\n      }\r\n\r\n      public isCCAdmin() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.CCADMIN;\r\n        }\r\n      }\r\n\r\n\r\n      public getAllUsers(): Array<User> {\r\n        this.http.get(this.urlUser + '/all').subscribe((data: User[]) => {\r\n            for (const c of data) {\r\n                this.u = new User(c.email, c.password, this.whichRole(c.role.toString()));\r\n                this.addUser(this.u);\r\n            }\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }\r\n        );\r\n        console.log(this.users);\r\n        return this.users;\r\n      }\r\n\r\n      public whichRole(role: string) {\r\n        if (role === 'PATIENT') {\r\n          return Role.PATIENT;\r\n        } else if (role === 'DOCTOR') {\r\n          return  Role.DOCTOR;\r\n        } else if (role === 'NURSE') {\r\n          return  Role.NURSE;\r\n        } else if (role === 'CCADMIN') {\r\n          return  Role.CCADMIN;\r\n        } else {\r\n          console.log(\"ovde je null\");\r\n          return null;\r\n        }\r\n    \r\n      }\r\n\r\n\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  baseUrl: 'http://localhost:8080',\r\n  user: '/user',\r\n  patient: '/patient',\r\n  doctor: '/doctor',\r\n  nurse: '/nurse',\r\n  clinic: '/clinic',\r\n  examination: '/examination',\r\n  medicalRecord: '/medicalRecord',\r\n  clinicalCenterAdmininistrator: '/clinicalCenterAdministrator',\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import 'hammerjs';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}
=======
{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.html","./src/app/components/allpatients-page/allpatients-page.component.html","./src/app/components/ccadmin-profile/ccadmin-profile.component.html","./src/app/components/clinics-page/clinics-page.component.html","./src/app/components/codebook/codebook.component.html","./src/app/components/doctor-page/doctor-page.component.html","./src/app/components/doctor-profile/doctor-profile.component.html","./src/app/components/login/login.component.html","./src/app/components/medical-history-page/medical-history-page.component.html","./src/app/components/medical-record-page/medical-record-page.component.html","./src/app/components/nurse-page/nurse-page.component.html","./src/app/components/nurse-profile/nurse-profile.component.html","./src/app/components/patient-page/patient-page.component.html","./src/app/components/patient-profile/patient-profile.component.html","./src/app/components/register-patient/register-patient.component.html","./node_modules/tslib/tslib.es6.js","./src/app/app-routing.module.ts","./src/app/app.component.css","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/allpatients-page/allpatients-page.component.css","./src/app/components/allpatients-page/allpatients-page.component.ts","./src/app/components/ccadmin-profile/ccadmin-profile.component.css","./src/app/components/ccadmin-profile/ccadmin-profile.component.ts","./src/app/components/clinics-page/clinics-page.component.css","./src/app/components/clinics-page/clinics-page.component.ts","./src/app/components/codebook-dto.ts","./src/app/components/codebook/codebook.component.css","./src/app/components/codebook/codebook.component.ts","./src/app/components/doctor-page/doctor-page.component.css","./src/app/components/doctor-page/doctor-page.component.ts","./src/app/components/doctor-profile/doctor-profile.component.css","./src/app/components/doctor-profile/doctor-profile.component.ts","./src/app/components/login/login.component.css","./src/app/components/login/login.component.ts","./src/app/components/medical-history-page/medical-history-page.component.css","./src/app/components/medical-history-page/medical-history-page.component.ts","./src/app/components/medical-record-page/medical-record-page.component.css","./src/app/components/medical-record-page/medical-record-page.component.ts","./src/app/components/nurse-page/nurse-page.component.css","./src/app/components/nurse-page/nurse-page.component.ts","./src/app/components/nurse-profile/nurse-profile.component.css","./src/app/components/nurse-profile/nurse-profile.component.ts","./src/app/components/patient-page/patient-page.component.css","./src/app/components/patient-page/patient-page.component.ts","./src/app/components/patient-profile/patient-profile.component.css","./src/app/components/patient-profile/patient-profile.component.ts","./src/app/components/register-patient/register-patient.component.css","./src/app/components/register-patient/register-patient.component.ts","./src/app/material-module.ts","./src/app/models/clinic.ts","./src/app/models/clinicalCenterAdministrator.ts","./src/app/models/doctor.ts","./src/app/models/examination.ts","./src/app/models/examinationTable.ts","./src/app/models/medicalRecord.ts","./src/app/models/nurse.ts","./src/app/models/patient.ts","./src/app/models/patientStatus.ts","./src/app/models/role.ts","./src/app/models/user.ts","./src/app/services/clinic.service.ts","./src/app/services/clinicalCenterAdministrator.service.ts","./src/app/services/doctor.service.ts","./src/app/services/examination.service.ts","./src/app/services/medical-record.service.ts","./src/app/services/nurse.service.ts","./src/app/services/patient.service.ts","./src/app/services/user.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\r\\n    <mat-sidenav #drawer class=\\\"sidenav\\\" fixedInViewport [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\r\\n      [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\" [opened]=\\\"(isHandset$ | async) === true\\\">\\r\\n      <mat-toolbar>Menu</mat-toolbar>\\r\\n        <mat-nav-list *ngIf = \\\"isNone()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/login\\\">Login</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/register\\\">Register</a>\\r\\n        </mat-nav-list>\\r\\n  \\r\\n        <mat-nav-list *ngIf=\\\"isPatient()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/patient/profile\\\">Profile</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/medicalRecord\\\">Medical record</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/medicalHistory\\\">Medical history</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/clinics\\\">Clinics</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n  \\r\\n        <mat-nav-list *ngIf=\\\"isDoctor()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/doctor/profile\\\">Profile</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n\\r\\n        <mat-nav-list *ngIf=\\\"isNurse()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/nurse/profile\\\">Profile</a>\\r\\n          <a mat-list-item routerLink=\\\"/nurse/allpatients\\\">All patients</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n\\r\\n        <mat-nav-list *ngIf=\\\"isCCAdmin()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/clinicalCenterAdministrator/profile\\\">Profile</a>\\r\\n          <a mat-list-item routerLink=\\\"/clinicalCenterAdministrator/codebook\\\">Codebook</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n    </mat-sidenav>\\r\\n    <mat-sidenav-content>\\r\\n      <mat-toolbar>\\r\\n        <button type=\\\"button\\\" aria-label=\\\"Toggle sidenav\\\" mat-icon-button (click)=\\\"drawer.toggle()\\\">\\r\\n          <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\r\\n        </button>\\r\\n        <span>Clinical Center</span>\\r\\n      </mat-toolbar>\\r\\n      <!-- Add Content Here -->\\r\\n      <router-outlet></router-outlet>\\r\\n    </mat-sidenav-content>\\r\\n  </mat-sidenav-container>\"","export default \"<!-- page-header -->\\r\\n<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">All patients </h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"allpatientsDataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"name\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">\\r\\n                                    {{element.name}}\\r\\n                                </td>\\r\\n                            </ng-container>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"surname\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Surname </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.surname}} </td>\\r\\n                            </ng-container>\\r\\n\\r\\n                            <ng-container matColumnDef=\\\"address\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Address </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.address}} </td>\\r\\n                            </ng-container>\\r\\n\\r\\n\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                        <mat-paginator [pageSize]=itemsPerPage showFirstLastButtons></mat-paginator>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>{{selectedCCAdmin.name}} profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"ccadminForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" ccadminForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n  \\r\\n              \\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","export default \"<!-- page-header -->\\r\\n<div class=\\\"page-header\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n              <div class=\\\"page-caption\\\">\\r\\n                  <h1 class=\\\"page-title\\\">Clinics in the clinical center</h1>\\r\\n                  <div class=\\\"text-center mt-4\\\">\\r\\n                  </div>\\r\\n              </div>\\r\\n          </div>\\r\\n      </div>\\r\\n  </div>\\r\\n</div>\\r\\n<!-- /.page-header-->\\r\\n\\r\\n<!-- page-content -->\\r\\n<div class=\\\"card-section\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n      <div class=\\\"card-block bg-white mb30\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                  <!-- section-title -->\\r\\n                  <div class=\\\"section-title mb-0\\\">\\r\\n                      <table mat-table [dataSource]=\\\"clinicDataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n\\r\\n                          <ng-container matColumnDef=\\\"name\\\">\\r\\n                              <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\r\\n                              <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">\\r\\n                                  {{element.name}}\\r\\n                              </td>\\r\\n                          </ng-container>\\r\\n\\r\\n                          <ng-container matColumnDef=\\\"address\\\">\\r\\n                              <th mat-header-cell *matHeaderCellDef mat-sort-header> Address </th>\\r\\n                              <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.address}} </td>\\r\\n                          </ng-container>\\r\\n                          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                      </table>\\r\\n                      <mat-paginator [pageSize]=itemsPerPage showFirstLastButtons></mat-paginator>\\r\\n                  </div>\\r\\n                  <!-- /.section-title -->\\r\\n              </div>\\r\\n          </div>\\r\\n      </div>\\r\\n  </div>\\r\\n</div>\\r\\n<!-- /.page-content -->\"","export default \"<div class=\\\"row\\\">  \\r\\n    <div class=\\\"col\\\">\\r\\n            <div class=\\\"container\\\" style=\\\"width:40%\\\">\\r\\n                    <form [formGroup]=\\\"addMedicine\\\" style=\\\"text-align:center\\\"\\r\\n                        (ngSubmit)=\\\"addCodebookMedicine()\\\">\\r\\n                        <span class=\\\"text-nowrap\\\">Add medicine</span>\\r\\n                \\r\\n                        <div class=\\\"input-group mb-3\\\">\\r\\n                            <input class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"label\\\"\\r\\n                            id=\\\"label\\\" placeholder=\\\"Label\\\" \\r\\n                            formControlName=\\\"label\\\">\\r\\n                            <div class=\\\"input-group-append\\\">\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n                        </div>  \\r\\n                    </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n    <table  class=\\\"table\\\">  \\r\\n        <thead>  \\r\\n            <tr>  \\r\\n                    <th scope=\\\"col\\\">                 Id </th>\\r\\n                    <th scope=\\\"col\\\">                 Name </th> \\r\\n                    <th scope=\\\"col\\\"></th>\\r\\n            </tr>  \\r\\n        </thead>  \\r\\n        <tbody>  \\r\\n\\r\\n         \\r\\n\\r\\n             <tr *ngFor=\\\"let medicine of codebook.medicines\\\">  \\r\\n                <td>{{medicine.id}}</td>  \\r\\n                <td>{{medicine.label}}</td>  \\r\\n                <td><button (click)=\\\"deleteMedicine(medicine)\\\" class='btn btn-primary'>Delete</button>   \\r\\n                  \\r\\n                </td>  \\r\\n              </tr>   \\r\\n        </tbody><br>  \\r\\n    </table>  \\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col\\\">\\r\\n            <div class=\\\"container\\\" style=\\\"width:40%\\\">\\r\\n                    <form [formGroup]=\\\"addDiagnose\\\" style=\\\"text-align:center\\\"\\r\\n                        (ngSubmit)=\\\"addCodebookDiagnose()\\\">\\r\\n                        <span class=\\\"text-nowrap\\\">Add diagnose</span>\\r\\n                \\r\\n                        <div class=\\\"input-group mb-3\\\">\\r\\n                            <input class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"title\\\"\\r\\n                            id=\\\"title\\\" placeholder=\\\"Title\\\" \\r\\n                            formControlName=\\\"title\\\">\\r\\n                            <div class=\\\"input-group-append\\\">\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n                        </div>  \\r\\n                    </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n    <table class=\\\"table\\\">  \\r\\n        <thead>  \\r\\n            <tr>  \\r\\n                    <th scope=\\\"col\\\">            Diagnose ID</th>\\r\\n                    <th scope=\\\"col\\\">            Diagnose name</th> \\r\\n                    <th scope=\\\"col\\\"></th>  \\r\\n            </tr>  \\r\\n        </thead>  \\r\\n        <tbody>  \\r\\n             <tr *ngFor=\\\"let diagnose of codebook.diagnoses\\\">  \\r\\n                <td>{{diagnose.id}}</td>  \\r\\n                <td>{{diagnose.title}}</td>  \\r\\n                \\r\\n                <td><button (click)=\\\"deleteDiagnose(diagnose)\\\" class='btn btn-primary'>Delete</button>   \\r\\n                  \\r\\n                </td>  \\r\\n              </tr>   \\r\\n        </tbody><br>  \\r\\n    </table>\\r\\n</div>  \\r\\n\\r\\n\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<h1>WELCOME DOCTOR</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>{{selectedDoctor.name}} profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"doctorForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"doctorForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"doctorForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"doctorForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" doctorForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"doctorForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Address</label>\\r\\n                <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('address').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('address').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('city').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('city').errors['required']\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('country').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('country').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"specialization\\\">Specialization</label>\\r\\n                <input type=\\\"text\\\" id=\\\"specialization\\\" formControlName=\\\"specialization\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('specialization').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('specialization').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('specialization').errors['required']\\\">Specialization is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n              \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n        <div class=\\\"container\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n              <mat-card>\\r\\n                <h3>Login</h3>\\r\\n                <hr>\\r\\n                <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"email\\\">Email</label>\\r\\n                    <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\">\\r\\n                    <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\r\\n                      <div *ngIf=\\\"f.email.errors.email\\\">Email must be a valid email address</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\">\\r\\n                    <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\r\\n                      <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 8 characters long</div>\\r\\n                      <div *ngIf=\\\"f.password.errors.pattern\\\">Password must contain at least 1 lowercase, 1 uppercase letter and 1 number</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <a routerLink=\\\"/patient/register\\\">Don't have an account? Register here.</a>\\r\\n                  </div>\\r\\n      \\r\\n                  <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Login</button>\\r\\n      \\r\\n                </form>\\r\\n              </mat-card>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\"","export default \"<!-- page-header -->\\r\\n<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">History of examinations and operations</h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"Kind\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Kind </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">{{element.kind}}</td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Status\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Status </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.status}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Type\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Type </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.type}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Room\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Room </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.room}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Discount\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Discount </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.discount}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Nurse\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Nurse </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.nurse}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Doctors\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Doctors </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.doctors}} </td>\\r\\n                            </ng-container>\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                        <mat-paginator [pageSize]=itemsPerPage showFirstLastButtons></mat-paginator>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">Medical record</h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"Height\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Height </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">{{element.height}}</td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Weight\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Weight </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.weight}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"BloodType\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Blood type </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.bloodType}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Allergies\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Allergies </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.allergies}} </td>\\r\\n                            </ng-container>\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<h1>WELCOME NURSE</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>{{selectedNurse.name}} profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"nurseForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"email\\\">Email</label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" nurseForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"address\\\">Address</label>\\r\\n              <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('address').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('address').errors['required']\\\">Address is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"city\\\">City</label>\\r\\n              <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\"  class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('city').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('city').errors['required']\\\">City is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"country\\\">Country</label>\\r\\n              <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('country').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('country').errors['required']\\\">Country is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <!-- <div class=\\\"form-group\\\">\\r\\n               <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n               <input type=\\\"text\\\" readonly=\\\"readonly\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\"  class=\\\"form-control\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': submitted &&  patientForm.get('insuranceID').errors }\\\" />\\r\\n               <div *ngIf=\\\"submitted && patientForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                 <div *ngIf=\\\"patientForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                 </div>\\r\\n                 <div\\r\\n                   *ngIf=\\\"patientForm.get('insuranceID').errors['minlength'] ||patientForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                   Health\\r\\n                   Insurance ID must contain exactly 13 characters</div>\\r\\n               </div>\\r\\n             </div> -->\\r\\n\\r\\n\\r\\n\\r\\n             <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n           </form>\\r\\n         </mat-card>\\r\\n       </div>\\r\\n     </div>\\r\\n   </div>\\r\\n </div>\\r\\n\"","export default \"<h1>WELCOME</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>{{selectedPatient.name}} profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"patientForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && patientForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" patientForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Address</label>\\r\\n                <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('address').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('address').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('city').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('city').errors['required']\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('country').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('country').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n                <input type=\\\"text\\\" readonly=\\\"readonly\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted &&  patientForm.get('insuranceID').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                  </div>\\r\\n                  <div\\r\\n                    *ngIf=\\\"patientForm.get('insuranceID').errors['minlength'] ||patientForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                    Health\\r\\n                    Insurance ID must contain exactly 13 characters</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              \\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>Registration</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && registerForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" registerForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Address</label>\\r\\n                <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('address').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('address').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('city').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('city').errors['required']\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('country').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('country').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n                <input type=\\\"text\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted &&  registerForm.get('insuranceID').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                  </div>\\r\\n                  <div\\r\\n                    *ngIf=\\\"registerForm.get('insuranceID').errors['minlength'] ||registerForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                    Health\\r\\n                    Insurance ID must contain exactly 13 characters</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <a routerLink=\\\"/patient/login\\\">Already have an account? Login here.</a>\\r\\n              </div>\\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Register</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {LoginComponent} from './components/login/login.component'\r\nimport {RegisterPatientComponent} from './components/register-patient/register-patient.component'\r\nimport {PatientPageComponent} from './components/patient-page/patient-page.component'\r\nimport { DoctorPageComponent } from './components/doctor-page/doctor-page.component';\r\nimport {PatientProfileComponent} from './components/patient-profile/patient-profile.component'\r\nimport { MedicalRecordPageComponent } from './components/medical-record-page/medical-record-page.component';\r\nimport { MedicalHistoryPageComponent } from './components/medical-history-page/medical-history-page.component';\r\nimport { ClinicsPageComponent } from './components/clinics-page/clinics-page.component';\r\nimport { DoctorProfileComponent } from './components/doctor-profile/doctor-profile.component';\r\nimport {NursePageComponent} from './components/nurse-page/nurse-page.component';\r\nimport {NurseProfileComponent} from './components/nurse-profile/nurse-profile.component';\r\nimport {CCAdminProfileComponent} from './components/ccadmin-profile/ccadmin-profile.component';\r\nimport {AllPatientsPageComponent} from './components/allpatients-page/allpatients-page.component';\r\nimport { CodebookComponent} from './components/codebook/codebook.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'patient/register',\r\n    component: RegisterPatientComponent,\r\n  },\r\n  {\r\n    path: 'patient/home',\r\n    component: PatientPageComponent,\r\n  },\r\n  {\r\n    path:'doctor/home',\r\n    component: DoctorPageComponent\r\n  },\r\n  {\r\n    path:'clinicalCenterAdministrator/profile',\r\n    component: CCAdminProfileComponent\r\n  },\r\n\r\n  {\r\n    path:'clinicalCenterAdministrator/codebook',\r\n    component: CodebookComponent\r\n  },\r\n  \r\n\r\n  {\r\n    path:'doctor/profile',\r\n    component: DoctorProfileComponent\r\n  },\r\n  {\r\n    path:'nurse/home',\r\n    component: NursePageComponent\r\n  },\r\n  {\r\n    path:'nurse/profile',\r\n    component: NurseProfileComponent\r\n  },{\r\n    path:'nurse/allpatients',\r\n    component: AllPatientsPageComponent\r\n  },\r\n  {\r\n    path:'patient/profile',\r\n    component: PatientProfileComponent\r\n  },{\r\n    path:'patient/medicalRecord',\r\n    component: MedicalRecordPageComponent\r\n  },{\r\n    path:'patient/medicalHistory',\r\n    component: MedicalHistoryPageComponent\r\n  },{\r\n    path:'patient/clinics',\r\n    component: ClinicsPageComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","export default \".example-full-width {\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .main-content {\\r\\n    margin: 20px 0;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0VBQ2I7O0VBRUE7SUFDRSxjQUFjO0VBQ2hCIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXhhbXBsZS1mdWxsLXdpZHRoIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICBcclxuICAubWFpbi1jb250ZW50IHtcclxuICAgIG1hcmdpbjogMjBweCAwO1xyXG4gIH0iXX0= */\"","import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport {UserService} from '../app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver,\r\n    private userService:UserService) { }\r\n\r\n  public isLoggedIn() {\r\n    return this.userService.isLoggedIn();\r\n  }\r\n\r\n  public isNone(){\r\n    return this.userService.isNone();\r\n  }\r\n\r\n  public isPatient() {\r\n    return this.userService.isPatient();\r\n  }\r\n\r\n  public isDoctor() {\r\n    return this.userService.isDoctor();\r\n  }\r\n\r\n  public isNurse() {\r\n    return this.userService.isNurse();\r\n  }\r\n  \r\n  public isCCAdmin() {\r\n    return this.userService.isCCAdmin();\r\n  }\r\n  public onLogout() {\r\n    this.userService.logout();\r\n  }\r\n\r\n}\r\n\r\n","\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule, MatCardModule, MatFormFieldModule, MatInputModule } from '@angular/material';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport {DemoMaterialModule} from './material-module';\r\n\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegisterPatientComponent } from './components/register-patient/register-patient.component';\r\nimport { PatientPageComponent } from './components/patient-page/patient-page.component';\r\nimport { DoctorPageComponent } from './components/doctor-page/doctor-page.component';\r\nimport { PatientProfileComponent } from './components/patient-profile/patient-profile.component';\r\nimport { DoctorProfileComponent } from './components/doctor-profile/doctor-profile.component';\r\nimport { MedicalRecordPageComponent } from './components/medical-record-page/medical-record-page.component';\r\nimport { MedicalHistoryPageComponent } from './components/medical-history-page/medical-history-page.component';\r\nimport { ClinicsPageComponent } from './components/clinics-page/clinics-page.component';\r\nimport {NursePageComponent} from './components/nurse-page/nurse-page.component';\r\nimport {NurseProfileComponent} from './components/nurse-profile/nurse-profile.component';\r\nimport { CCAdminProfileComponent } from './components/ccadmin-profile/ccadmin-profile.component';\r\nimport { AllPatientsPageComponent } from './components/allpatients-page/allpatients-page.component';\r\nimport { CodebookComponent } from './components/codebook/codebook.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterPatientComponent,\r\n    PatientPageComponent,\r\n    DoctorPageComponent,\r\n    PatientProfileComponent,\r\n    DoctorProfileComponent,\r\n    MedicalRecordPageComponent,\r\n    MedicalHistoryPageComponent,\r\n    ClinicsPageComponent,\r\n    NursePageComponent,\r\n    NurseProfileComponent,\r\n    CCAdminProfileComponent,\r\n    AllPatientsPageComponent,\r\n    CodebookComponent,\r\n\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    ToastrModule.forRoot({\r\n      timeOut: 2000,\r\n      positionClass: 'toast-top-right',\r\n      preventDuplicates: true,\r\n    }),\r\n    LayoutModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    MatNativeDateModule,\r\n    DemoMaterialModule,\r\n  ],\r\n  entryComponents: [\r\n    CCAdminProfileComponent,\r\n    AllPatientsPageComponent,\r\n    CodebookComponent\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWxscGF0aWVudHMtcGFnZS9hbGxwYXRpZW50cy1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Patient } from 'src/app/models/patient';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { PatientService } from 'src/app/services/patient.service';   // nemam za sve pacijente?\r\n\r\n@Component({\r\n  selector: 'app-allpatients-page',\r\n  templateUrl: './allpatients-page.component.html',\r\n  styleUrls: ['./allpatients-page.component.css']\r\n})\r\nexport class AllPatientsPageComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['name', 'surname', 'address'];\r\n  patient: Patient;\r\n  allpatientsDataSource = new MatTableDataSource<Patient>();\r\n  allpatients: Array<Patient> = new Array<Patient>();\r\n  \r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private patientService: PatientService\r\n  ) {\r\n    this.allpatients=this.patientService.getAllPatients();\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n\r\n  }\r\n\r\n  all() {\r\n      this.allpatientsDataSource = new MatTableDataSource(this.patientService.getAllPatients());\r\n      this.allpatientsDataSource.paginator = this.paginator;\r\n  }\r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2NhZG1pbi1wcm9maWxlL2NjYWRtaW4tcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ClinicalCenterAdministrator } from '../../models/clinicalCenterAdministrator';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { ClinicalCenterAdministratorService } from '../../services/clinicalCenterAdministrator.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-ccadmin-profile',\r\n  templateUrl: './ccadmin-profile.component.html',\r\n  styleUrls: ['./ccadmin-profile.component.css']\r\n})\r\nexport class CCAdminProfileComponent implements OnInit {\r\n\r\n  ccadminForm: FormGroup;\r\n  submitted = false;\r\n  selectedCCAdmin: ClinicalCenterAdministrator;\r\n  user:User;\r\n  clinicalCenterAdministrator:ClinicalCenterAdministrator;\r\n\r\n  constructor(\r\n    private ccadminService: ClinicalCenterAdministratorService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedCCAdmin=ccadminService.getCCAdmin(this.user.email);\r\n    console.log(this.selectedCCAdmin);\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.ccadminForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedCCAdmin.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedCCAdmin.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedCCAdmin.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedCCAdmin.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedCCAdmin.number, [Validators.required, Validators.minLength(9)]),\r\n     });\r\n  }\r\n\r\n  get f() {\r\n    return this.ccadminForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.ccadminForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.clinicalCenterAdministrator = new ClinicalCenterAdministrator(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.CCADMIN);\r\n    \r\n    this.editClinicalCenterAdministrator();\r\n    \r\n  }\r\n\r\n    public editClinicalCenterAdministrator(){\r\n      this.ccadminService.editCCAdmin(this.clinicalCenterAdministrator).subscribe(\r\n        data => {\r\n          this.userService.setUser(this.user);\r\n          this.ccadminService.setCCAdmin(this.clinicalCenterAdministrator);\r\n          this.router.navigate(['/clinicalCenterAdministrator/profile']);\r\n        },\r\n        error => {\r\n          alert('Error edit clinical center administrator');\r\n        }\r\n      );\r\n    }\r\n\r\n \r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljcy1wYWdlL2NsaW5pY3MtcGFnZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Clinic } from 'src/app/models/clinic';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { ClinicService } from 'src/app/services/clinic.service';\r\n\r\n@Component({\r\n  selector: 'app-clinics-page',\r\n  templateUrl: './clinics-page.component.html',\r\n  styleUrls: ['./clinics-page.component.css']\r\n})\r\nexport class ClinicsPageComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['name', 'address'];\r\n  clinic: Clinic;\r\n  clinicDataSource = new MatTableDataSource<Clinic>();\r\n  clinics: Array<Clinic> = new Array<Clinic>();\r\n  \r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private clinicService: ClinicService\r\n  ) {\r\n    this.clinics=this.clinicService.getAllClinics();\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n\r\n  }\r\n\r\n  all() {\r\n      this.clinicDataSource = new MatTableDataSource(this.clinicService.getAllClinics());\r\n      this.clinicDataSource.paginator = this.paginator;\r\n  }\r\n\r\n\r\n}\r\n","export class CodebookDTO {\r\n\r\n    medicine:any;\r\n    diagnose:any;\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY29kZWJvb2svY29kZWJvb2suY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ClinicalCenterAdministratorService } from '../../services/clinicalCenterAdministrator.service';\r\nimport { CodebookDTO } from '../codebook-dto'\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { MedicalHistoryPageComponent } from '../medical-history-page/medical-history-page.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-codebook',\r\n  templateUrl: './codebook.component.html',\r\n  styleUrls: ['./codebook.component.css']\r\n})\r\nexport class CodebookComponent implements OnInit {\r\n\r\n  constructor(private codebookService: ClinicalCenterAdministratorService, private formBuilder: FormBuilder) { }\r\n  addMedicine : FormGroup;\r\n  addDiagnose : FormGroup;\r\n  codebook : any;\r\n\r\n  ngOnInit() {\r\n\r\n    this.addMedicine  = this.formBuilder.group({\r\n      'label' : new FormControl('', Validators.required)\r\n    });\r\n\r\n    this.addDiagnose = this.formBuilder.group({\r\n      'title' : new FormControl('', Validators.required)\r\n    });\r\n\r\n    this.codebookService.returnCodebook().subscribe(data =>{\r\n      this.codebook = data;\r\n    },\r\n    error=>{}\r\n    )\r\n\r\n\r\n  }\r\n  addCodebookMedicine(){\r\n    var si = new CodebookDTO();\r\n    si.medicine = new Object();\r\n    si.medicine.label = this.addMedicine.value.label;\r\n    this.codebookService.addCodebook(si).subscribe(data=>{this.codebook = data});\r\n  }\r\n\r\n  deleteMedicine(medicine : any){\r\n    var si = new CodebookDTO();\r\n    si.medicine = medicine;\r\n    //alert(JSON.stringify(si));\r\n    this.codebookService.deleteCodebook(si).subscribe(data=>{this.codebook = data});\r\n  }\r\n\r\n  addCodebookDiagnose() {\r\n    var codebook = new CodebookDTO();\r\n    codebook.diagnose = new Object();\r\n    codebook.diagnose.title = this.addDiagnose.value.title;\r\n    this.codebookService.addCodebook(codebook).subscribe(data=>{this.codebook = data});\r\n  }\r\n\r\n  deleteDiagnose(diagnose : any) {\r\n    var codebook = new CodebookDTO();\r\n    codebook.diagnose = diagnose;\r\n    this.codebookService.deleteCodebook(codebook).subscribe(data=>{this.codebook = data});\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXBhZ2UvZG9jdG9yLXBhZ2UuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-doctor-page',\r\n  templateUrl: './doctor-page.component.html',\r\n  styleUrls: ['./doctor-page.component.css']\r\n})\r\nexport class DoctorPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXByb2ZpbGUvZG9jdG9yLXByb2ZpbGUuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Doctor } from '../../models/doctor';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { DoctorService } from '../../services/doctor.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\n\r\n@Component({\r\n  selector: 'app-doctor-profile',\r\n  templateUrl: './doctor-profile.component.html',\r\n  styleUrls: ['./doctor-profile.component.css']\r\n})\r\nexport class DoctorProfileComponent implements OnInit {\r\n\r\n  doctorForm: FormGroup;\r\n  submitted = false;\r\n  selectedDoctor: Doctor;\r\n  user:User;\r\n  doctor:Doctor;\r\n\r\n  constructor(\r\n    private doctorService: DoctorService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedDoctor=doctorService.getDoctor(this.user.email);\r\n    console.log(this.selectedDoctor);\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.doctorForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedDoctor.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedDoctor.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedDoctor.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedDoctor.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedDoctor.number, [Validators.required, Validators.minLength(9)]),\r\n      address: new FormControl(this.selectedDoctor.address, [Validators.required]),\r\n      city: new FormControl(this.selectedDoctor.city, [Validators.required]),\r\n      country: new FormControl(this.selectedDoctor.country, [Validators.required]),\r\n      specialization: new FormControl(this.selectedDoctor.specialization, [Validators.required]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.doctorForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.doctorForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.doctor = new Doctor(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.specialization.value\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.DOCTOR);\r\n    \r\n    this.editDoctor();\r\n    \r\n  }\r\n\r\n    public editDoctor(){\r\n      this.doctorService.editDoctor(this.doctor).subscribe(\r\n        data => {\r\n          this.userService.setUser(this.user);\r\n          this.doctorService.setDoctor(this.doctor);\r\n          this.router.navigate(['/doctor/home']);\r\n        },\r\n        error => {\r\n          alert('Error edit doctor');\r\n        }\r\n      );\r\n    }\r\n\r\n \r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormGroup, FormBuilder, Validators} from '@angular/forms';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport { Router } from '@angular/router';\r\nimport {User} from '../../models/user';\r\nimport {Role} from '../../models/role';\r\nimport {UserService} from '../../services/user.service';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport { NurseService } from 'src/app/services/nurse.service';\r\nimport { ClinicalCenterAdministratorService } from 'src/app/services/clinicalCenterAdministrator.service';\r\n\r\n\r\nexport class LoginUser {\r\n  constructor(\r\n    public email: string,\r\n    public password: string\r\n  ) {}\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n\r\n  private loginForm: FormGroup;\r\n  private submitted = false;\r\n  private user:User;\r\n  private loginUser:LoginUser;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService,\r\n    private doctorService:DoctorService,\r\n    private nurseService:NurseService,\r\n    private ccadminService:ClinicalCenterAdministratorService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loginForm=this.formBuilder.group({\r\n      email: ['',[Validators.required,Validators.email]],\r\n      password: ['',Validators.required]\r\n    })\r\n  }\r\n\r\n  get f(){\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  private onSubmit(){\r\n    this.submitted=true;\r\n\r\n    if(this.loginForm.invalid)\r\n    return;\r\n  \r\n\r\n  this.loginUser=new LoginUser(\r\n    this.f.email.value,\r\n    this.f.password.value\r\n  )\r\n    this.user=this.userService.getUser(this.f.email.value);\r\n    console.log(this.user);\r\n    this.attemptLogin();\r\n  }\r\n\r\n  public attemptLogin() {\r\n    if (this.user.role === Role.PATIENT && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.patientService.loginPatient(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/patient/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.DOCTOR && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.doctorService.loginDoctor(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/doctor/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.NURSE && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.nurseService.loginNurse(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/nurse/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.CCADMIN && this.loginUser.password === this.user.password) {\r\n      \r\n    \r\n      console.log(this.user);\r\n      this.ccadminService.loginCCAdmin(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in as ccadmin');\r\n            this.router.navigate(['/clinicalCenterAdministrator/profile']);\r\n          } else {\r\n            console.log('Login error as ccadmin');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1oaXN0b3J5LXBhZ2UvbWVkaWNhbC1oaXN0b3J5LXBhZ2UuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Examination } from 'src/app/models/examination';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { ExaminationService } from 'src/app/services/examination.service';\r\nimport { ExaminationTable } from 'src/app/models/examinationTable';\r\n\r\n\r\n@Component({\r\n  selector: 'app-medical-history-page',\r\n  templateUrl: './medical-history-page.component.html',\r\n  styleUrls: ['./medical-history-page.component.css']\r\n})\r\nexport class MedicalHistoryPageComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['Kind', 'Status','Type','Room','Discount','Nurse','Doctors'];\r\n  examination:Examination;\r\n  dataSource= new MatTableDataSource<ExaminationTable>();\r\n  examinations:Array<Examination>=new Array<Examination>();\r\n  listEx:Array<ExaminationTable>=new Array<ExaminationTable>();\r\n  exTable:ExaminationTable;\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private examinationService:ExaminationService\r\n  ) {\r\n    this.examinations=this.examinationService.getAllExaminations();\r\n    console.log(\"medicalHPage  \"+this.examinations)\r\n    this.all();\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.fillData();\r\n    this.dataSource = new MatTableDataSource(this.listEx);\r\n    this.dataSource.paginator = this.paginator;\r\n}\r\n\r\n  fillData(){\r\n    for (let i = 0; i < this.examinations.length; i++) {\r\n      const element = this.examinations[i];\r\n      const exaTable=new ExaminationTable(this.examinations[i].id,this.examinations[i].kind,this.examinations[i].status,\"type\",\"room1\",\"0\",\"nurse1\",\"patient1\",\"doctor1,doctor2\",\"0\");\r\n      let truee=0;\r\n      for (let j = 0; j < this.listEx.length; j++) {\r\n        const elemente = this.listEx[j];\r\n        if(elemente.id===exaTable.id)\r\n            {truee=1;}\r\n      }\r\n      if(truee===0)    {\r\n        this.listEx.push(exaTable);\r\n      }\r\n  }\r\n\r\n}\r\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1yZWNvcmQtcGFnZS9tZWRpY2FsLXJlY29yZC1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MedicalRecord } from 'src/app/models/medicalRecord';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { MedicalRecordService } from 'src/app/services/medical-record.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { User } from 'src/app/models/user';\r\n\r\nexport class Table{\r\n  height:number;\r\n    weight:number;\r\n    bloodType:string;\r\n    allergies:string;\r\n\r\n    constructor(height:number,weight:number,bloodType:string,allergies:string){\r\n        this.height=height;\r\n        this.weight=weight;\r\n        this.bloodType=bloodType;\r\n        this.allergies=allergies;\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-medical-record-page',\r\n  templateUrl: './medical-record-page.component.html',\r\n  styleUrls: ['./medical-record-page.component.css']\r\n})\r\nexport class MedicalRecordPageComponent implements OnInit {\r\n\r\n\r\n  displayedColumns: string[] = ['Height', 'Weight','BloodType','Allergies'];\r\n  dataSource= new MatTableDataSource<MedicalRecord>();\r\n  record:MedicalRecord;\r\n  records:Array<MedicalRecord>=new Array<MedicalRecord>();\r\n  listTable:Array<Table>=new Array<Table>();\r\n  user:User;\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private medicalRecordService:MedicalRecordService,\r\n    private userService:UserService\r\n  ) { \r\n    this.records=this.medicalRecordService.getAllRecords();\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.fillData();\r\n    this.dataSource = new MatTableDataSource(this.listTable);\r\n}\r\n\r\nfillData(){\r\n  /*for (let i = 0; i < this.records.length; i++) {\r\n    const element = this.records[i];\r\n          const table=new Table(element.height,element.weight,element.bloodType,element.allergies);\r\n          this.listTable.push(table);\r\n          \r\n  }*/\r\n  const table=new Table(180,85,\"A+\",\"No allergies\");\r\n  this.listTable.push(table);\r\n}\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtcGFnZS9udXJzZS1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-page',\r\n  templateUrl: './nurse-page.component.html',\r\n  styleUrls: ['./nurse-page.component.css']\r\n})\r\nexport class NursePageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtcHJvZmlsZS9udXJzZS1wcm9maWxlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-profile',\r\n  templateUrl: './nurse-profile.component.html',\r\n  styleUrls: ['./nurse-profile.component.css']\r\n})\r\nexport class NurseProfileComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1wYWdlL3BhdGllbnQtcGFnZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-patient-page',\r\n  templateUrl: './patient-page.component.html',\r\n  styleUrls: ['./patient-page.component.css']\r\n})\r\nexport class PatientPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1wcm9maWxlL3BhdGllbnQtcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Patient } from '../../models/patient';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { PatientService } from '../../services/patient.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\nimport { PatientStatus } from '../../models/patientStatus';\r\n\r\n\r\n@Component({\r\n  selector: 'app-patient-profile',\r\n  templateUrl: './patient-profile.component.html',\r\n  styleUrls: ['./patient-profile.component.css']\r\n})\r\nexport class PatientProfileComponent implements OnInit {\r\n\r\n  patientForm: FormGroup;\r\n  submitted = false;\r\n  selectedPatient: Patient;\r\n  user:User;\r\n  patient:Patient;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedPatient=patientService.getPatient(this.user.email);\r\n    console.log(this.selectedPatient);\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.patientForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedPatient.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedPatient.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedPatient.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedPatient.surname, [Validators.required]),\r\n      address: new FormControl(this.selectedPatient.address, [Validators.required]),\r\n      city: new FormControl(this.selectedPatient.city, [Validators.required]),\r\n      country: new FormControl(this.selectedPatient.country, [Validators.required]),\r\n      number: new FormControl(this.selectedPatient.number, [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl(this.selectedPatient.insuranceID, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.patientForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.patientForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.PATIENT);\r\n    \r\n    this.editPatient();\r\n    \r\n  }\r\n\r\n    public editPatient(){\r\n      this.patientService.editPatient(this.patient).subscribe(\r\n        data => {\r\n          this.userService.setUser(this.user);\r\n          this.patientService.setPatient(this.patient);\r\n          this.router.navigate(['/patient/home']);\r\n        },\r\n        error => {\r\n          alert('Error edit patient');\r\n        }\r\n      );\r\n    }\r\n\r\n \r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVnaXN0ZXItcGF0aWVudC9yZWdpc3Rlci1wYXRpZW50LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, Injectable} from '@angular/core';\r\nimport { Patient} from '../../models/patient';\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {PatientStatus} from '../../models/patientStatus';\r\nimport {Role} from '../../models/role';\r\nimport {User} from '../../models/user';\r\nimport {UserService} from '../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-register-patient',\r\n  templateUrl: './register-patient.component.html',\r\n  styleUrls: ['./register-patient.component.css']\r\n})\r\nexport class RegisterPatientComponent implements OnInit {\r\n\r\n  registerForm: FormGroup;\r\n  submitted = false;\r\n  patient: Patient;\r\n  user:User;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formBuilder.group({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl('', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      address: new FormControl('', [Validators.required]),\r\n      city: new FormControl('', [Validators.required]),\r\n      country: new FormControl('', [Validators.required]),\r\n      number: new FormControl('', [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl('', [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.PATIENT);\r\n\r\n    this.createPatient();\r\n  }\r\n\r\n  private createPatient() {\r\n    this.patientService.newPatient(this.patient).subscribe(\r\n      data => {\r\n        this.userService.addUser(this.user);\r\n        console.log(this.user);\r\n        this.patientService.addPatient(this.patient);\r\n        this.router.navigate(['/login']);\r\n      },\r\n      error => {\r\n        alert('Error registration patient');\r\n      }\r\n    );\r\n  }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { CdkStepperModule } from '@angular/cdk/stepper';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n\r\n@NgModule({\r\n  exports: [\r\n    A11yModule,\r\n    CdkStepperModule,\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    DragDropModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    PortalModule,\r\n    ScrollingModule,\r\n  ]\r\n})\r\nexport class DemoMaterialModule { }","\r\nexport class Clinic {\r\n    id: number;\r\n    name: string;\r\n    address: string;\r\n    description: string;\r\n  \r\n    constructor(name: string, address: string, description: string, id?: number) {\r\n      this.name = name;\r\n      this.address = address;\r\n      this.description = description;\r\n      this.id = id;\r\n    }\r\n  }","\r\nexport class ClinicalCenterAdministrator{\r\n\r\n    constructor(\r\n        public email: string,\r\n        public password: string,\r\n        public name: string,\r\n        public surname: string,\r\n        public number: string,\r\n        \r\n    ){}\r\n}","export class Doctor {\r\n\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    surname: string;\r\n    number: string;\r\n    address: string;\r\n    city: string;\r\n    country: string;\r\n    specialization: string;\r\n  \r\n    constructor(email: string, password: string, name: string, surname: string, number1: string, address: string, city: string, country: string, specialization: string) {\r\n      this.email = email;\r\n      this.name = name;\r\n      this.password = password;\r\n      this.surname = surname;\r\n      this.number = number1;\r\n      this.address = address;\r\n      this.city = city;\r\n      this.country = country;\r\n      this.specialization = specialization;\r\n    }\r\n  }","import { Doctor } from './doctor';\r\nimport { Nurse } from './nurse';\r\nimport { Patient } from './patient';\r\nimport { ExaminationType } from './examinationType';\r\nimport { Room } from './room';\r\n\r\nexport class Examination {\r\n    id: number;\r\n    kind: String;\r\n  //  interval: DateTimeInterval;\r\n    status: String;\r\n //   examinationType: ExaminationType;\r\n   // doctors: Doctor[];\r\n  //  room: Room;\r\n    discount: number;\r\n //   nurse: Nurse;\r\n  //  patient: Patient;\r\n    constructor(id: number, kind: String,  status: String,\r\n         discount: number) {\r\n        this.id = id;\r\n        this.kind = kind;\r\n        this.status = status;\r\n     //   this.examinationType = examinationType;\r\n    //    this.room = room;\r\n        this.discount = discount;\r\n  //      this.nurse = nurse;\r\n    //    this.patient = patient;\r\n    }\r\n}","export class ExaminationTable{\r\n    id:number;\r\n     kind: String;\r\n  interval: String;\r\n    status: String;\r\n  type: String;\r\n   doctors: String;\r\n   room: String;\r\n    discount: String;\r\n  nurse: String;\r\n    patient: String;\r\n\r\n    constructor(id:number,kind: String,  status: String, type: String,\r\n      room: String, discount: String, nurse: String, patient: String,doctors:String,interval:String) {\r\n      this.id=id;\r\n      this.kind = kind;\r\n      this.status = status;\r\n      this.type = type;\r\n      this.room = room;\r\n      this.discount = discount;\r\n      this.nurse = nurse;\r\n      this.patient = patient;\r\n      this.doctors=doctors;\r\n      this.interval=interval;\r\n  }\r\n}","import { Patient } from './patient';\r\nimport { NumberValueAccessor } from '@angular/forms';\r\n\r\nexport class MedicalRecord{\r\n    height:number;\r\n    weight:number;\r\n    bloodType:string;\r\n    allergies:string;\r\n   // patient:Patient;\r\n\r\n    constructor(height:number,weight:number,bloodType:string,allergies:string){\r\n        this.height=height;\r\n        this.weight=weight;\r\n        this.bloodType=bloodType;\r\n        this.allergies=allergies;\r\n       // this.patient=patient;\r\n    }\r\n}","\r\nexport class Nurse{\r\n    \r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    surname: string;\r\n    number: string;\r\n    city: string;\r\n    address: string;\r\n    country: string;\r\n  \r\n\r\n    constructor(email: string, password: string, name: string, surname: string, number1: string, address: string, city: string, country: string) {\r\n\r\n      this.email = email;\r\n      this.name = name;\r\n      this.password = password;\r\n      this.surname = surname;\r\n      this.number = number1;\r\n\r\n      this.address = address;\r\n      this.city = city;\r\n      this.country = country;\r\n\r\n    }\r\n}","import { PatientStatus } from './patientStatus';\r\n\r\nexport class Patient{\r\n\r\n    constructor(\r\n        public email: string,\r\n        public password: string,\r\n        public name: string,\r\n        public surname: string,\r\n        public number: string,\r\n        public address: string,\r\n        public city: string,\r\n        public country: string,\r\n        public insuranceID: string,\r\n        public status: PatientStatus\r\n    ){}\r\n}","export enum PatientStatus {\r\n    AWAITING,\r\n    APPROVED\r\n  }","export enum Role {\r\n    PATIENT,\r\n    DOCTOR,\r\n    NURSE,\r\n    CCADMIN,\r\n    NONE\r\n  }","import { Role } from './role';\r\n\r\nexport class User {\r\n    email: string;\r\n    password: string;\r\n    role: Role;\r\n    constructor(email:string,password:string,role:Role){\r\n        this.email=email;\r\n        this.password=password;\r\n        this.role=role;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Clinic } from '../models/clinic';\r\nimport { HttpClient } from '@angular/common/http'; \r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClinicService {\r\n\r\n  urlClinic = environment.baseUrl + environment.clinic;\r\n  listClinics: Array<Clinic> = new Array<Clinic>();\r\n  clinic: Clinic;\r\n  constructor( private http: HttpClient) {\r\n    this.getAllClinics();\r\n  }\r\n\r\n  public addClinic(c: Clinic) {\r\n    if (this.getClinic(c.name) === null) {\r\n      this.listClinics.push(c);\r\n    }\r\n  }\r\n\r\n  public getClinic(name: string) {\r\n    if ( this.listClinics.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listClinics) {\r\n      if ( u.name === name) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getClinicByName(name) {\r\n    return this.http.get(this.urlClinic + '/' + name);\r\n  }\r\n\r\n  public getAllClinics(): Array<Clinic> {\r\n    this.http.get(this.urlClinic + '/all').subscribe((data: Clinic[]) => {\r\n      for (const c of data) {\r\n        this.clinic = new Clinic(c.name, c.address, c.description, c.id);\r\n        this.addClinic(this.clinic);\r\n        console.log(this.clinic);\r\n      }\r\n    },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listClinics;\r\n  }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport {ClinicalCenterAdministrator} from '../models/clinicalCenterAdministrator';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\nexport class ClinicalCenterAdministratorService{\r\n\r\n    urlCCAdmin = environment.baseUrl + environment.clinicalCenterAdmininistrator;\r\n    listCCAdmin: Array<ClinicalCenterAdministrator>= new Array<ClinicalCenterAdministrator>();\r\n    clinicalCenterAdministrator:ClinicalCenterAdministrator;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllClinicalCenterAdministrators();\r\n    }\r\n  \r\n    public newCCAdmin(clinicalCenterAdministrator) {\r\n      return this.http.post(this.urlCCAdmin + '/register', clinicalCenterAdministrator);\r\n    }\r\n  \r\n    public loginCCAdmin(clinicalCenterAdministrator) {\r\n      this.userService.setToken(clinicalCenterAdministrator);\r\n      return this.http.post(environment.baseUrl + '/login', clinicalCenterAdministrator, {responseType: 'text'});\r\n    }\r\n\r\n    public editCCAdmin(clinicalCenterAdministrator){\r\n      return this.http.post(this.urlCCAdmin + '/edit', clinicalCenterAdministrator,{responseType: 'text'});\r\n    }\r\n  \r\n    public addCCAdmin(p: ClinicalCenterAdministrator) {\r\n      if(this.getCCAdmin(p.email)===null){\r\n        this.listCCAdmin.push(p);\r\n      }\r\n    }\r\n  \r\n    public getCCAdmin(email: string) {\r\n      if ( this.listCCAdmin.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listCCAdmin) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setCCAdmin(p: ClinicalCenterAdministrator) {\r\n\r\n      for (const p1 of this.listCCAdmin) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n         \r\n          p1.surname = p.surname;\r\n        \r\n          p1.password = p.password;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    public getAllClinicalCenterAdministrators(): Array<ClinicalCenterAdministrator> {\r\n      this.http.get(this.urlCCAdmin + '/all').subscribe((data: ClinicalCenterAdministrator[]) => {\r\n          for (const c of data) {\r\n            this.clinicalCenterAdministrator = new ClinicalCenterAdministrator(c.email,c.password,c.name,c.surname,c.number);\r\n            this.addCCAdmin(this.clinicalCenterAdministrator);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listCCAdmin;\r\n    }\r\n    addCodebook(sifarnik: any): Observable<any> {\r\n      return this.http.post(this.urlCCAdmin+\"/addCodebook\", sifarnik).pipe(map(data => {return data;}));\r\n  }\r\n  deleteCodebook(sifarnik): Observable<any> {\r\n     // alert(JSON.stringify(sifarnik));\r\n      return this.http.post(this.urlCCAdmin+\"/deleteCodebook\", sifarnik).pipe(map(data => {return data;}));\r\n  }\r\n  returnCodebook(): Observable<any> {\r\n      return this.http.get(this.urlCCAdmin+\"/returnCodebook\").pipe(map(data => {return data;}));\r\n  }\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {Doctor} from '../models/doctor';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserService} from './user.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DoctorService {\r\n\r\n  urlDoctor = environment.baseUrl + environment.doctor;\r\n  listDoctors: Array<Doctor> = new Array<Doctor>();\r\n  doctor:Doctor;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserService\r\n  ) { \r\n    this.getAllDoctors();\r\n  }\r\n\r\n  public newDoctor(doctor) {\r\n    return this.http.post(this.urlDoctor + '/register', doctor);\r\n  }\r\n\r\n  public loginDoctor(doctor) {\r\n    this.userService.setToken(doctor);\r\n    return this.http.post(environment.baseUrl + '/login', doctor, {responseType: 'text'});\r\n  }\r\n\r\n  public editDoctor(doctor){\r\n    return this.http.post(this.urlDoctor + '/edit', doctor,{responseType: 'text'});\r\n  }\r\n\r\n  public addDoctor(d: Doctor) {\r\n    if(this.getDoctor(d.email)===null){\r\n      this.listDoctors.push(d);\r\n    }\r\n  }\r\n\r\n  public getDoctor(email: string) {\r\n    if ( this.listDoctors.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listDoctors) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public setDoctor(p: Doctor) {\r\n\r\n    for (const p1 of this.listDoctors) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.number = p.number;\r\n        p1.surname = p.surname;\r\n        p1.password = p.password;\r\n        p1.address = p.address;\r\n        p1.city = p.city;\r\n        p1.country = p.country;\r\n        p1.specialization = p.specialization;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getAllDoctors(): Array<Doctor> {\r\n    this.http.get(this.urlDoctor + '/all').subscribe((data: Doctor[]) => {\r\n        for (const c of data) {\r\n          this.doctor = new Doctor(c.email,c.password,c.name,c.surname,c.number,c.address,c.city,c.country,c.specialization);\r\n          this.addDoctor(this.doctor);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.listDoctors;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Examination } from '../models/examination';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UserService } from './user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExaminationService {\r\n\r\n  url=environment.baseUrl+environment.examination;\r\n  listExaminations: Array<Examination> = new Array<Examination>();\r\n  examination:Examination;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserService\r\n  ) {\r\n    this.getAllExaminations();\r\n   }\r\n\r\n\r\n   public getAllExaminations(): Array<Examination> {\r\n    this.http.get(this.url + '/all').subscribe((data: Examination[]) => {\r\n      for (const c of data) {\r\n        this.examination = new Examination(c.id,c.kind,c.status,c.discount);\r\n        this.addExamination(this.examination);\r\n        console.log(this.examination);\r\n      }\r\n    },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listExaminations;\r\n  }\r\n\r\n  public addExamination(e: Examination) {\r\n    if (this.getExamination(e.id) === null) {\r\n      this.listExaminations.push(e);\r\n    }\r\n  }\r\n\r\n\r\n  public getExamination(id:number) {\r\n    if ( this.listExaminations.length === 0) {\r\n      return null;\r\n    }\r\n    for (const e of this.listExaminations) {\r\n      if ( e.id === id) {\r\n        return e;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { MedicalRecord } from '../models/medicalRecord';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MedicalRecordService {\r\n\r\n  url=environment.baseUrl+environment.medicalRecord;\r\n  record:MedicalRecord;\r\n  listRecords:Array<MedicalRecord>=new Array<MedicalRecord>();\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { \r\n    this.getAllRecords();\r\n  }\r\n\r\n\r\n\r\npublic getAllRecords(): Array<MedicalRecord> {\r\n  console.log(this.url);\r\n  this.http.get(this.url + '/all').subscribe((data: MedicalRecord[]) => {\r\n    for (const c of data) {\r\n      this.record = new MedicalRecord(c.height,c.weight,c.bloodType,c.allergies);\r\n      this.addRecord(this.record);\r\n      console.log(this.record);\r\n      console.log(c.allergies);\r\n    }\r\n  },\r\n    error => {\r\n      console.log(error);\r\n    }\r\n  );\r\n\r\n  return this.listRecords;\r\n}\r\n\r\npublic addRecord(e: MedicalRecord) {\r\n  if (this.getRecord(e.height) === null) {\r\n    this.listRecords.push(e);\r\n  }\r\n}\r\n\r\npublic getRecord(height:number) {\r\n  if ( this.listRecords.length === 0) {\r\n    return null;\r\n  }\r\n  for (const e of this.listRecords) {\r\n    if ( e.height === height ) {\r\n      return e;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport {Nurse} from '../models/nurse';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\n\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\n\r\n\r\nexport class NurseService{\r\n\r\n    urlNurse = environment.baseUrl + environment.nurse;\r\n    listNurses: Array<Nurse>= new Array<Nurse>();\r\n    nurse:Nurse;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllNurses();\r\n    }\r\n  \r\n    public newNurse(nurse) {\r\n      return this.http.post(this.urlNurse + '/register', nurse);    // da li treba ?\r\n    }\r\n  \r\n    public loginNurse(nurse) {\r\n      this.userService.setToken(nurse);\r\n      return this.http.post(environment.baseUrl + '/login', nurse, {responseType: 'text'});\r\n    }\r\n\r\n    public editNurse(nurse){\r\n      return this.http.post(this.urlNurse + '/edit', nurse,{responseType: 'text'});\r\n    }\r\n  \r\n    public addNurse(p: Nurse) {\r\n      if(this.getNurse(p.email)===null){\r\n        this.listNurses.push(p);\r\n      }\r\n    }\r\n  \r\n    public getNurse(email: string) {\r\n      if ( this.listNurses.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listNurses) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setNurse(p: Nurse) {\r\n\r\n      for (const p1 of this.listNurses) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n          p1.country = p.country;\r\n          p1.address = p.address;\r\n          p1.surname = p.surname;\r\n          p1.city = p.city;\r\n          p1.password = p.password;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    public getAllNurses(): Array<Nurse> {\r\n      this.http.get(this.urlNurse + '/all').subscribe((data: Nurse[]) => {\r\n          for (const c of data) {\r\n            this.nurse = new Nurse(c.email,c.password,c.name,c.surname,c.number,c.address,c.city,c.country);\r\n            this.addNurse(this.nurse);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listNurses;\r\n    }\r\n  \r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport {Patient} from '../models/patient';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\nimport { PatientStatus } from '../models/patientStatus';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\nexport class PatientService{\r\n\r\n    urlPatient = environment.baseUrl + environment.patient;\r\n    listPatients: Array<Patient>= new Array<Patient>();\r\n    patient:Patient;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllPatients();\r\n    }\r\n  \r\n    public newPatient(patient) {\r\n      return this.http.post(this.urlPatient + '/register', patient);\r\n    }\r\n  \r\n    public loginPatient(patient) {\r\n      this.userService.setToken(patient);\r\n      return this.http.post(environment.baseUrl + '/login', patient, {responseType: 'text'});\r\n    }\r\n\r\n    public editPatient(patient){\r\n      return this.http.post(this.urlPatient + '/edit', patient,{responseType: 'text'});\r\n    }\r\n  \r\n    public addPatient(p: Patient) {\r\n      if(this.getPatient(p.email)===null){\r\n        this.listPatients.push(p);\r\n      }\r\n    }\r\n  \r\n    public getPatient(email: string) {\r\n      if ( this.listPatients.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listPatients) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setPatient(p: Patient) {\r\n\r\n      for (const p1 of this.listPatients) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n          p1.country = p.country;\r\n          p1.address = p.address;\r\n          p1.surname = p.surname;\r\n          p1.city = p.city;\r\n          p1.password = p.password;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    public getAllPatients(): Array<Patient> {\r\n      this.http.get(this.urlPatient + '/all').subscribe((data: Patient[]) => {\r\n          for (const c of data) {\r\n            this.patient = new Patient(c.email,c.password,c.name,c.surname,c.number,c.address,c.city,c.country,c.insuranceID,c.status);\r\n            this.addPatient(this.patient);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listPatients;\r\n    }\r\n  \r\n\r\n}","import {User} from '../models/user'\r\nimport { Injectable } from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {Role} from '../models/role';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport { Nurse } from '../models/nurse';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\nexport const TOKEN='LoggedInUser';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class UserService{\r\n    urlUser = environment.baseUrl + environment.user;\r\n    users: Array<User>=new Array<User>();\r\n    user:User= new User('', '', Role.NONE);\r\n    u:User;\r\n    constructor(private router: Router, private http: HttpClient) {\r\n      this.getAllUsers();\r\n      localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n    }\r\n\r\n    public addUser(u: User){\r\n      if (this.getUser(u.email) === null) {\r\n        this.users.push(u);\r\n      }\r\n    }\r\n\r\n    \r\n  public getUser(email: string) {\r\n    if ( this.users.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.users) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n    public setToken(user){\r\n        this.user=user;\r\n        localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n\r\n    }\r\n\r\n    public isLoggedIn() {\r\n        if(localStorage.getItem(TOKEN)!==null){\r\n          return localStorage.getItem(TOKEN);\r\n        }else {\r\n          \r\n          return null;\r\n        }\r\n      }\r\n\r\n      public setUser(u: User) {\r\n\r\n        for (const p1 of this.users) {\r\n          if (p1.email === u.email) {\r\n            p1.password = u.password;\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n    public logout(){\r\n      this.router.navigate(['']);\r\n      this.user =  new User('', '', Role.NONE);\r\n      localStorage.removeItem(TOKEN);\r\n      localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n    }\r\n\r\n    public isNone() {\r\n      if (this.isLoggedIn()) {\r\n        return this.user.role === Role.NONE;\r\n      }\r\n    }\r\n    \r\n    public isPatient() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.PATIENT;\r\n        }\r\n      }\r\n\r\n      public isDoctor() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.DOCTOR;\r\n        }\r\n      }\r\n\r\n      public isNurse() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.NURSE;\r\n        }\r\n      }\r\n\r\n      public isCCAdmin() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.CCADMIN;\r\n        }\r\n      }\r\n\r\n\r\n      public getAllUsers(): Array<User> {\r\n        this.http.get(this.urlUser + '/all').subscribe((data: User[]) => {\r\n            for (const c of data) {\r\n                this.u = new User(c.email, c.password, this.whichRole(c.role.toString()));\r\n                this.addUser(this.u);\r\n            }\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }\r\n        );\r\n        console.log(this.users);\r\n        return this.users;\r\n      }\r\n\r\n      public whichRole(role: string) {\r\n        if (role === 'PATIENT') {\r\n          return Role.PATIENT;\r\n        } else if (role === 'DOCTOR') {\r\n          return  Role.DOCTOR;\r\n        } else if (role === 'NURSE') {\r\n          return  Role.NURSE;\r\n        } else if (role === 'CCADMIN') {\r\n          return  Role.CCADMIN;\r\n        } else {\r\n          console.log(\"ovde je null\");\r\n          return null;\r\n        }\r\n    \r\n      }\r\n\r\n\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  baseUrl: 'http://localhost:8080',\r\n  user: '/user',\r\n  patient: '/patient',\r\n  doctor: '/doctor',\r\n  nurse: '/nurse',\r\n  clinic: '/clinic',\r\n  examination: '/examination',\r\n  medicalRecord: '/medicalRecord',\r\n  clinicalCenterAdmininistrator: '/clinicalCenterAdministrator',\r\n  codebook: '/codebook',\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import 'hammerjs';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}
>>>>>>> Stashed changes
=======
{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.html","./src/app/components/allpatients-page/allpatients-page.component.html","./src/app/components/ccadmin-profile/ccadmin-profile.component.html","./src/app/components/clinic-search/clinic-search.component.html","./src/app/components/clinicadministrator-page/clinicadministrator-page.component.html","./src/app/components/clinicadministrator-profile/clinicadministrator-profile.component.html","./src/app/components/clinics-page/clinics-page.component.html","./src/app/components/codebook/codebook.component.html","./src/app/components/diagnose/diagnose.component.html","./src/app/components/doctor-page/doctor-page.component.html","./src/app/components/doctor-profile/doctor-profile.component.html","./src/app/components/login/login.component.html","./src/app/components/medical-history-page/medical-history-page.component.html","./src/app/components/medical-record-page/medical-record-page.component.html","./src/app/components/medicine/medicine.component.html","./src/app/components/nurse-page/nurse-page.component.html","./src/app/components/nurse-profile/nurse-profile.component.html","./src/app/components/nurse-vacation-req/nurse-vacation-req.component.html","./src/app/components/patient-doctor-search/patient-doctor-search.component.html","./src/app/components/patient-doctors-list/patient-doctors-list.component.html","./src/app/components/patient-page/patient-page.component.html","./src/app/components/patient-profile/patient-profile.component.html","./src/app/components/register-patient/register-patient.component.html","./src/app/components/vacation-request-register/vacation-request-register.component.html","./node_modules/tslib/tslib.es6.js","./src/app/app-routing.module.ts","./src/app/app.component.css","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/allpatients-page/allpatients-page.component.css","./src/app/components/allpatients-page/allpatients-page.component.ts","./src/app/components/ccadmin-profile/ccadmin-profile.component.css","./src/app/components/ccadmin-profile/ccadmin-profile.component.ts","./src/app/components/clinic-search/clinic-search.component.css","./src/app/components/clinic-search/clinic-search.component.ts","./src/app/components/clinicadministrator-page/clinicadministrator-page.component.css","./src/app/components/clinicadministrator-page/clinicadministrator-page.component.ts","./src/app/components/clinicadministrator-profile/clinicadministrator-profile.component.css","./src/app/components/clinicadministrator-profile/clinicadministrator-profile.component.ts","./src/app/components/clinics-page/clinics-page.component.css","./src/app/components/clinics-page/clinics-page.component.ts","./src/app/components/codebook-dto.ts","./src/app/components/codebook/codebook.component.css","./src/app/components/codebook/codebook.component.ts","./src/app/components/diagnose/diagnose.component.css","./src/app/components/diagnose/diagnose.component.ts","./src/app/components/doctor-page/doctor-page.component.css","./src/app/components/doctor-page/doctor-page.component.ts","./src/app/components/doctor-profile/doctor-profile.component.css","./src/app/components/doctor-profile/doctor-profile.component.ts","./src/app/components/login/login.component.css","./src/app/components/login/login.component.ts","./src/app/components/medical-history-page/medical-history-page.component.css","./src/app/components/medical-history-page/medical-history-page.component.ts","./src/app/components/medical-record-page/medical-record-page.component.css","./src/app/components/medical-record-page/medical-record-page.component.ts","./src/app/components/medicine/medicine.component.css","./src/app/components/medicine/medicine.component.ts","./src/app/components/nurse-page/nurse-page.component.css","./src/app/components/nurse-page/nurse-page.component.ts","./src/app/components/nurse-profile/nurse-profile.component.css","./src/app/components/nurse-profile/nurse-profile.component.ts","./src/app/components/nurse-vacation-req/nurse-vacation-req.component.css","./src/app/components/nurse-vacation-req/nurse-vacation-req.component.ts","./src/app/components/patient-doctor-search/patient-doctor-search.component.css","./src/app/components/patient-doctor-search/patient-doctor-search.component.ts","./src/app/components/patient-doctors-list/patient-doctors-list.component.css","./src/app/components/patient-doctors-list/patient-doctors-list.component.ts","./src/app/components/patient-page/patient-page.component.css","./src/app/components/patient-page/patient-page.component.ts","./src/app/components/patient-profile/patient-profile.component.css","./src/app/components/patient-profile/patient-profile.component.ts","./src/app/components/register-patient/register-patient.component.css","./src/app/components/register-patient/register-patient.component.ts","./src/app/components/vacation-request-register/vacation-request-register.component.css","./src/app/components/vacation-request-register/vacation-request-register.component.ts","./src/app/material-module.ts","./src/app/models/clinic.ts","./src/app/models/clinicAdministrator.ts","./src/app/models/clinicalCenterAdministrator.ts","./src/app/models/diagnose.ts","./src/app/models/doctor.ts","./src/app/models/examination.ts","./src/app/models/examinationKind.ts","./src/app/models/examinationStatus.ts","./src/app/models/examinationTable.ts","./src/app/models/examinationType.ts","./src/app/models/medicalRecord.ts","./src/app/models/medicine.ts","./src/app/models/nurse.ts","./src/app/models/patient.ts","./src/app/models/patientStatus.ts","./src/app/models/role.ts","./src/app/models/user.ts","./src/app/models/zahtev.ts","./src/app/models/zahtevStatus.ts","./src/app/services/clinic-administrator.service.ts","./src/app/services/clinic.service.ts","./src/app/services/clinicalCenterAdministrator.service.ts","./src/app/services/diagonse.service.ts","./src/app/services/doctor.service.ts","./src/app/services/examination-type.service.ts","./src/app/services/examination.service.ts","./src/app/services/medical-record.service.ts","./src/app/services/medicine.service.ts","./src/app/services/nurse.service.ts","./src/app/services/patient.service.ts","./src/app/services/user.service.ts","./src/app/services/vacation.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\r\\n    <mat-sidenav #drawer class=\\\"sidenav\\\" fixedInViewport [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\r\\n      [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\" [opened]=\\\"(isHandset$ | async) === true\\\">\\r\\n      <mat-toolbar>Menu</mat-toolbar>\\r\\n        <mat-nav-list *ngIf = \\\"isNone()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/login\\\">Login</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/register\\\">Register</a>\\r\\n        </mat-nav-list>\\r\\n  \\r\\n        <mat-nav-list *ngIf=\\\"isPatient()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/patient/profile\\\">Profile</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/medicalRecord\\\">Medical record</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/medicalHistory\\\">Medical history</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/clinics\\\">Clinics</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n  \\r\\n        <mat-nav-list *ngIf=\\\"isDoctor()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/doctor/profile\\\">Profile</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n\\r\\n        <mat-nav-list *ngIf=\\\"isClinicAdministrator()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/clinicAdministrator/profile\\\">Profile</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n\\r\\n        <mat-nav-list *ngIf=\\\"isNurse()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/nurse/profile\\\">Profile</a>\\r\\n          <a mat-list-item routerLink=\\\"/nurse/allpatients\\\">All patients</a>\\r\\n          <a mat-list-item routerLink=\\\"/nurse/VacationRequest\\\">Vacation request</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n\\r\\n        <mat-nav-list *ngIf=\\\"isCCAdmin()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/clinicalCenterAdministrator/profile\\\">Profile</a>\\r\\n          <a mat-list-item routerLink=\\\"/clinicalCenterAdministrator/addDiagnose\\\">Add Diagnose</a>\\r\\n          <a mat-list-item routerLink=\\\"/clinicalCenterAdministrator/addMedicine\\\">Add Medicine</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n    </mat-sidenav>\\r\\n    <mat-sidenav-content>\\r\\n      <mat-toolbar>\\r\\n        <button type=\\\"button\\\" aria-label=\\\"Toggle sidenav\\\" mat-icon-button (click)=\\\"drawer.toggle()\\\">\\r\\n          <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\r\\n        </button>\\r\\n        <span>Clinical Centre</span>\\r\\n      </mat-toolbar>\\r\\n      <!-- Add Content Here -->\\r\\n      <router-outlet></router-outlet>\\r\\n    </mat-sidenav-content>\\r\\n  </mat-sidenav-container>\"","export default \"<!-- page-header -->\\r\\n<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">All patients </h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"allpatientsDataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"name\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">\\r\\n                                    {{element.name}}\\r\\n                                </td>\\r\\n                            </ng-container>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"surname\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Surname </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.surname}} </td>\\r\\n                            </ng-container>\\r\\n\\r\\n                            <ng-container matColumnDef=\\\"address\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Address </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.address}} </td>\\r\\n                            </ng-container>\\r\\n\\r\\n\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                        <mat-paginator [pageSize]=itemsPerPage showFirstLastButtons></mat-paginator>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>{{selectedCCAdmin.name}} profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"ccadminForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" ccadminForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n            \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && ccadminForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && ccadminForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"ccadminForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"ccadminForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n  \\r\\n              \\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","export default \"<h2 mat-dialog-title>Dialog</h2>\\r\\n\\r\\n<mat-dialog-content [formGroup]=\\\"SearchClinicsGroup\\\">\\r\\n\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input matInput id=\\\"date\\\" [matDatepickerFilter]=\\\"myFilter\\\" [matDatepicker]=\\\"picker\\\" placeholder=\\\"Choose a date\\\">\\r\\n      <mat-datepicker-toggle matSuffix [for]=\\\"picker\\\"></mat-datepicker-toggle>\\r\\n      <mat-datepicker #picker></mat-datepicker>\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div>\\r\\n    <mat-form-field>\\r\\n      <mat-select id=\\\"type\\\" placeholder=\\\"Select examination type\\\">\\r\\n        <mat-option *ngFor=\\\"let examination_type of types\\\" value=\\\"option\\\">{{examination_type.label}}</mat-option>\\r\\n      </mat-select>\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n  <button class=\\\"mat-raised-button mat-primary\\\"(click)=\\\"save()\\\">Search</button>\\r\\n</mat-dialog-actions>\"","export default \"<h1>Welcome clinicadministrator!</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>Profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"clinicAdministratorProfileForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorProfileForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && clinicAdministratorProfileForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorProfileForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && clinicAdministratorProfileForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorProfileForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && clinicAdministratorProfileForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorProfileForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && clinicAdministratorProfileForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorProfileForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && clinicAdministratorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"clinic\\\">Clinic</label>\\r\\n                <input type=\\\"text\\\" id=\\\"clinic\\\" formControlName=\\\"clinic\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorProfileForm.get('clinic').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && clinicAdministratorProfileForm.get('clinic').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"clinicAdministratorProfileForm.get('clinic').errors['required']\\\">Clinic name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","export default \"\\r\\n<mat-form-field>\\r\\n  <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n</mat-form-field>\\r\\n<table mat-table\\r\\n       [dataSource]=\\\"clinicDataSource\\\" class=\\\"mat-elevation-z8\\\" matSort>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Name\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Clinic name </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Address\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Clinic address </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.address}} </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"ClinicRating\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Clinic rating </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\"> {{element.clinicRating}} </td>\\r\\n  </ng-container>\\r\\n  <div *ngIf=\\\"condition; then thenBlock else elseBlock\\\"></div>\\r\\n  <ng-template #elseBlock>\\r\\n    <ng-container matColumnDef=\\\"Price\\\">\\r\\n      <th  mat-header-cell *matHeaderCellDef> Price </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> 0 </td>\\r\\n    </ng-container>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-template #thenBlock>\\r\\n    <ng-container matColumnDef=\\\"Price\\\">\\r\\n      <th  mat-header-cell *matHeaderCellDef> Price </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> 0 </td>\\r\\n    </ng-container>\\r\\n  </ng-template>\\r\\n\\r\\n  <ng-container matColumnDef=\\\"Doctors\\\">\\r\\n    <th mat-header-cell *matHeaderCellDef> Doctors </th>\\r\\n    <td mat-cell *matCellDef=\\\"let element\\\">\\r\\n      <button mat-flat-button color=\\\"warn\\\" (click)=\\\"doctorList(element)\\\"> Doctors </button>\\r\\n    </td>\\r\\n  </ng-container>\\r\\n\\r\\n  <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n  <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n</table>\\r\\n<mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n<button mat-raised-button color=\\\"primary\\\" (click)=\\\"openDialog()\\\">Search</button>\"","export default \"<div class=\\\"row\\\">  \\r\\n    <div class=\\\"col\\\">\\r\\n            <div class=\\\"container\\\" style=\\\"width:40%\\\">\\r\\n                    <form [formGroup]=\\\"addMedicine\\\" style=\\\"text-align:center\\\"\\r\\n                        (ngSubmit)=\\\"addCodebookMedicine()\\\">\\r\\n                        <span class=\\\"text-nowrap\\\">Add medicine</span>\\r\\n                \\r\\n                        <div class=\\\"input-group mb-3\\\">\\r\\n                            <input class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"label\\\"\\r\\n                            id=\\\"label\\\" placeholder=\\\"Label\\\" \\r\\n                            formControlName=\\\"label\\\">\\r\\n                            <div class=\\\"input-group-append\\\">\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n                        </div>  \\r\\n                    </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n    <table  class=\\\"table\\\">  \\r\\n        <thead>  \\r\\n            <tr>  \\r\\n                    <th scope=\\\"col\\\">                 Id </th>\\r\\n                    <th scope=\\\"col\\\">                 Name </th> \\r\\n                    <th scope=\\\"col\\\"></th>\\r\\n            </tr>  \\r\\n        </thead>  \\r\\n        <tbody>  \\r\\n\\r\\n         \\r\\n\\r\\n             <tr *ngFor=\\\"let medicine of codebook.medicines\\\">  \\r\\n                <td>{{medicine.id}}</td>  \\r\\n                <td>{{medicine.label}}</td>  \\r\\n                <td><button (click)=\\\"deleteMedicine(medicine)\\\" class='btn btn-primary'>Delete</button>   \\r\\n                  \\r\\n                </td>  \\r\\n              </tr>   \\r\\n        </tbody><br>  \\r\\n    </table>  \\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"col\\\">\\r\\n            <div class=\\\"container\\\" style=\\\"width:40%\\\">\\r\\n                    <form [formGroup]=\\\"addDiagnose\\\" style=\\\"text-align:center\\\"\\r\\n                        (ngSubmit)=\\\"addCodebookDiagnose()\\\">\\r\\n                        <span class=\\\"text-nowrap\\\">Add diagnose</span>\\r\\n                \\r\\n                        <div class=\\\"input-group mb-3\\\">\\r\\n                            <input class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"title\\\"\\r\\n                            id=\\\"title\\\" placeholder=\\\"Title\\\" \\r\\n                            formControlName=\\\"title\\\">\\r\\n                            <div class=\\\"input-group-append\\\">\\r\\n                            <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\r\\n                        </div>  \\r\\n                    </div>\\r\\n                    </form>\\r\\n                </div>\\r\\n    <table class=\\\"table\\\">  \\r\\n        <thead>  \\r\\n            <tr>  \\r\\n                    <th scope=\\\"col\\\">            Diagnose ID</th>\\r\\n                    <th scope=\\\"col\\\">            Diagnose name</th> \\r\\n                    <th scope=\\\"col\\\"></th>  \\r\\n            </tr>  \\r\\n        </thead>  \\r\\n        <tbody>  \\r\\n             <tr *ngFor=\\\"let diagnose of codebook.diagnoses\\\">  \\r\\n                <td>{{diagnose.id}}</td>  \\r\\n                <td>{{diagnose.title}}</td>  \\r\\n                \\r\\n                <td><button (click)=\\\"deleteDiagnose(diagnose)\\\" class='btn btn-primary'>Delete</button>   \\r\\n                  \\r\\n                </td>  \\r\\n              </tr>   \\r\\n        </tbody><br>  \\r\\n    </table>\\r\\n</div>  \\r\\n\\r\\n\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>Add Diagnose</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"addDiagnoseForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"id\\\">ID</label>\\r\\n                <input type=\\\"text\\\" id=\\\"id\\\" formControlName=\\\"id\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && addDiagnoseForm.get('id').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && addDiagnoseForm.get('id').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"addDiagnoseForm.get('id').errors['required']\\\">Id is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"title\\\">Title</label>\\r\\n                <input type=\\\"text\\\" id=\\\"title\\\" formControlName=\\\"title\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && addDiagnoseForm.get('title').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && addDiagnoseForm.get('title').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"addDiagnoseForm.get('title').errors['required']\\\">Title is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"description\\\">Description</label>\\r\\n                <input type=\\\"text\\\" id=\\\"description\\\" formControlName=\\\"description\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && addDiagnoseForm.get('description').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && addDiagnoseForm.get('description').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"addDiagnoseForm.get('description').errors['required']\\\">Description is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <button mat-raised-button style=\\\"position: center\\\" color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  \\r\\n  <mat-form-field>\\r\\n    <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n  </mat-form-field>\\r\\n  <table mat-table\\r\\n         [dataSource]=\\\"dataSource\\\" multiTemplateDataRows\\r\\n         class=\\\"mat-elevation-z8\\\">\\r\\n    <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of displayedColumns\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\r\\n    </ng-container>\\r\\n  \\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let element; columns: displayedColumns;\\\"></tr>\\r\\n  </table>\\r\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n  \\r\\n  \"","export default \"<h1>WELCOME DOCTOR</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>Profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"doctorProfileForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <mat-label for=\\\"email\\\">Email</mat-label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" doctorProfileForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"workHoursFrom\\\">Work hours from</label>\\r\\n              <input type=\\\"number\\\" id=\\\"workHoursFrom\\\" formControlName=\\\"workHoursFrom\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['required']\\\">Work hours from is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['minlength']\\\">A work hours must have at least 2\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"workHoursTo\\\">Work hours to</label>\\r\\n              <input type=\\\"number\\\" id=\\\"workHoursTo\\\" formControlName=\\\"workHoursTo\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && doctorProfileForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && doctorProfileForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['required']\\\">Work hours to is required</div>\\r\\n                <div *ngIf=\\\"doctorProfileForm.get('number').errors['minlength']\\\">A work hours to must have at least 2\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n          </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\"","export default \"<div class=\\\"main-content\\\">\\r\\n        <div class=\\\"container\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n              <mat-card>\\r\\n                <h3>Login</h3>\\r\\n                <hr>\\r\\n                <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"email\\\">Email</label>\\r\\n                    <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\">\\r\\n                    <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\r\\n                      <div *ngIf=\\\"f.email.errors.email\\\">Email must be a valid email address</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\">\\r\\n                    <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\r\\n                      <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 8 characters long</div>\\r\\n                      <div *ngIf=\\\"f.password.errors.pattern\\\">Password must contain at least 1 lowercase, 1 uppercase letter and 1 number</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <a routerLink=\\\"/patient/register\\\">Don't have an account? Register here.</a>\\r\\n                  </div>\\r\\n      \\r\\n                  <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Login</button>\\r\\n      \\r\\n                </form>\\r\\n              </mat-card>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\"","export default \"<!-- page-header -->\\r\\n<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">History of examinations and operations</h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"kind\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Kind </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">{{element.kind}}</td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"clinic\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Clinic </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.clinic}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"doctor\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Doctors </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.doctors}} </td>\\r\\n                            </ng-container>\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                        <mat-paginator [pageSize]=itemsPerPage showFirstLastButtons></mat-paginator>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">Medical record</h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"Height\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Height </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">{{element.height}}</td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Weight\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Weight </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.weight}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"BloodType\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Blood Type </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.bloodType}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Allergies\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Allergies </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.allergies}} </td>\\r\\n                            </ng-container>\\r\\n                             <ng-container matColumnDef=\\\"ExaminationReports\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Examination Reports </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.reports} </td>\\r\\n                            </ng-container>\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        < class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>Profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"addMedicineForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <mat-label for=\\\"id\\\">ID</mat-label>\\r\\n                <input type=\\\"text\\\" id=\\\"id\\\" formControlName=\\\"id\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && addMedicineForm.get('id').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && addMedicineForm.get('id').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"addMedicineForm.get('id').errors['required']\\\">Email is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"description\\\">Description</label>\\r\\n                <input type=\\\"text\\\" id=\\\"description\\\" formControlName=\\\"description\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && addMedicineForm.get('description').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && addMedicineForm.get('description').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" addMedicineForm.get('description').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"title\\\">Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"title\\\" formControlName=\\\"title\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && addMedicineForm.get('title').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && addMedicineForm.get('title').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"addMedicineForm.get('title').errors['required']\\\">Password is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"strenght\\\">Strenght</label>\\r\\n                <input type=\\\"text\\\" id=\\\"strenght\\\" formControlName=\\\"strenght\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && addMedicineForm.get('strenght').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && addMedicineForm.get('strenght').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"addMedicineForm.get('strenght').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n            </form>\\r\\n        </mat-card>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  \\r\\n  \\r\\n  <mat-form-field>\\r\\n    <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n  </mat-form-field>\\r\\n  <table mat-table\\r\\n         [dataSource]=\\\"dataSource\\\" multiTemplateDataRows\\r\\n         class=\\\"mat-elevation-z8\\\">\\r\\n    <ng-container matColumnDef=\\\"{{column}}\\\" *ngFor=\\\"let column of displayedColumns\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> {{column}} </th>\\r\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element[column]}} </td>\\r\\n    </ng-container>\\r\\n  \\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let element; columns: displayedColumns;\\\"></tr>\\r\\n  </table>\\r\\n  <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n  \"","export default \"<h1>WELCOME NURSE</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>{{selectedNurse.name}} profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"nurseForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"email\\\">Email</label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" nurseForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"address\\\">Address</label>\\r\\n              <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('address').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('address').errors['required']\\\">Address is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"city\\\">City</label>\\r\\n              <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\"  class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('city').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('city').errors['required']\\\">City is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"country\\\">Country</label>\\r\\n              <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('country').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('country').errors['required']\\\">Country is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <!-- <div class=\\\"form-group\\\">\\r\\n               <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n               <input type=\\\"text\\\" readonly=\\\"readonly\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\"  class=\\\"form-control\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': submitted &&  patientForm.get('insuranceID').errors }\\\" />\\r\\n               <div *ngIf=\\\"submitted && patientForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                 <div *ngIf=\\\"patientForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                 </div>\\r\\n                 <div\\r\\n                   *ngIf=\\\"patientForm.get('insuranceID').errors['minlength'] ||patientForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                   Health\\r\\n                   Insurance ID must contain exactly 13 characters</div>\\r\\n               </div>\\r\\n             </div> -->\\r\\n\\r\\n\\r\\n\\r\\n             <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n           </form>\\r\\n         </mat-card>\\r\\n       </div>\\r\\n     </div>\\r\\n   </div>\\r\\n </div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>Nurse Vacation request</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"vacationRequestForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('email').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && vacationRequestForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('name').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && vacationRequestForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('name').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('name').errors['name']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Surname</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && vacationRequestForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('surname').errors['surname']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"startingDate\\\">StartingDate</label>\\r\\n                <input type=\\\"text\\\" id=\\\"startingDate\\\" formControlName=\\\"startingDate\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('startingDate').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && vacationRequestForm.get('startingDate').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('startingDate').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"finishDate\\\">FinishDate</label>\\r\\n                <input type=\\\"text\\\" id=\\\"finishDate\\\" formControlName=\\\"finishDate\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && vacationRequestForm.get('finishDate').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && vacationRequestForm.get('finishDate').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"vacationRequestForm.get('finishDate').errors['required']\\\">Phone Number is required</div>\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n              <button mat-raised-button style=\\\"position: center\\\" color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  \"","export default \"<h2 mat-dialog-title>Search for doctors</h2>\\r\\n<mat-dialog-content [formGroup]=\\\"SearchDoctorGroup\\\">\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" id=\\\"name\\\" formControlName=\\\"name\\\" matInput placeholder=\\\"Doctor name\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" matInput placeholder=\\\"Doctor surname\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n  <div>\\r\\n    <mat-form-field class=\\\"example-full-width\\\">\\r\\n      <input required=\\\"required\\\" id=\\\"rating\\\" formControlName=\\\"rating\\\" matInput placeholder=\\\"Doctor rating\\\">\\r\\n    </mat-form-field>\\r\\n  </div>\\r\\n\\r\\n</mat-dialog-content>\\r\\n<mat-dialog-actions>\\r\\n  <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n  <button class=\\\"mat-raised-button mat-primary\\\"(click)=\\\"save()\\\">Save</button>\\r\\n</mat-dialog-actions>\"","export default \"\\r\\n    <mat-form-field>\\r\\n        <input matInput (keyup)=\\\"applyFilter($event.target.value)\\\" placeholder=\\\"Filter\\\">\\r\\n      </mat-form-field>\\r\\n      <table mat-table\\r\\n             [dataSource]=\\\"doctorDataSource\\\" class=\\\"mat-elevation-z8\\\" matSort>\\r\\n  \\r\\n        <ng-container matColumnDef=\\\"Name\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> Doctor name </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.name}} </td>\\r\\n        </ng-container>\\r\\n  \\r\\n        <ng-container matColumnDef=\\\"Surname\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> Doctor surname </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.surname}} </td>\\r\\n        </ng-container>\\r\\n  \\r\\n        <ng-container matColumnDef=\\\"DoctorRating\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> Doctor rating </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.doctorRating}} </td>\\r\\n        </ng-container>\\r\\n  \\r\\n        <ng-container matColumnDef=\\\"Price\\\">\\r\\n          <th mat-header-cell *matHeaderCellDef> Price </th>\\r\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.specialized.price}} </td>\\r\\n        </ng-container>\\r\\n  \\r\\n  \\r\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n      </table>\\r\\n      <mat-paginator [pageSizeOptions]=\\\"[5, 10, 20]\\\" showFirstLastButtons></mat-paginator>\\r\\n      <button mat-raised-button color=\\\"primary\\\" (click)=\\\"searchDoctors()\\\">Search</button>\\r\\n      <mat-dialog-actions>\\r\\n        <button class=\\\"mat-raised-button\\\"(click)=\\\"close()\\\">Close</button>\\r\\n      </mat-dialog-actions>\"","export default \"<h1>WELCOME</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>{{selectedPatient.name}} profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"patientForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && patientForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" patientForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Address</label>\\r\\n                <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('address').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('address').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('city').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('city').errors['required']\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('country').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('country').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n                <input type=\\\"text\\\" readonly=\\\"readonly\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted &&  patientForm.get('insuranceID').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                  </div>\\r\\n                  <div\\r\\n                    *ngIf=\\\"patientForm.get('insuranceID').errors['minlength'] ||patientForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                    Health\\r\\n                    Insurance ID must contain exactly 13 characters</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              \\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>Registration</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && registerForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" registerForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Address</label>\\r\\n                <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('address').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('address').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('city').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('city').errors['required']\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('country').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('country').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n                <input type=\\\"text\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted &&  registerForm.get('insuranceID').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                  </div>\\r\\n                  <div\\r\\n                    *ngIf=\\\"registerForm.get('insuranceID').errors['minlength'] ||registerForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                    Health\\r\\n                    Insurance ID must contain exactly 13 characters</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <a routerLink=\\\"/patient/login\\\">Already have an account? Login here.</a>\\r\\n              </div>\\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Register</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","export default \"<table mat-table [dataSource]=\\\"RequestsDataSource\\\" class=\\\"mat-elevation-z8\\\">\\r\\n\\r\\n    <ng-container matColumnDef=\\\"email\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> email </th>\\r\\n      <td mat-cell *matCellDef=\\\"let zahtev\\\"> {{zahtev.email}} </td>\\r\\n    </ng-container>\\r\\n  \\r\\n    <ng-container matColumnDef=\\\"startingDate\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> startingDate </th>\\r\\n      <td mat-cell *matCellDef=\\\"let zahtev\\\"> {{zahtev.startingDate}} </td>\\r\\n    </ng-container>\\r\\n  \\r\\n    <ng-container matColumnDef=\\\"finishDate\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> finishDate </th>\\r\\n      <td mat-cell *matCellDef=\\\"let zahtev\\\"> {{zahtev.finishDate}} </td>\\r\\n    </ng-container>\\r\\n  \\r\\n    <ng-container matColumnDef=\\\"approving\\\">\\r\\n      <th mat-header-cell *matHeaderCellDef> Approving </th>\\r\\n      <td mat-cell *matCellDef=\\\"let zahtev\\\">\\r\\n        <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\" (click)=\\\"onAccept(zahtev)\\\">Accept</button>\\r\\n        <button mat-raised-button color=\\\"warn\\\" class=\\\"pull-right\\\">Decline</button>\\r\\n      </td>\\r\\n    </ng-container>\\r\\n  \\r\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\r\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n  </table>\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {LoginComponent} from './components/login/login.component'\r\nimport {RegisterPatientComponent} from './components/register-patient/register-patient.component'\r\nimport {PatientPageComponent} from './components/patient-page/patient-page.component'\r\nimport { DoctorPageComponent } from './components/doctor-page/doctor-page.component';\r\nimport {PatientProfileComponent} from './components/patient-profile/patient-profile.component'\r\nimport { MedicalRecordPageComponent } from './components/medical-record-page/medical-record-page.component';\r\nimport { MedicalHistoryPageComponent } from './components/medical-history-page/medical-history-page.component';\r\nimport { ClinicsPageComponent } from './components/clinics-page/clinics-page.component';\r\nimport { DoctorProfileComponent } from './components/doctor-profile/doctor-profile.component';\r\nimport {NursePageComponent} from './components/nurse-page/nurse-page.component';\r\nimport {NurseProfileComponent} from './components/nurse-profile/nurse-profile.component';\r\nimport {CCAdminProfileComponent} from './components/ccadmin-profile/ccadmin-profile.component';\r\nimport {AllPatientsPageComponent} from './components/allpatients-page/allpatients-page.component';\r\nimport { CodebookComponent} from './components/codebook/codebook.component';\r\nimport { ClinicadministratorPageComponent } from './components/clinicadministrator-page/clinicadministrator-page.component';\r\nimport { ClinicadministratorProfileComponent } from './components/clinicadministrator-profile/clinicadministrator-profile.component';\r\nimport {NurseVacationRequestComponent} from './components/nurse-vacation-req/nurse-vacation-req.component';\r\nimport { VacationRequestRegisterComponent } from './components/vacation-request-register/vacation-request-register.component';\r\nimport {DiagnoseComponent} from './components/diagnose/diagnose.component';\r\nimport {MedicineComponent} from './components/medicine/medicine.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'patient/register',\r\n    component: RegisterPatientComponent,\r\n  },\r\n  {\r\n    path: 'patient/home',\r\n    component: PatientPageComponent,\r\n  },\r\n  {\r\n    path:'doctor/home',\r\n    component: DoctorPageComponent\r\n  },\r\n  {\r\n    path:'doctor/profile',\r\n    component: DoctorProfileComponent\r\n  },\r\n  {\r\n    path:'clinicAdministrator/home',\r\n    component: ClinicadministratorPageComponent\r\n  },\r\n  {\r\n    path:'clinicAdministrator/profile',\r\n    component: ClinicadministratorProfileComponent\r\n  },\r\n  {\r\n    path:'clinicalCenterAdministrator/profile',\r\n    component: CCAdminProfileComponent\r\n  },\r\n\r\n  {\r\n    path:'clinicalCenterAdministrator/VacationRequests',\r\n    component: VacationRequestRegisterComponent\r\n  },\r\n  {\r\n    path:'clinicalCenterAdministrator/codebook',\r\n    component: CodebookComponent\r\n  },\r\n  {\r\n    path:'nurse/home',\r\n    component: NursePageComponent\r\n  },\r\n  {\r\n    path:'nurse/profile',\r\n    component: NurseProfileComponent\r\n  },{\r\n    path:'nurse/allpatients',\r\n    component: AllPatientsPageComponent\r\n  },\r\n  {\r\n    path: 'nurse/VacationRequest',\r\n    component: NurseVacationRequestComponent,\r\n  },\r\n  {\r\n    path:'patient/profile',\r\n    component: PatientProfileComponent\r\n  },{\r\n    path:'patient/medicalRecord',\r\n    component: MedicalRecordPageComponent\r\n  },{\r\n    path:'patient/medicalHistory',\r\n    component: MedicalHistoryPageComponent\r\n  },{\r\n    path:'patient/clinics',\r\n    component: ClinicsPageComponent\r\n  },\r\n  {\r\n    path: 'clinicalCenterAdministrator/addDiagnose',\r\n    component: DiagnoseComponent,\r\n  },\r\n  {\r\n    path: 'clinicalCenterAdministrator/addMedicine',\r\n    component: MedicineComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","export default \".example-full-width {\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .main-content {\\r\\n    margin: 20px 0;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0VBQ2I7O0VBRUE7SUFDRSxjQUFjO0VBQ2hCIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXhhbXBsZS1mdWxsLXdpZHRoIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICBcclxuICAubWFpbi1jb250ZW50IHtcclxuICAgIG1hcmdpbjogMjBweCAwO1xyXG4gIH0iXX0= */\"","import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport {UserService} from '../app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver,\r\n    private userService:UserService) { }\r\n\r\n  public isLoggedIn() {\r\n    return this.userService.isLoggedIn();\r\n  }\r\n\r\n  public isNone(){\r\n    return this.userService.isNone();\r\n  }\r\n\r\n  public isPatient() {\r\n    return this.userService.isPatient();\r\n  }\r\n\r\n  public isDoctor() {\r\n    return this.userService.isDoctor();\r\n  }\r\n\r\n  public isClinicAdministrator() {\r\n    return this.userService.isClinicAdministrator();\r\n  }\r\n\r\n  public isNurse() {\r\n    return this.userService.isNurse();\r\n  }\r\n  \r\n  public isCCAdmin() {\r\n    return this.userService.isCCAdmin();\r\n  }\r\n  public onLogout() {\r\n    this.userService.logout();\r\n  }\r\n\r\n}\r\n\r\n","\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule, MatCardModule, MatFormFieldModule, MatInputModule } from '@angular/material';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport {DemoMaterialModule} from './material-module';\r\n\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegisterPatientComponent } from './components/register-patient/register-patient.component';\r\nimport { PatientPageComponent } from './components/patient-page/patient-page.component';\r\nimport { DoctorPageComponent } from './components/doctor-page/doctor-page.component';\r\nimport { PatientProfileComponent } from './components/patient-profile/patient-profile.component';\r\nimport { DoctorProfileComponent } from './components/doctor-profile/doctor-profile.component';\r\nimport { MedicalRecordPageComponent } from './components/medical-record-page/medical-record-page.component';\r\nimport { MedicalHistoryPageComponent } from './components/medical-history-page/medical-history-page.component';\r\nimport { ClinicsPageComponent } from './components/clinics-page/clinics-page.component';\r\nimport {NursePageComponent} from './components/nurse-page/nurse-page.component';\r\nimport {NurseProfileComponent} from './components/nurse-profile/nurse-profile.component';\r\n\r\nimport { ClinicSearchComponent } from './components/clinic-search/clinic-search.component';\r\nimport { PatientDoctorsListComponent } from './components/patient-doctors-list/patient-doctors-list.component';\r\nimport { PatientDoctorSearchComponent } from './components/patient-doctor-search/patient-doctor-search.component';\r\n\r\nimport { CCAdminProfileComponent } from './components/ccadmin-profile/ccadmin-profile.component';\r\nimport { AllPatientsPageComponent } from './components/allpatients-page/allpatients-page.component';\r\n\r\nimport { CodebookComponent } from './components/codebook/codebook.component';\r\nimport { ClinicadministratorPageComponent } from './components/clinicadministrator-page/clinicadministrator-page.component';\r\nimport { ClinicadministratorProfileComponent } from './components/clinicadministrator-profile/clinicadministrator-profile.component';\r\nimport { NurseVacationRequestComponent } from './components/nurse-vacation-req/nurse-vacation-req.component';\r\nimport { VacationRequestRegisterComponent } from './components/vacation-request-register/vacation-request-register.component';\r\nimport { MedicineComponent } from './components/medicine/medicine.component';\r\nimport { DiagnoseComponent } from './components/diagnose/diagnose.component';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterPatientComponent,\r\n    PatientPageComponent,\r\n    DoctorPageComponent,\r\n    PatientProfileComponent,\r\n    DoctorProfileComponent,\r\n    MedicalRecordPageComponent,\r\n    MedicalHistoryPageComponent,\r\n    ClinicsPageComponent,\r\n    NursePageComponent,\r\n    NurseProfileComponent,\r\n    NurseVacationRequestComponent,\r\n    ClinicSearchComponent,\r\n    PatientDoctorsListComponent,\r\n    PatientDoctorSearchComponent,\r\n    CodebookComponent,\r\n    CCAdminProfileComponent,\r\n    AllPatientsPageComponent,\r\n    ClinicadministratorPageComponent,\r\n    ClinicadministratorProfileComponent,\r\n    VacationRequestRegisterComponent,\r\n    MedicineComponent, \r\n    DiagnoseComponent,\r\n\r\n\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    ToastrModule.forRoot({\r\n      timeOut: 2000,\r\n      positionClass: 'toast-top-right',\r\n      preventDuplicates: true,\r\n    }),\r\n    LayoutModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    MatNativeDateModule,\r\n    DemoMaterialModule,\r\n  ],\r\n  entryComponents: [\r\n\r\n    ClinicSearchComponent,\r\n    PatientDoctorsListComponent,\r\n    PatientDoctorSearchComponent,\r\n    NurseVacationRequestComponent,\r\n    CCAdminProfileComponent,\r\n    AllPatientsPageComponent,\r\n    VacationRequestRegisterComponent,\r\n    MedicineComponent, \r\n    DiagnoseComponent,\r\n\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWxscGF0aWVudHMtcGFnZS9hbGxwYXRpZW50cy1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Patient } from 'src/app/models/patient';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { PatientService } from 'src/app/services/patient.service';   // nemam za sve pacijente?\r\n\r\n@Component({\r\n  selector: 'app-allpatients-page',\r\n  templateUrl: './allpatients-page.component.html',\r\n  styleUrls: ['./allpatients-page.component.css']\r\n})\r\nexport class AllPatientsPageComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['name', 'surname', 'address'];\r\n  patient: Patient;\r\n  allpatientsDataSource = new MatTableDataSource<Patient>();\r\n  allpatients: Array<Patient> = new Array<Patient>();\r\n  \r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private patientService: PatientService\r\n  ) {\r\n    this.allpatients=this.patientService.getAllPatients();\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n\r\n  }\r\n\r\n  all() {\r\n      this.allpatientsDataSource = new MatTableDataSource(this.patientService.getAllPatients());\r\n      this.allpatientsDataSource.paginator = this.paginator;\r\n  }\r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2NhZG1pbi1wcm9maWxlL2NjYWRtaW4tcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ClinicalCenterAdministrator } from '../../models/clinicalCenterAdministrator';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { ClinicalCenterAdministratorService } from '../../services/clinicalCenterAdministrator.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-ccadmin-profile',\r\n  templateUrl: './ccadmin-profile.component.html',\r\n  styleUrls: ['./ccadmin-profile.component.css']\r\n})\r\nexport class CCAdminProfileComponent implements OnInit {\r\n\r\n  ccadminForm: FormGroup;\r\n  submitted = false;\r\n  selectedCCAdmin: ClinicalCenterAdministrator;\r\n  user:User;\r\n  clinicalCenterAdministrator:ClinicalCenterAdministrator;\r\n\r\n  constructor(\r\n    private ccadminService: ClinicalCenterAdministratorService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedCCAdmin=ccadminService.getCCAdmin(this.user.email);\r\n    console.log(this.selectedCCAdmin);\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.ccadminForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedCCAdmin.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedCCAdmin.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedCCAdmin.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedCCAdmin.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedCCAdmin.number, [Validators.required, Validators.minLength(9)]),\r\n     });\r\n  }\r\n\r\n  get f() {\r\n    return this.ccadminForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.ccadminForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.clinicalCenterAdministrator = new ClinicalCenterAdministrator(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.CCADMIN);\r\n    \r\n    this.editClinicalCenterAdministrator();\r\n    \r\n  }\r\n\r\n    public editClinicalCenterAdministrator(){\r\n      this.ccadminService.editCCAdmin(this.clinicalCenterAdministrator).subscribe(\r\n        data => {\r\n          this.userService.setUser(this.user);\r\n          this.ccadminService.setCCAdmin(this.clinicalCenterAdministrator);\r\n          this.router.navigate(['/clinicalCenterAdministrator/profile']);\r\n        },\r\n        error => {\r\n          alert('Error edit clinical center administrator');\r\n        }\r\n      );\r\n    }\r\n\r\n \r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljLXNlYXJjaC9jbGluaWMtc2VhcmNoLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { ExaminationType } from 'src/app/models/examinationType';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\nimport { ExaminationTypeService } from 'src/app/services/examination-type.service';\r\n\r\n@Component({\r\n  selector: 'app-clinic-search',\r\n  templateUrl: './clinic-search.component.html',\r\n  styleUrls: ['./clinic-search.component.css']\r\n})\r\nexport class ClinicSearchComponent implements OnInit {\r\n\r\n  SearchClinicsGroup: FormGroup;\r\n  types: Array<ExaminationType> = new Array<ExaminationType>();\r\n  myFilter = (d: Date): boolean => {\r\n    const day = d.getDay();\r\n    // Subota i nedelja se ne radi.\r\n    return day !== 0 && day !== 6;\r\n  }\r\n\r\n  constructor(private formBuilder: FormBuilder, private examinationTypeService: ExaminationTypeService , private dialogRef: MatDialogRef<ClinicSearchComponent>,\r\n              @Inject(MAT_DIALOG_DATA) data) {\r\n    this.types = examinationTypeService.getAllTypes();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.SearchClinicsGroup = this.formBuilder.group({\r\n      date: new FormControl('', [Validators.required]),\r\n      type: new FormControl('', [Validators.required]),\r\n    });\r\n  }\r\n  get f() {\r\n    return this.SearchClinicsGroup.controls;\r\n  }\r\n\r\n  save() {\r\n    this.dialogRef.close(this.SearchClinicsGroup.value);\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljYWRtaW5pc3RyYXRvci1wYWdlL2NsaW5pY2FkbWluaXN0cmF0b3ItcGFnZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-clinicadministrator-page',\r\n  templateUrl: './clinicadministrator-page.component.html',\r\n  styleUrls: ['./clinicadministrator-page.component.css']\r\n})\r\nexport class ClinicadministratorPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljYWRtaW5pc3RyYXRvci1wcm9maWxlL2NsaW5pY2FkbWluaXN0cmF0b3ItcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { ClinicAdministrator } from 'src/app/models/clinicAdministrator';\r\nimport { User } from 'src/app/models/user';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { Router } from '@angular/router';\r\nimport { ClinicAdministratorService } from 'src/app/services/clinic-administrator.service';\r\nimport { Role } from 'src/app/models/role';\r\n\r\n@Component({\r\n  selector: 'app-clinicadministrator-profile',\r\n  templateUrl: './clinicadministrator-profile.component.html',\r\n  styleUrls: ['./clinicadministrator-profile.component.css']\r\n})\r\nexport class ClinicadministratorProfileComponent implements OnInit {\r\n\r\n  clinicAdministratorProfileForm: FormGroup;\r\n  submitted = false;\r\n  clinicAdministrator: ClinicAdministrator;\r\n  selectedClinicAdministrator: ClinicAdministrator;\r\n  user: User;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private clinicAdministratorService: ClinicAdministratorService,\r\n               private  userService: UserService) {\r\n    this.user = JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedClinicAdministrator = clinicAdministratorService.getClinicAdministrator(this.user.email);\r\n    console.log(this.selectedClinicAdministrator);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.clinicAdministratorProfileForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedClinicAdministrator.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedClinicAdministrator.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedClinicAdministrator.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedClinicAdministrator.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedClinicAdministrator.number, [Validators.required, Validators.minLength(9)]),\r\n      clinic: new FormControl(this.selectedClinicAdministrator.clinic, [Validators.required]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.clinicAdministratorProfileForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.clinicAdministratorProfileForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.clinicAdministrator = new ClinicAdministrator(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.clinic.value,\r\n    );\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.CLINICADMINISTRATOR);\r\n\r\n    this.editClinicAdministrator();\r\n  }\r\n\r\n  private editClinicAdministrator() {\r\n    this.clinicAdministratorService.editClinicAdministrator(this.clinicAdministrator).subscribe(\r\n      data => {\r\n        this.userService.setUser(this.user);\r\n        this.clinicAdministratorService.setClinicAdministrator(this.clinicAdministrator);\r\n        this.router.navigate(['/clinicAdministrator/home']);\r\n        console.log('uspesno');\r\n      },\r\n      error => {\r\n        alert('Error edit clinicAdministrator');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","export default \"div {\\r\\n    width: 100%;\\r\\n  \\r\\n  }\\r\\n  \\r\\n  table {\\r\\n    width: 75%;\\r\\n    margin-top:50px;\\r\\n    margin-left:300px;\\r\\n  \\r\\n  }\\r\\n  \\r\\n  .mat-form-field {\\r\\n    font-size: 14px;\\r\\n    margin-top:50px;\\r\\n    margin-left:300px;\\r\\n    width: 75%;\\r\\n  }\\r\\n  \\r\\n  mat-paginator {\\r\\n    width: 75%;\\r\\n    margin-left:300px;\\r\\n  }\\r\\n  \\r\\n  tr.example-detail-row {\\r\\n    height: 0;\\r\\n  }\\r\\n  \\r\\n  tr.example-element-row:not(.example-expanded-row):hover {\\r\\n    background: #777;\\r\\n  }\\r\\n  \\r\\n  tr.example-element-row:not(.example-expanded-row):active {\\r\\n    background: #efefef;\\r\\n  }\\r\\n  \\r\\n  .example-element-row td {\\r\\n    border-bottom-width: 0;\\r\\n  }\\r\\n  \\r\\n  .example-element-detail {\\r\\n    overflow: hidden;\\r\\n    display: -webkit-box;\\r\\n    display: flex;\\r\\n  }\\r\\n  \\r\\n  .example-element-diagram {\\r\\n    min-width: 80px;\\r\\n    border: 2px solid black;\\r\\n    padding: 8px;\\r\\n    font-weight: lighter;\\r\\n    margin: 8px 0;\\r\\n    height: 104px;\\r\\n  }\\r\\n  \\r\\n  .example-element-name {\\r\\n    font-weight: bold;\\r\\n    font-size: 40px;\\r\\n    line-height: normal;\\r\\n  }\\r\\n  \\r\\n  .example-element-description {\\r\\n    padding: 16px;\\r\\n  }\\r\\n  \\r\\n  .example-element-description-attribution {\\r\\n    opacity: 0.5;\\r\\n  }\\r\\n  \\r\\n  .mat-raised-button {\\r\\n    margin-left:300px;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9jbGluaWNzLXBhZ2UvY2xpbmljcy1wYWdlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXOztFQUViOztFQUVBO0lBQ0UsVUFBVTtJQUNWLGVBQWU7SUFDZixpQkFBaUI7O0VBRW5COztFQUNBO0lBQ0UsZUFBZTtJQUNmLGVBQWU7SUFDZixpQkFBaUI7SUFDakIsVUFBVTtFQUNaOztFQUNBO0lBQ0UsVUFBVTtJQUNWLGlCQUFpQjtFQUNuQjs7RUFFQTtJQUNFLFNBQVM7RUFDWDs7RUFFQTtJQUNFLGdCQUFnQjtFQUNsQjs7RUFFQTtJQUNFLG1CQUFtQjtFQUNyQjs7RUFFQTtJQUNFLHNCQUFzQjtFQUN4Qjs7RUFFQTtJQUNFLGdCQUFnQjtJQUNoQixvQkFBYTtJQUFiLGFBQWE7RUFDZjs7RUFFQTtJQUNFLGVBQWU7SUFDZix1QkFBdUI7SUFDdkIsWUFBWTtJQUNaLG9CQUFvQjtJQUNwQixhQUFhO0lBQ2IsYUFBYTtFQUNmOztFQUVBO0lBQ0UsaUJBQWlCO0lBQ2pCLGVBQWU7SUFDZixtQkFBbUI7RUFDckI7O0VBRUE7SUFDRSxhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxZQUFZO0VBQ2Q7O0VBQ0E7SUFDRSxpQkFBaUI7RUFDbkIiLCJmaWxlIjoic3JjL2FwcC9jb21wb25lbnRzL2NsaW5pY3MtcGFnZS9jbGluaWNzLXBhZ2UuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbImRpdiB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICBcclxuICB9XHJcbiAgXHJcbiAgdGFibGUge1xyXG4gICAgd2lkdGg6IDc1JTtcclxuICAgIG1hcmdpbi10b3A6NTBweDtcclxuICAgIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG4gIFxyXG4gIH1cclxuICAubWF0LWZvcm0tZmllbGQge1xyXG4gICAgZm9udC1zaXplOiAxNHB4O1xyXG4gICAgbWFyZ2luLXRvcDo1MHB4O1xyXG4gICAgbWFyZ2luLWxlZnQ6MzAwcHg7XHJcbiAgICB3aWR0aDogNzUlO1xyXG4gIH1cclxuICBtYXQtcGFnaW5hdG9yIHtcclxuICAgIHdpZHRoOiA3NSU7XHJcbiAgICBtYXJnaW4tbGVmdDozMDBweDtcclxuICB9XHJcbiAgXHJcbiAgdHIuZXhhbXBsZS1kZXRhaWwtcm93IHtcclxuICAgIGhlaWdodDogMDtcclxuICB9XHJcbiAgXHJcbiAgdHIuZXhhbXBsZS1lbGVtZW50LXJvdzpub3QoLmV4YW1wbGUtZXhwYW5kZWQtcm93KTpob3ZlciB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjNzc3O1xyXG4gIH1cclxuICBcclxuICB0ci5leGFtcGxlLWVsZW1lbnQtcm93Om5vdCguZXhhbXBsZS1leHBhbmRlZC1yb3cpOmFjdGl2ZSB7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZWZlZmVmO1xyXG4gIH1cclxuICBcclxuICAuZXhhbXBsZS1lbGVtZW50LXJvdyB0ZCB7XHJcbiAgICBib3JkZXItYm90dG9tLXdpZHRoOiAwO1xyXG4gIH1cclxuICBcclxuICAuZXhhbXBsZS1lbGVtZW50LWRldGFpbCB7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICB9XHJcbiAgXHJcbiAgLmV4YW1wbGUtZWxlbWVudC1kaWFncmFtIHtcclxuICAgIG1pbi13aWR0aDogODBweDtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkIGJsYWNrO1xyXG4gICAgcGFkZGluZzogOHB4O1xyXG4gICAgZm9udC13ZWlnaHQ6IGxpZ2h0ZXI7XHJcbiAgICBtYXJnaW46IDhweCAwO1xyXG4gICAgaGVpZ2h0OiAxMDRweDtcclxuICB9XHJcbiAgXHJcbiAgLmV4YW1wbGUtZWxlbWVudC1uYW1lIHtcclxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xyXG4gICAgZm9udC1zaXplOiA0MHB4O1xyXG4gICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcclxuICB9XHJcbiAgXHJcbiAgLmV4YW1wbGUtZWxlbWVudC1kZXNjcmlwdGlvbiB7XHJcbiAgICBwYWRkaW5nOiAxNnB4O1xyXG4gIH1cclxuICBcclxuICAuZXhhbXBsZS1lbGVtZW50LWRlc2NyaXB0aW9uLWF0dHJpYnV0aW9uIHtcclxuICAgIG9wYWNpdHk6IDAuNTtcclxuICB9XHJcbiAgLm1hdC1yYWlzZWQtYnV0dG9uIHtcclxuICAgIG1hcmdpbi1sZWZ0OjMwMHB4O1xyXG4gIH0iXX0= */\"","import { Component, OnInit, ViewChild, Input } from '@angular/core';\r\nimport { Clinic } from 'src/app/models/clinic';\r\nimport { MatTableDataSource, MatPaginator, MatDialog } from '@angular/material';\r\nimport { ClinicService } from 'src/app/services/clinic.service';\r\nimport { Doctor } from 'src/app/models/doctor';\r\nimport { trigger, state, transition, style, animate } from '@angular/animations';\r\nimport { DoctorService } from 'src/app/services/doctor.service';\r\nimport { ClinicSearchComponent } from '../clinic-search/clinic-search.component';\r\nimport { PatientDoctorsListComponent } from '../patient-doctors-list/patient-doctors-list.component';\r\n\r\n@Component({\r\n  selector: 'app-clinics-page',\r\n  templateUrl: './clinics-page.component.html',\r\n  styleUrls: ['./clinics-page.component.css'],\r\n  animations: [\r\n    trigger('detailExpand', [\r\n      state('collapsed', style({height: '0px', minHeight: '0'})),\r\n      state('expanded', style({height: '*'})),\r\n      transition('expanded <=> collapsed', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)')),\r\n    ]),\r\n  ],\r\n})\r\nexport class ClinicsPageComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['Name', 'Address', 'ClinicRating', 'Price', 'Doctors'];\r\n  clinic: Clinic;\r\n  clinicDataSource = new MatTableDataSource<Clinic>();\r\n  doctorDataSource=new MatTableDataSource<Doctor>();\r\n\r\n  clinics: Array<Clinic> = new Array<Clinic>();\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n\r\n  condition: boolean;\r\n\r\n  tmp: string;\r\n  tmp1: string;\r\n  @Input() doctorListComponent: PatientDoctorsListComponent;\r\n  \r\n\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private clinicService: ClinicService,\r\n    private doctorService: DoctorService,\r\n    public dialog: MatDialog\r\n  ) {\r\n    this.clinics=this.clinicService.getAllClinics();\r\n    console.log(this.clinics);\r\n    this.doctors = this.doctorService.getAllDoctors();\r\n    this.condition=true;\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n    this.clinicDataSource.paginator = this.paginator;\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.clinicDataSource.filter = filterValue.trim().toLowerCase();\r\n    if (this.clinicDataSource.paginator) {\r\n      this.clinicDataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  all() {\r\n      this.clinicDataSource = new MatTableDataSource(this.clinicService.getAllClinics());\r\n  }\r\n\r\n  openDialog() {\r\n    const dialog = this.dialog.open(ClinicSearchComponent);\r\n    dialog.afterClosed().subscribe(data => {\r\n       if (data !== undefined) {\r\n         this.clinics = data.clinics;\r\n         this.clinicDataSource = new MatTableDataSource(this.clinics);\r\n         this.condition = false;\r\n         this.tmp = data.date;\r\n       }\r\n      }\r\n    );\r\n  }\r\n\r\n  doctorList(element: Clinic) {\r\n    this.doctorService.setDoctorss(element.doctors);\r\n    console.log(element);\r\n    for (const d of element.doctors) {\r\n     //  this.tmp1 = this.doctorService.getDoctorsTermins(this.tmp, d.email);\r\n     //  console.log(this.tmp1);\r\n    }\r\n    const dialog = this.dialog.open(PatientDoctorsListComponent);\r\n\r\n  }\r\n\r\n}\r\n","export class CodebookDTO {\r\n\r\n    medicine:any;\r\n    diagnose:any;\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY29kZWJvb2svY29kZWJvb2suY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { ClinicalCenterAdministratorService } from '../../services/clinicalCenterAdministrator.service';\r\nimport { CodebookDTO } from '../codebook-dto'\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { MedicalHistoryPageComponent } from '../medical-history-page/medical-history-page.component';\r\n\r\n\r\n@Component({\r\n  selector: 'app-codebook',\r\n  templateUrl: './codebook.component.html',\r\n  styleUrls: ['./codebook.component.css']\r\n})\r\nexport class CodebookComponent implements OnInit {\r\n\r\n  constructor(private codebookService: ClinicalCenterAdministratorService, private formBuilder: FormBuilder) { }\r\n  addMedicine : FormGroup;\r\n  addDiagnose : FormGroup;\r\n  codebook : any;\r\n\r\n  ngOnInit() {\r\n\r\n    this.addMedicine  = this.formBuilder.group({\r\n      'label' : new FormControl('', Validators.required)\r\n    });\r\n\r\n    this.addDiagnose = this.formBuilder.group({\r\n      'title' : new FormControl('', Validators.required)\r\n    });\r\n\r\n    this.codebookService.returnCodebook().subscribe(data =>{\r\n      this.codebook = data;\r\n    },\r\n    error=>{}\r\n    )\r\n\r\n\r\n  }\r\n  addCodebookMedicine(){\r\n    var si = new CodebookDTO();\r\n    si.medicine = new Object();\r\n    si.medicine.label = this.addMedicine.value.label;\r\n    this.codebookService.addCodebook(si).subscribe(data=>{this.codebook = data});\r\n  }\r\n\r\n  deleteMedicine(medicine : any){\r\n    var si = new CodebookDTO();\r\n    si.medicine = medicine;\r\n    //alert(JSON.stringify(si));\r\n    this.codebookService.deleteCodebook(si).subscribe(data=>{this.codebook = data});\r\n  }\r\n\r\n  addCodebookDiagnose() {\r\n    var codebook = new CodebookDTO();\r\n    codebook.diagnose = new Object();\r\n    codebook.diagnose.title = this.addDiagnose.value.title;\r\n    this.codebookService.addCodebook(codebook).subscribe(data=>{this.codebook = data});\r\n  }\r\n\r\n  deleteDiagnose(diagnose : any) {\r\n    var codebook = new CodebookDTO();\r\n    codebook.diagnose = diagnose;\r\n    this.codebookService.deleteCodebook(codebook).subscribe(data=>{this.codebook = data});\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZGlhZ25vc2UvZGlhZ25vc2UuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Diagnose} from '../../models/diagnose';\r\nimport {MatPaginator, MatTableDataSource} from '@angular/material';\r\nimport {Router} from '@angular/router';\r\nimport {DiagnoseService} from '../../services/diagonse.service';\r\n\r\n@Component({\r\n  selector: 'app-diagnose',\r\n  templateUrl: './diagnose.component.html',\r\n  styleUrls: ['./diagnose.component.css']\r\n})\r\nexport class DiagnoseComponent implements OnInit {\r\n\r\n  addDiagnoseForm: FormGroup;\r\n  submitted = false;\r\n  diagnose: Diagnose;\r\n  displayedColumns = ['id', 'title', 'description'];\r\n  expandedElement: Diagnose;\r\n  dataSource = new MatTableDataSource<Diagnose>();\r\n  diagnoses: Array<Diagnose>;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n\r\n  constructor( private formbuilder: FormBuilder,\r\n               private diagnoseService: DiagnoseService,\r\n               private router: Router,\r\n               ) {\r\n    this.diagnoses = this.diagnoseService.getAllDiagnoses();\r\n    this.all();\r\n  }\r\n\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n\r\n  ngOnInit() {\r\n    this.addDiagnoseForm = this.formbuilder.group({\r\n      id: new FormControl('', [Validators.required]),\r\n      title: new FormControl('', [Validators.required]),\r\n      description: new FormControl('', [Validators.required]),\r\n    });\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  get f() {\r\n    return this.addDiagnoseForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.addDiagnoseForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.diagnose = new Diagnose(\r\n      this.f.id.value,\r\n      this.f.title.value,\r\n      this.f.description.value,\r\n    );\r\n\r\n    this.diagnose = new Diagnose(this.f.id.value, this.f.title.value, this.f.description.value);\r\n\r\n    this.createDiagnose();\r\n  }\r\n\r\n  private createDiagnose() {\r\n    this.diagnoseService.newDiagnose(this.diagnose).subscribe(\r\n      data => {\r\n        this.diagnoseService.addDiagnose(this.diagnose);\r\n        this.router.navigate(['/clinicalCenterAdministrator/profile']);\r\n      },\r\n      error => {\r\n        alert('Error when adding diagnose');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.dataSource = new MatTableDataSource(this.diagnoseService.getAllDiagnoses());\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXBhZ2UvZG9jdG9yLXBhZ2UuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-doctor-page',\r\n  templateUrl: './doctor-page.component.html',\r\n  styleUrls: ['./doctor-page.component.css']\r\n})\r\nexport class DoctorPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXByb2ZpbGUvZG9jdG9yLXByb2ZpbGUuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Doctor } from '../../models/doctor';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { DoctorService } from '../../services/doctor.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\n\r\n@Component({\r\n  selector: 'app-doctor-profile',\r\n  templateUrl: './doctor-profile.component.html',\r\n  styleUrls: ['./doctor-profile.component.css']\r\n})\r\nexport class DoctorProfileComponent implements OnInit {\r\n\r\n  \r\n  doctorProfileForm: FormGroup;\r\n  submitted = false;\r\n  doctor: Doctor;\r\n  selectedDoctor: Doctor;\r\n  user: User;\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private doctorService: DoctorService,\r\n              private  userService: UserService) {\r\n    this.user = JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedDoctor = doctorService.getDoctor(this.user.email);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.doctorProfileForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedDoctor.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedDoctor.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedDoctor.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedDoctor.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedDoctor.phone, [Validators.required, Validators.minLength(9)]),\r\n      workHoursFrom: new FormControl(this.selectedDoctor.workHoursFrom, [Validators.required, Validators.minLength(2),\r\n        Validators.maxLength(2)]),\r\n      workHoursTo: new FormControl(this.selectedDoctor.workHoursTo, [Validators.required, Validators.minLength(2),\r\n        Validators.maxLength(2)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.doctorProfileForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.doctorProfileForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.doctor = new Doctor(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.workHoursFrom.value,\r\n      this.f.workHoursTo.value,\r\n    );\r\n    this.user = new User(this.f.email.value, this.f.password.value, Role.DOCTOR);\r\n\r\n    this.editDoctor();\r\n  }\r\n\r\n  private editDoctor() {\r\n    this.doctorService.editDoctor(this.doctor).subscribe(\r\n      data => {\r\n        this.userService.setUser(this.user);\r\n        this.doctorService.setDoctor(this.doctor);\r\n        this.router.navigate(['/doctor/home']);\r\n        console.log('uspesno');\r\n      },\r\n      error => {\r\n        alert('Error edit doctor');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormGroup, FormBuilder, Validators} from '@angular/forms';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport { Router } from '@angular/router';\r\nimport {User} from '../../models/user';\r\nimport {Role} from '../../models/role';\r\nimport {UserService} from '../../services/user.service';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport { NurseService } from 'src/app/services/nurse.service';\r\n\r\nimport { MedicalRecordService } from 'src/app/services/medical-record.service';\r\n\r\nimport { ClinicalCenterAdministratorService } from 'src/app/services/clinicalCenterAdministrator.service';\r\nimport { ClinicAdministratorService } from 'src/app/services/clinic-administrator.service';\r\n\r\n\r\n\r\nexport class LoginUser {\r\n  constructor(\r\n    public email: string,\r\n    public password: string\r\n  ) {}\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n\r\n  private loginForm: FormGroup;\r\n  private submitted = false;\r\n  private user:User;\r\n  private loginUser:LoginUser;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService,\r\n    private doctorService:DoctorService,\r\n    private nurseService:NurseService,\r\n    private clinicAdministratorService:ClinicAdministratorService,\r\n\r\n    private recordService:MedicalRecordService,\r\n\r\n    private ccadminService:ClinicalCenterAdministratorService,\r\n\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loginForm=this.formBuilder.group({\r\n      email: ['',[Validators.required,Validators.email]],\r\n      password: ['',Validators.required]\r\n    })\r\n  }\r\n\r\n  get f(){\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  private onSubmit(){\r\n    this.submitted=true;\r\n\r\n    if(this.loginForm.invalid)\r\n    return;\r\n  \r\n\r\n  this.loginUser=new LoginUser(\r\n    this.f.email.value,\r\n    this.f.password.value\r\n  )\r\n    this.user=this.userService.getUser(this.f.email.value);\r\n    console.log(this.user);\r\n    this.attemptLogin();\r\n  }\r\n\r\n  public attemptLogin() {\r\n    if (this.user.role === Role.PATIENT && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.patientService.loginPatient(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/patient/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.DOCTOR && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.doctorService.loginDoctor(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/doctor/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.CLINICADMINISTRATOR && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.clinicAdministratorService.loginClinicAdministrator(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/clinicAdministrator/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.NURSE && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.nurseService.loginNurse(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/nurse/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.CCADMIN && this.loginUser.password === this.user.password) {\r\n      \r\n    \r\n      console.log(this.user);\r\n      this.ccadminService.loginCCAdmin(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in as ccadmin');\r\n            this.router.navigate(['/clinicalCenterAdministrator/profile']);\r\n          } else {\r\n            console.log('Login error as ccadmin');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1oaXN0b3J5LXBhZ2UvbWVkaWNhbC1oaXN0b3J5LXBhZ2UuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Examination } from 'src/app/models/examination';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { ExaminationService } from 'src/app/services/examination.service';\r\nimport { ExaminationTable } from 'src/app/models/examinationTable';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { User } from 'src/app/models/user';\r\nimport { Patient } from 'src/app/models/patient';\r\nimport { PatientService } from 'src/app/services/patient.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-medical-history-page',\r\n  templateUrl: './medical-history-page.component.html',\r\n  styleUrls: ['./medical-history-page.component.css']\r\n})\r\nexport class MedicalHistoryPageComponent implements OnInit {\r\n\r\n  exTable: ExaminationTable;\r\n  displayedColumns: string[] = ['kind', 'clinic', 'doctor'];\r\n  dataSource = new MatTableDataSource<ExaminationTable>();\r\n  examinations: Array<Examination> = this.examinationService.getAllExaminations();\r\n  exTables: Array<ExaminationTable>=new Array<ExaminationTable>();\r\n  tmp: Array<Examination> = new Array<Examination>();\r\n  loggedUser: string = this.userService.isLoggedIn();\r\n  user: User;\r\n  tmpStr = this.loggedUser.split(',');\r\n  tmpStr1 = this.tmpStr[0].split(':');\r\n  str= \"\";\r\n  constructor(private patientService: PatientService, private examinationService: ExaminationService,\r\n              private userService: UserService) {\r\n    this.user = JSON.parse(this.loggedUser);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    for (const c of this.examinations) {\r\n      if (c.patient.email === this.user.email) {\r\n        this.tmp.push(c);\r\n        for(const s of c.doctors){\r\n          this.str=s.name+ \" \";\r\n        }\r\n        this.exTable= new ExaminationTable(this.kindExamination(c.kind.toString()),this.str,c.clinic.name);\r\n        this.exTables.push(this.exTable);\r\n        console.log(this.exTable);\r\n      }\r\n    }\r\n    this.dataSource = new MatTableDataSource(this.exTables);\r\n    console.log(this.exTables);\r\n    this.str=\"\";\r\n  }\r\n\r\n    kindExamination(kind: string) {\r\n    if (kind === 'EXAMINATION') {\r\n      return \"EXAMINATION\";\r\n    } else {\r\n      return \"OPERATION\";\r\n    }\r\n  }\r\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1yZWNvcmQtcGFnZS9tZWRpY2FsLXJlY29yZC1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { MedicalRecordService } from 'src/app/services/medical-record.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { User } from 'src/app/models/user';\r\nimport { PatientProfileComponent } from '../patient-profile/patient-profile.component';\r\nimport { Patient } from 'src/app/models/patient';\r\nimport { MedicalRecord } from 'src/app/models/medicalRecord';\r\n\r\n\r\n@Component({\r\n  selector: 'app-medical-record-page',\r\n  templateUrl: './medical-record-page.component.html',\r\n  styleUrls: ['./medical-record-page.component.css']\r\n})\r\nexport class MedicalRecordPageComponent implements OnInit {\r\n  \r\n  \r\n  records: Array<MedicalRecord> = new Array<MedicalRecord>();\r\n  loggedUser: string = this.userService.isLoggedIn();\r\n  user: User;\r\n  mr: MedicalRecord;\r\n  displayedColumns: string[] = ['Height', 'Weight','BloodType','Allergies','ExaminationReports'];\r\n  dataSource= new MatTableDataSource<MedicalRecord>();\r\n  rec:Array<MedicalRecord>=new Array<MedicalRecord>();\r\n\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private medicalRecordService: MedicalRecordService, \r\n    private userService: UserService\r\n    ) {\r\n      this.records = medicalRecordService.getAllMedicalRecords();\r\n      this.user = JSON.parse(this.loggedUser);\r\n      this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.setAll();\r\n    this.dataSource = new MatTableDataSource(this.rec);\r\n    this.dataSource.paginator = this.paginator;\r\n}\r\n\r\n  setAll() {\r\n    for (let i = 0; i < this.records.length; i++) {\r\n      const element = this.records[i];\r\n      let truee=0;\r\n      if(element.patient.email==this.user.email){\r\n        for(const c of this.rec){\r\n          if(c.id==element.id)\r\n          truee=1;\r\n        }\r\n        if(truee==0){\r\n          this.rec.push(this.records[i]);\r\n        }\r\n      }\r\n  }\r\n  }\r\n\r\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNpbmUvbWVkaWNpbmUuY29tcG9uZW50LmNzcyJ9 */\"","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Nurse} from '../../models/nurse';\r\nimport {User} from '../../models/user';\r\nimport {Router} from '@angular/router';\r\nimport {NurseService} from '../../services/nurse.service';\r\nimport {UserService} from '../../services/user.service';\r\nimport {Role} from '../../models/role';\r\nimport {Medicine} from '../../models/medicine';\r\nimport {MedicineService} from '../../services/medicine.service';\r\nimport {MatPaginator, MatTableDataSource} from '@angular/material';\r\nimport {Clinic} from '../../models/clinic';\r\n\r\n@Component({\r\n  selector: 'app-medicine',\r\n  templateUrl: './medicine.component.html',\r\n  styleUrls: ['./medicine.component.css']\r\n})\r\nexport class MedicineComponent implements OnInit {\r\n\r\n  addMedicineForm: FormGroup;\r\n  submitted = false;\r\n  medicines: Array<Medicine> = new Array<Medicine>();\r\n  medicine: Medicine;\r\n  dataSource = new MatTableDataSource<Medicine>();\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n  displayedColumns = ['id', 'title', 'description', 'strenght'];\r\n\r\n  constructor(private formBuilder: FormBuilder, private router: Router, private medicineService: MedicineService,\r\n              private  userService: UserService) {\r\n\r\n    this.medicines = this.medicineService.getAllMedicines();\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.addMedicineForm = this.formBuilder.group({\r\n\r\n      id: new FormControl('', [Validators.required]),\r\n      title: new FormControl('', [Validators.required]),\r\n      description: new FormControl('', [Validators.required]),\r\n      strenght: new FormControl('', [Validators.required]),\r\n    });\r\n\r\n    this.all();\r\n    this.dataSource.paginator = this.paginator;\r\n  }\r\n\r\n  get f() {\r\n    return this.addMedicineForm.controls;\r\n  }\r\n\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.addMedicineForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.medicine = new Medicine(\r\n      this.f.id.value,\r\n      this.f.title.value,\r\n      this.f.description.value,\r\n      this.f.strenght.value,\r\n    );\r\n\r\n    this.medicine = new Medicine(this.f.id.value,\r\n      this.f.title.value,\r\n      this.f.description.value,\r\n      this.f.strenght.value);\r\n    this.createMedicine();\r\n  }\r\n\r\n  private createMedicine() {\r\n    this.medicineService.newMedicine(this.medicine).subscribe(\r\n      data => {\r\n        this.medicineService.addMedicine(this.medicine);\r\n        this.router.navigate(['/clinicalCenterAdministrator/profile']);\r\n      },\r\n      error => {\r\n        alert('Error adding medicament');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.dataSource.filter = filterValue.trim().toLowerCase();\r\n  }\r\n\r\n  all() {\r\n    this.dataSource = new MatTableDataSource<Medicine>(this.medicineService.getAllMedicines());\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtcGFnZS9udXJzZS1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-page',\r\n  templateUrl: './nurse-page.component.html',\r\n  styleUrls: ['./nurse-page.component.css']\r\n})\r\nexport class NursePageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtcHJvZmlsZS9udXJzZS1wcm9maWxlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-profile',\r\n  templateUrl: './nurse-profile.component.html',\r\n  styleUrls: ['./nurse-profile.component.css']\r\n})\r\nexport class NurseProfileComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtdmFjYXRpb24tcmVxL251cnNlLXZhY2F0aW9uLXJlcS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\r\nimport {Zahtev} from '../../models/zahtev'\r\nimport {MatDialog} from '@angular/material';\r\nimport {Router} from '@angular/router';\r\nimport {VacationService} from '../../services/vacation.service';\r\nimport {ZahtevStatus} from '../../models/zahtevStatus';\r\n\r\n@Component({\r\n  selector: 'app-nurse-vacation-req',\r\n  templateUrl: './nurse-vacation-req.component.html',\r\n  styleUrls: ['./nurse-vacation-req.component.css']\r\n})\r\nexport class NurseVacationRequestComponent implements OnInit {\r\n\r\n  vacationRequestForm: FormGroup;\r\n  submitted = false;\r\n  zahtev: Zahtev;\r\n\r\n  constructor(public dialog: MatDialog,\r\n              private formBuilder: FormBuilder,\r\n              private router: Router,\r\n              private vacationService: VacationService,\r\n  ) {}\r\n\r\n\r\n  ngOnInit() {\r\n    this.vacationRequestForm = this.formBuilder.group({\r\n      email: new FormControl('', [Validators.required]),\r\n      name: new FormControl('', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      startingDate: new FormControl('', [Validators.required]),\r\n      finishDate: new FormControl('', [Validators.required]),\r\n\r\n    });\r\n\r\n  }\r\n\r\n\r\n  get f() {\r\n    return this.vacationRequestForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.vacationRequestForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.zahtev = new Zahtev(\r\n      this.f.email.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.startingDate.value,\r\n      this.f.finishDate.value,\r\n      ZahtevStatus.AWAITING_APPROVAL\r\n    );\r\n\r\n    this.zahtev = new Zahtev(this.f.email.value, this.f.name.value, this.f.surname.value, this.f.startingDate.value, this.f.finishDate.value, ZahtevStatus.AWAITING_APPROVAL);\r\n\r\n    this.createVacation();\r\n\r\n  }\r\n\r\n  private createVacation() {\r\n   \r\n\r\n    this.vacationService.newVacation1(this.zahtev).subscribe(\r\n      data => {\r\n       \r\n\r\n        this.vacationService.addVacation1(this.zahtev);\r\n        this.router.navigate(['/nurse/home']);\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        console.log('greska');\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1kb2N0b3Itc2VhcmNoL3BhdGllbnQtZG9jdG9yLXNlYXJjaC5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\r\nimport { Doctor } from 'src/app/models/doctor';\r\nimport { DoctorService } from 'src/app/services/doctor.service';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\r\n\r\n@Component({\r\n  selector: 'app-patient-doctor-search',\r\n  templateUrl: './patient-doctor-search.component.html',\r\n  styleUrls: ['./patient-doctor-search.component.css']\r\n})\r\nexport class PatientDoctorSearchComponent implements OnInit {\r\n\r\n\r\n  SearchDoctorGroup: FormGroup;\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n  constructor(private formBuilder: FormBuilder,\r\n              private doctorService: DoctorService,\r\n              private dialogRef: MatDialogRef<PatientDoctorSearchComponent>,\r\n              @Inject(MAT_DIALOG_DATA) data) { }\r\n\r\n  ngOnInit() {\r\n    this.SearchDoctorGroup = this.formBuilder.group({\r\n      name: new FormControl(''),\r\n      surname: new FormControl(''),\r\n      rating: new FormControl('', [Validators.required, Validators.minLength(1), Validators.maxLength(1),\r\n        Validators.pattern('[0-5]*')]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.SearchDoctorGroup.controls;\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  save() {\r\n    if (this.SearchDoctorGroup.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.doctors = this.doctorService.getDoctrosWithSearch(this.f.name.value, this.f.surname.value, this.f.rating.value);\r\n    console.log(this.doctors);\r\n    this.dialogRef.close(this.doctors);\r\n  }\r\n}\r\n","export default \"table {\\r\\n    width: 100%;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvY29tcG9uZW50cy9wYXRpZW50LWRvY3RvcnMtbGlzdC9wYXRpZW50LWRvY3RvcnMtbGlzdC5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksV0FBVztFQUNiIiwiZmlsZSI6InNyYy9hcHAvY29tcG9uZW50cy9wYXRpZW50LWRvY3RvcnMtbGlzdC9wYXRpZW50LWRvY3RvcnMtbGlzdC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsidGFibGUge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgfSJdfQ== */\"","import { Component, OnInit, Input } from '@angular/core';\r\nimport { MatTableDataSource, MatDialog, MatDialogRef } from '@angular/material';\r\nimport { Doctor } from 'src/app/models/doctor';\r\nimport { DoctorService } from 'src/app/services/doctor.service';\r\nimport { PatientDoctorSearchComponent } from '../patient-doctor-search/patient-doctor-search.component';\r\n\r\n@Component({\r\n  selector: 'app-patient-doctors-list',\r\n  templateUrl: './patient-doctors-list.component.html',\r\n  styleUrls: ['./patient-doctors-list.component.css']\r\n})\r\nexport class PatientDoctorsListComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['Name', 'Surname', 'DoctorRating', 'Price'];\r\n  doctorDataSource: MatTableDataSource<Doctor>;\r\n  doctors: Array<Doctor>;\r\n  @Input() doctorSearchDialog: PatientDoctorSearchComponent;\r\n  constructor(private doctorService: DoctorService,\r\n              public searchDialog: MatDialog,\r\n              private dialogRef: MatDialogRef<PatientDoctorSearchComponent>) {\r\n    this.doctors = doctorService.getDoctorss();\r\n    this.doctorDataSource = new MatTableDataSource(this.doctors);\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  applyFilter(filterValue: string) {\r\n    this.doctorDataSource.filter = filterValue.trim().toLowerCase();\r\n\r\n    if (this.doctorDataSource.paginator) {\r\n      this.doctorDataSource.paginator.firstPage();\r\n    }\r\n  }\r\n\r\n  searchDoctors() {\r\n    const dialog = this.searchDialog.open(PatientDoctorSearchComponent);\r\n    dialog.afterClosed().subscribe(data => {\r\n        if (data !== undefined) {\r\n         this.doctors = data;\r\n         this.doctorDataSource = new MatTableDataSource(data);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  close() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1wYWdlL3BhdGllbnQtcGFnZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-patient-page',\r\n  templateUrl: './patient-page.component.html',\r\n  styleUrls: ['./patient-page.component.css']\r\n})\r\nexport class PatientPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1wcm9maWxlL3BhdGllbnQtcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Patient } from '../../models/patient';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { PatientService } from '../../services/patient.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\nimport { PatientStatus } from '../../models/patientStatus';\r\n\r\n\r\n@Component({\r\n  selector: 'app-patient-profile',\r\n  templateUrl: './patient-profile.component.html',\r\n  styleUrls: ['./patient-profile.component.css']\r\n})\r\nexport class PatientProfileComponent implements OnInit {\r\n\r\n  patientForm: FormGroup;\r\n  submitted = false;\r\n  selectedPatient: Patient;\r\n  user:User;\r\n  patient:Patient;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedPatient=patientService.getPatient(this.user.email);\r\n    console.log(this.selectedPatient);\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.patientForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedPatient.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedPatient.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedPatient.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedPatient.surname, [Validators.required]),\r\n      address: new FormControl(this.selectedPatient.address, [Validators.required]),\r\n      city: new FormControl(this.selectedPatient.city, [Validators.required]),\r\n      country: new FormControl(this.selectedPatient.country, [Validators.required]),\r\n      number: new FormControl(this.selectedPatient.number, [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl(this.selectedPatient.insuranceID, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.patientForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.patientForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.PATIENT);\r\n    \r\n    this.editPatient();\r\n    \r\n  }\r\n\r\n    public editPatient(){\r\n      this.patientService.editPatient(this.patient).subscribe(\r\n        data => {\r\n          this.userService.setUser(this.user);\r\n          this.patientService.setPatient(this.patient);\r\n          this.router.navigate(['/patient/home']);\r\n        },\r\n        error => {\r\n          alert('Error edit patient');\r\n        }\r\n      );\r\n    }\r\n\r\n \r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVnaXN0ZXItcGF0aWVudC9yZWdpc3Rlci1wYXRpZW50LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, Injectable} from '@angular/core';\r\nimport { Patient} from '../../models/patient';\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {PatientStatus} from '../../models/patientStatus';\r\nimport {Role} from '../../models/role';\r\nimport {User} from '../../models/user';\r\nimport {UserService} from '../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-register-patient',\r\n  templateUrl: './register-patient.component.html',\r\n  styleUrls: ['./register-patient.component.css']\r\n})\r\nexport class RegisterPatientComponent implements OnInit {\r\n\r\n  registerForm: FormGroup;\r\n  submitted = false;\r\n  patient: Patient;\r\n  user:User;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formBuilder.group({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl('', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      address: new FormControl('', [Validators.required]),\r\n      city: new FormControl('', [Validators.required]),\r\n      country: new FormControl('', [Validators.required]),\r\n      number: new FormControl('', [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl('', [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.PATIENT);\r\n\r\n    this.createPatient();\r\n  }\r\n\r\n  private createPatient() {\r\n    this.patientService.newPatient(this.patient).subscribe(\r\n      data => {\r\n        this.userService.addUser(this.user);\r\n        console.log(this.user);\r\n        this.patientService.addPatient(this.patient);\r\n        this.router.navigate(['/login']);\r\n      },\r\n      error => {\r\n        alert('Error registration patient');\r\n      }\r\n    );\r\n  }\r\n\r\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvdmFjYXRpb24tcmVxdWVzdC1yZWdpc3Rlci92YWNhdGlvbi1yZXF1ZXN0LXJlZ2lzdGVyLmNvbXBvbmVudC5jc3MifQ== */\"","import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\r\nimport {MatTableDataSource} from '@angular/material';\r\nimport {Router} from '@angular/router';\r\nimport {Zahtev} from '../../models/zahtev';\r\nimport {VacationService} from '../../services/vacation.service';\r\nimport {ZahtevStatus} from '../../models/zahtevStatus';\r\n\r\n@Component({\r\n  selector: 'app-vacation-request-register',\r\n  templateUrl: './vacation-request-register.component.html',\r\n  styleUrls: ['./vacation-request-register.component.css']\r\n})\r\nexport class VacationRequestRegisterComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['email', 'startingDate', 'finishDate', 'approving'];\r\n  RequestsDataSource = new MatTableDataSource<Zahtev>();\r\n  p: Zahtev;\r\n  constructor(private vacationService: VacationService, private changeDetectorRef: ChangeDetectorRef,\r\n              private router: Router) {\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.RequestsDataSource = new MatTableDataSource<Zahtev>(this.vacationService.getAllRequests());\r\n  }\r\n\r\n  onAccept(zahtev) {\r\n    this.p = this.vacationService.getVacations(zahtev.email);\r\n    this.p.status = ZahtevStatus.APPROVED;\r\n    this.editVacation(zahtev);\r\n    this.deleteRow(zahtev);\r\n\r\n  }\r\n\r\n  private editVacation(zahtev) {\r\n    this.vacationService.editVacation(this.p).subscribe(\r\n      data => {\r\n        this.vacationService.setVacation(this.p);\r\n        this.deleteRow(zahtev);\r\n        this.router.navigate(['/clinicalCenterAdministrator/VacationRequests']);\r\n      },\r\n      error => {\r\n        alert('Error edit request');\r\n        console.log(error);\r\n      }\r\n    );\r\n  }\r\n\r\n  deleteRow(d) {\r\n    const index = this.RequestsDataSource.data.indexOf(d);\r\n    this.RequestsDataSource.data.splice(index, 1);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { CdkStepperModule } from '@angular/cdk/stepper';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n\r\n@NgModule({\r\n  exports: [\r\n    A11yModule,\r\n    CdkStepperModule,\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    DragDropModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    PortalModule,\r\n    ScrollingModule,\r\n  ]\r\n})\r\nexport class DemoMaterialModule { }","import { Doctor } from './doctor';\r\nimport { ExaminationType } from './examinationType';\r\n\r\nexport class Clinic {\r\n  id: number;\r\n  name: string;\r\n  address: string;\r\n  description: string;\r\n  clinicRating: number;\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n  examinationTypes: Array<ExaminationType> = new Array<ExaminationType>();\r\n\r\n  constructor(name: string, address: string, description: string, doctors: Array<Doctor>, examinationTypes?: Array<ExaminationType>, clinicRating?: number, id?: number) {\r\n    this.name = name;\r\n    this.address = address;\r\n    this.description = description;\r\n    this.doctors = doctors;\r\n    this.clinicRating = clinicRating;\r\n    this.examinationTypes = examinationTypes;\r\n    this.id = id;\r\n  }\r\n}","import { Clinic } from './clinic';\r\n\r\nexport class ClinicAdministrator {\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    surname: string;\r\n    number: string;\r\n    clinic: Clinic;\r\n\r\n    constructor(email: string, password: string, name: string, surname: string, number1: string, clinic?: Clinic) {\r\n        this.email = email;\r\n        this.password = password;\r\n        this.name = name;\r\n        this.surname = surname;\r\n        this.number = number1;\r\n        this.clinic = clinic;\r\n    }\r\n}","\r\nexport class ClinicalCenterAdministrator{\r\n\r\n    constructor(\r\n        public email: string,\r\n        public password: string,\r\n        public name: string,\r\n        public surname: string,\r\n        public number: string,\r\n        \r\n    ){}\r\n}","import construct = Reflect.construct;\r\n\r\nexport class Diagnose{\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n\r\n\r\n  constructor(id: number, title: string, description: string){\r\n    this.id = id;\r\n    this.title = title;\r\n    this.description = description;\r\n  }\r\n}\r\n\r\n","import { Clinic } from './clinic';\r\nimport { ExaminationType } from './examinationType';\r\n\r\n\r\n  export class Doctor {\r\n\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    surname: string;\r\n    phone: string;\r\n    workHoursFrom: string;\r\n    workHoursTo: string;\r\n    clinic: Clinic;\r\n    doctorRating: number;\r\n    specialized: ExaminationType;\r\n  \r\n    constructor(email: string, password: string, name: string, surname: string, number1: string, workHoursFrom: string, workHoursTo: string, specialized?: ExaminationType, doctorRating?: number, clinic?: Clinic) {\r\n      this.email = email;\r\n      this.password = password;\r\n      this.name = name;\r\n      this.surname = surname;\r\n      this.phone = number1;\r\n      this.workHoursFrom = workHoursFrom;\r\n      this.workHoursTo = workHoursTo;\r\n      this.doctorRating = doctorRating;\r\n      this.specialized = specialized;\r\n      this.clinic = clinic;\r\n    }\r\n}","import { Doctor } from './doctor';\r\nimport { Nurse } from './nurse';\r\nimport { Patient } from './patient';\r\nimport { ExaminationType } from './examinationType';\r\nimport { Room } from './room';\r\nimport { ExaminationKind } from './examinationKind';\r\nimport { Clinic } from './clinic';\r\nimport { ExaminationStatus } from './examinationStatus';\r\nimport { Interval } from './interval';\r\n\r\nexport class Examination {\r\n  kind: ExaminationKind;\r\n  status: ExaminationStatus;\r\n  examinationType: ExaminationType;\r\n  discount: number;\r\n  doctorRating: number;\r\n  clinicRating: number;\r\n  doctors: Array<Doctor> = new Array<Doctor>();\r\n  nurse: Nurse;\r\n  clinic: Clinic;\r\n  patient: Patient;\r\n  id: number;\r\n  interval: Interval;\r\n  constructor(kind: ExaminationKind, status: ExaminationStatus, examinationType: ExaminationType, discount: number,\r\n              doctorRating: number, clinicRating: number, nurse: Nurse,\r\n              clinic: Clinic, patient: Patient, doctors: Array<Doctor>, id: number, interval?: Interval) {\r\n    this.kind = kind;\r\n    this.status = status;\r\n    this.examinationType = examinationType;\r\n    this.discount = discount;\r\n    this.doctorRating = doctorRating;\r\n    this.clinicRating = clinicRating;\r\n    this.nurse = nurse;\r\n    this.clinic = clinic;\r\n    this.patient = patient;\r\n    this.doctors = doctors;\r\n    this.id = id;\r\n    this.interval = interval;\r\n  }\r\n}","export enum ExaminationKind {\r\n    EXAMINATION,\r\n    OPERATION\r\n  }","export enum ExaminationStatus {\r\n  APPROVED,\r\n  AWAITING,\r\n  PREDEF_BOOKED,\r\n  PREDEF_AVAILABLE\r\n}","export class ExaminationTable{\r\n     kind: string;\r\n   doctors:string;\r\n   clinic: string;\r\n\r\n    constructor(kind: string,doctors:string,clinic:string) {\r\n      this.kind = kind;\r\n      this.doctors=doctors;\r\n      this.clinic=clinic;\r\n  }\r\n}","export class ExaminationType {\r\n    id: number;\r\n    label: string;\r\n    price: number;\r\n    constructor(label: string, price: number, id?: number) {\r\n        this.label = label;\r\n        this.price = price;\r\n        this.id = id;\r\n    }\r\n}","import { Patient } from './patient';\r\nimport { ExaminationReport } from './examinationReport';\r\n\r\nexport class MedicalRecord{\r\n    id: number;\r\n    height: number;\r\n    weight: number;\r\n    bloodType: string;\r\n    allergies: string;\r\n    patient: Patient;\r\n    reports: Array<ExaminationReport> = new Array<ExaminationReport>();\r\n\r\n    constructor(id: number, height: number, weight: number, bloodType: string, allergies: string, patient: Patient, reports?: Array<ExaminationReport>) {\r\n    this.id = id;\r\n    this.height = height;\r\n    this.weight = weight;\r\n    this.bloodType = bloodType;\r\n    this.allergies = allergies;\r\n    this.patient = patient;\r\n    this.reports = reports;\r\n  }\r\n}","import {parseJsonSchemaToCommandDescription} from '@angular/cli/utilities/json-schema';\r\n\r\nexport class Medicine{\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  strenght: string;\r\n\r\n  constructor(id: number, title: string, description: string, strenght: string){\r\n    this.id = id;\r\n    this.title = title;\r\n    this.description = description;\r\n    this.strenght = strenght;\r\n}\r\n}","import { Time } from '@angular/common';\r\n\r\nexport class Nurse{\r\n    \r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    surname: string;\r\n    number: string;\r\n    city: string;\r\n    address: string;\r\n    country: string;\r\n    workHoursTo: Time;\r\n    workHoursFrom: Time;\r\n  \r\n\r\n    constructor(email: string, password: string, name: string, surname: string, number1: string, address: string, city: string, country: string, workHoursTo: Time, workHoursFrom: Time) {\r\n\r\n      this.email = email;\r\n      this.name = name;\r\n      this.password = password;\r\n      this.surname = surname;\r\n      this.number = number1;\r\n\r\n      this.address = address;\r\n      this.city = city;\r\n      this.country = country;\r\n      this.workHoursFrom = workHoursFrom;\r\n      this.workHoursTo = workHoursTo;\r\n\r\n    }\r\n}","import { PatientStatus } from './patientStatus';\r\n\r\nexport class Patient{\r\n\r\n    constructor(\r\n        public email: string,\r\n        public password: string,\r\n        public name: string,\r\n        public surname: string,\r\n        public number: string,\r\n        public address: string,\r\n        public city: string,\r\n        public country: string,\r\n        public insuranceID: string,\r\n        public status: PatientStatus\r\n    ){}\r\n}","export enum PatientStatus {\r\n    AWAITING,\r\n    APPROVED\r\n  }","export enum Role {\r\n  PATIENT,\r\n  DOCTOR,\r\n  NURSE,\r\n  CCADMIN,\r\n  NONE,\r\n  CLINICADMINISTRATOR,\r\n \r\n  }","import { Role } from './role';\r\n\r\nexport class User {\r\n    email: string;\r\n    password: string;\r\n    role: Role;\r\n    constructor(email:string,password:string,role:Role){\r\n        this.email=email;\r\n        this.password=password;\r\n        this.role=role;\r\n    }\r\n}\r\n","import {Clinic} from './clinic';\r\nimport {Doctor} from './doctor';\r\nimport {Nurse} from './nurse';\r\nimport {ZahtevStatus} from './zahtevStatus';\r\n\r\nexport class Zahtev {\r\n\r\n  email: string;\r\n  name: string;\r\n  surname: string;\r\n  startingDate: string;\r\n  finishDate: string;\r\n\r\n  status: ZahtevStatus;\r\n  constructor(email: string, name: string, surname: string, startingDate: string, finishDate: string, status: ZahtevStatus) {\r\n\r\n    this.email = email;\r\n    this.name = name;\r\n    this.surname = surname;\r\n    this.startingDate = startingDate;\r\n    this.finishDate = finishDate;\r\n    this.status = status;\r\n  }\r\n}\r\n","export enum ZahtevStatus {\r\n    AWAITING_APPROVAL,\r\n    APPROVED\r\n  }\r\n  ","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ClinicAdministrator } from '../models/clinicAdministrator';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UserService } from './user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClinicAdministratorService {\r\n\r\n  urlClinicAdministrator = environment.baseUrl + environment.clinicAdministrator;\r\n  listClinicAdministrators: Array<ClinicAdministrator> = new Array<ClinicAdministrator>();\r\n  clinicAdministrator: ClinicAdministrator;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserService\r\n  ) {\r\n    this.getAllClinicAdministrators();\r\n  }\r\n\r\n  public loginClinicAdministrator(clinicAdministrator) {\r\n    this.userService.setToken(clinicAdministrator);\r\n    return this.http.post(environment.baseUrl + '/login', clinicAdministrator, {responseType: 'text'});\r\n  }\r\n\r\n  public editClinicAdministrator(clinicAdministrator) {\r\n    return this.http.post(this.urlClinicAdministrator + '/edit', clinicAdministrator, {responseType: 'text'});\r\n  }\r\n\r\n  public getClinicAdministrator(email: string) {\r\n    console.log(this.listClinicAdministrators)\r\n    if ( this.listClinicAdministrators.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listClinicAdministrators) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public addClinicAdministrator(d: ClinicAdministrator) {\r\n    if (this.getClinicAdministrator(d.email) === null) {\r\n      this.listClinicAdministrators.push(d);\r\n    }\r\n  }\r\n\r\n  public setClinicAdministrator(d: ClinicAdministrator) {\r\n    for (const d1 of this.listClinicAdministrators) {\r\n      if (d1.email === d.email) {\r\n        d1.password = d.password;\r\n        d1.name = d.name;\r\n        d1.surname = d.surname;\r\n        d1.number = d.number;\r\n        d1.clinic = d.clinic;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getAllClinicAdministrators(): Array<ClinicAdministrator> {\r\n    this.http.get(this.urlClinicAdministrator + '/all').subscribe((data: ClinicAdministrator[]) => {\r\n        for (const c of data) {\r\n          this.clinicAdministrator = new ClinicAdministrator(c.email, c.password, c.name, c.surname, c.number, c.clinic);\r\n          console.log(c);\r\n          this.addClinicAdministrator(this.clinicAdministrator);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.listClinicAdministrators;\r\n  }\r\n\r\n\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Clinic } from '../models/clinic';\r\nimport { HttpClient, HttpParams } from '@angular/common/http'; \r\nimport { ExaminationType } from '../models/examinationType';\r\nimport { ExaminationTypeService } from './examination-type.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClinicService {\r\n\r\n  urlClinic = environment.baseUrl + environment.clinic;\r\n  listClinics: Array<Clinic> = new Array<Clinic>();\r\n  clinic: Clinic;\r\n  clinicsTypes: Array<Clinic> = new Array<Clinic>();\r\n  examinationTypes: Array<ExaminationType> = new Array<ExaminationType>();\r\n  constructor( private http: HttpClient, private examinationTypeService: ExaminationTypeService) {\r\n    this.examinationTypes = examinationTypeService.getAllTypes();\r\n    this.getAllClinics();\r\n  }\r\n\r\n  public addClinic(c: Clinic) {\r\n    if (this.getClinic(c.name) === null) {\r\n      this.listClinics.push(c);\r\n    }\r\n  }\r\n\r\n  public getClinic(name: string) {\r\n    if ( this.listClinics.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listClinics) {\r\n      if ( u.name === name) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getClinicByName(name) {\r\n    return this.http.get(this.urlClinic + '/' + name);\r\n  }\r\n\r\n  public getAllClinics(): Array<Clinic> {\r\n    this.http.get(this.urlClinic + '/all').subscribe((data: Clinic[]) => {\r\n      console.log(data);\r\n      for (const c of data) {\r\n        this.clinic = new Clinic(c.name, c.address, c.description, c.doctors , c.examinationTypes, c.clinicRating, c.id);\r\n        this.addClinic(this.clinic);\r\n      }\r\n    },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.listClinics;\r\n  }\r\n\r\n  public newClinic(clinic) {\r\n    return this.http.post(this.urlClinic + '/clinical-centre-admin/addClinic', clinic);\r\n  }\r\n  public getClinicsWithType(type: string): Array<Clinic> {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('type', type);\r\n    this.clinicsTypes = new Array<Clinic>();\r\n    this.http.get(this.urlClinic + '/allWithTypes', {params}).subscribe((data: Clinic[]) => {\r\n        for (const c of data) {\r\n          this.clinic = new Clinic(c.name, c.address, c.description, c.doctors , c.examinationTypes, c.clinicRating, c.id);\r\n          this.clinicsTypes.push(this.clinic);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.clinicsTypes;\r\n  }\r\n\r\n  public getClinicsWithTypes() {\r\n    return this.clinicsTypes;\r\n  }\r\n\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport {ClinicalCenterAdministrator} from '../models/clinicalCenterAdministrator';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\nexport class ClinicalCenterAdministratorService{\r\n\r\n    urlCCAdmin = environment.baseUrl + environment.clinicalCenterAdmininistrator;\r\n    listCCAdmin: Array<ClinicalCenterAdministrator>= new Array<ClinicalCenterAdministrator>();\r\n    clinicalCenterAdministrator:ClinicalCenterAdministrator;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllClinicalCenterAdministrators();\r\n    }\r\n  \r\n    public newCCAdmin(clinicalCenterAdministrator) {\r\n      return this.http.post(this.urlCCAdmin + '/register', clinicalCenterAdministrator);\r\n    }\r\n  \r\n    public loginCCAdmin(clinicalCenterAdministrator) {\r\n      this.userService.setToken(clinicalCenterAdministrator);\r\n      return this.http.post(environment.baseUrl + '/login', clinicalCenterAdministrator, {responseType: 'text'});\r\n    }\r\n\r\n    public editCCAdmin(clinicalCenterAdministrator){\r\n      return this.http.post(this.urlCCAdmin + '/edit', clinicalCenterAdministrator,{responseType: 'text'});\r\n    }\r\n  \r\n    public addCCAdmin(p: ClinicalCenterAdministrator) {\r\n      if(this.getCCAdmin(p.email)===null){\r\n        this.listCCAdmin.push(p);\r\n      }\r\n    }\r\n  \r\n    public getCCAdmin(email: string) {\r\n      if ( this.listCCAdmin.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listCCAdmin) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setCCAdmin(p: ClinicalCenterAdministrator) {\r\n\r\n      for (const p1 of this.listCCAdmin) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n         \r\n          p1.surname = p.surname;\r\n        \r\n          p1.password = p.password;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    public getAllClinicalCenterAdministrators(): Array<ClinicalCenterAdministrator> {\r\n      this.http.get(this.urlCCAdmin + '/all').subscribe((data: ClinicalCenterAdministrator[]) => {\r\n          for (const c of data) {\r\n            this.clinicalCenterAdministrator = new ClinicalCenterAdministrator(c.email,c.password,c.name,c.surname,c.number);\r\n            this.addCCAdmin(this.clinicalCenterAdministrator);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listCCAdmin;\r\n    }\r\n    addCodebook(sifarnik: any): Observable<any> {\r\n      return this.http.post(this.urlCCAdmin+\"/addCodebook\", sifarnik).pipe(map(data => {return data;}));\r\n  }\r\n  deleteCodebook(sifarnik): Observable<any> {\r\n     // alert(JSON.stringify(sifarnik));\r\n      return this.http.post(this.urlCCAdmin+\"/deleteCodebook\", sifarnik).pipe(map(data => {return data;}));\r\n  }\r\n  returnCodebook(): Observable<any> {\r\n      return this.http.get(this.urlCCAdmin+\"/returnCodebook\").pipe(map(data => {return data;}));\r\n  }\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport {Diagnose} from '../models/diagnose';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {environment} from '../../environments/environment';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DiagnoseService {\r\n\r\n  url = environment.baseUrl + environment.diagnose;\r\n  diagnose: Diagnose;\r\n  diagnose1: Diagnose;\r\n  listDiagnoses: Array<Diagnose> = new Array<Diagnose>();\r\n\r\n  constructor(private http: HttpClient\r\n  ) {\r\n\r\n    this.getAllDiagnoses();\r\n  }\r\n\r\n  public editDiagnose(diagnose) {\r\n    return this.http.post(this.url + '/edit', diagnose, {responseType: 'text'});\r\n  }\r\n\r\n  public getDiagnose(id: number) {\r\n    if ( this.listDiagnoses.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listDiagnoses) {\r\n      if ( u.id === id) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setDiagnose(d: Diagnose) {\r\n    for (const diag of this.listDiagnoses) {\r\n      if (diag.id === d.id) {\r\n        diag.title = d.title;\r\n        diag.description = d.description;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public addDiagnose(d: Diagnose) {\r\n    if (this.getDiagnose(d.id) === null) {\r\n      this.listDiagnoses.push(d);\r\n    }\r\n  }\r\n\r\n  public newDiagnose(diagnose) {\r\n    return this.http.post(this.url + '/clinicalCenterAdministrator/addDiagnose', diagnose);\r\n  }\r\n\r\n  public getAllDiagnoses(): Array<Diagnose> {\r\n    this.http.get(this.url + '/all').subscribe((data: Diagnose[]) => {\r\n        for (const c of data) {\r\n          this.diagnose1 = new Diagnose(c.id, c.title, c.description);\r\n          this.addDiagnose(this.diagnose1);\r\n          console.log(c);\r\n          console.log('Ispod admin klinike');\r\n          console.log(this.diagnose1);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listDiagnoses;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {Doctor} from '../models/doctor';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {UserService} from './user.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DoctorService {\r\n\r\n  \r\n  urlDoctor = environment.baseUrl + environment.doctor;\r\n  listDoctors: Array<Doctor> = new Array<Doctor>();\r\n  doctor: Doctor;\r\n  editD: Doctor;\r\n  doctorss: Array<Doctor> = new Array<Doctor>();\r\n  termins: Array<string> = new Array<string>();\r\n  doctorsWithSearch: Array<Doctor> = new Array<Doctor>();\r\n  termin: string;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserService\r\n  ) {\r\n    this.getAllDoctors();\r\n  }\r\n\r\n  public loginDoctor(doctor) {\r\n    this.userService.setToken(doctor);\r\n    return this.http.post(environment.baseUrl + '/login', doctor, {responseType: 'text'});\r\n  }\r\n\r\n  public editDoctor(doctor) {\r\n    return this.http.post(this.urlDoctor + '/edit', doctor, {responseType: 'text'});\r\n  }\r\n\r\n  public getDoctor(email: string) {\r\n    if ( this.listDoctors.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listDoctors) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public addDoctor(d: Doctor) {\r\n    if (this.getDoctor(d.email) === null) {\r\n      this.listDoctors.push(d);\r\n    }\r\n  }\r\n\r\n  public setDoctor(d: Doctor) {\r\n    for (const d1 of this.listDoctors) {\r\n      if (d1.email === d.email) {\r\n        d1.password = d.password;\r\n        d1.name = d.name;\r\n        d1.surname = d.surname;\r\n        d1.phone = d.phone;\r\n        d1.workHoursFrom = d.workHoursFrom;\r\n        d1.workHoursTo = d.workHoursTo;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getAllDoctors(): Array<Doctor> {\r\n    this.http.get(this.urlDoctor + '/all').subscribe((data: Doctor[]) => {\r\n        for (const c of data) {\r\n          this.doctor = new Doctor(c.email, c.password, c.name, c.surname, c.phone, c.workHoursFrom, c.workHoursTo, c.specialized, c.doctorRating, c.clinic);\r\n          this.addDoctor(this.doctor);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.listDoctors;\r\n  }\r\n\r\n  public getDoctorsTermins(date: string, email: string): string {\r\n    let params = new HttpParams();\r\n    params = params.append('date', date);\r\n    params = params.append('email', email);\r\n    console.log(params)\r\n    this.http.get(this.urlDoctor + '/terminString', {params, responseType: 'text'}).subscribe((data: string) => {\r\n        this.termins = new Array<string>();\r\n        console.log('Ispod ovde');\r\n        console.log(data);\r\n        this.termin = data;\r\n        this.termins.push(data);\r\n\r\n\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.termin;\r\n  }\r\n\r\n  public getDoctorss() {\r\n    return this.doctorss;\r\n  }\r\n\r\n  public setDoctorss(doctorss: Array<Doctor>) {\r\n    this.doctorss = doctorss;\r\n  }\r\n\r\n  public getDoctrosWithSearch(name: string, surname: string, rating: string): Array<Doctor> {\r\n\r\n    let params = new HttpParams();\r\n    params = params.append('name', name);\r\n    params = params.append('surname', surname);\r\n    params = params.append('rating', rating);\r\n    this.doctorsWithSearch = new Array<Doctor>();\r\n    this.http.get(this.urlDoctor + '/allWithSearch', {params}).subscribe((data: Doctor[]) => {\r\n        console.log(data)\r\n        for (const c of data) {\r\n          this.doctor = new Doctor(c.email, c.password, c.name, c.surname, c.phone, c.workHoursFrom, c.workHoursTo,\r\n            c.specialized, c.doctorRating, c.clinic);\r\n          this.doctorsWithSearch.push(this.doctor);\r\n          console.log(this.doctor);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n      );\r\n\r\n    return this.doctorsWithSearch;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { ExaminationType } from '../models/examinationType';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExaminationTypeService {\r\n\r\n  urlExaminationType = environment.baseUrl + environment.examinationType;\r\n  examinationTypes: Array<ExaminationType> = new Array<ExaminationType>();\r\n  type: ExaminationType;\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  public getAllTypes(): Array<ExaminationType> {\r\n    this.http.get(this.urlExaminationType + '/all').subscribe((data: ExaminationType[]) => {\r\n        for (const c of data) {\r\n          this.type = new ExaminationType(c.label, c.price);\r\n          this.addType(this.type);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.type);\r\n    return this.examinationTypes;\r\n  }\r\n\r\n  public addType(t: ExaminationType) {\r\n    if (this.getType(t.label) === null) {\r\n      this.examinationTypes.push(t);\r\n    }\r\n  }\r\n\r\n  public getType(name: string) {\r\n    if ( this.examinationTypes.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.examinationTypes) {\r\n      if ( u.label === name) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Examination } from '../models/examination';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UserService } from './user.service';\r\nimport { ExaminationKind } from '../models/examinationKind';\r\nimport { ExaminationStatus } from '../models/examinationStatus';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExaminationService {\r\n  url = environment.baseUrl + environment.examination;\r\n  listExaminations: Array<Examination> = new Array<Examination>();\r\n  examination: Examination;\r\n  constructor(\r\n    private http: HttpClient,\r\n  ) {\r\n    this.getAllExaminations();\r\n  }\r\n\r\n  public whichKindExamination(kind: string) {\r\n    if (kind === 'EXAMINATION') {\r\n      return ExaminationKind.EXAMINATION;\r\n    } else {\r\n      return ExaminationKind.OPERATION;\r\n    }\r\n  }\r\n\r\n  public whichStatusExamination(status: string) {\r\n    if (status === 'APPROVED') {\r\n      return ExaminationStatus.APPROVED;\r\n    } else if (status === 'AWAITING') {\r\n      return ExaminationStatus.AWAITING;\r\n    } else if (status === 'PREDEF_BOOKED') {\r\n      return  ExaminationStatus.PREDEF_BOOKED;\r\n    } else {\r\n      return ExaminationStatus.PREDEF_AVAILABLE;\r\n    }\r\n  }\r\n\r\n  public getAllExaminations(): Array<Examination> {\r\n    this.http.get(this.url + '/all').subscribe((data: Examination[]) => {\r\n        this.listExaminations = new Array<Examination>();\r\n        for (const c of data) {\r\n          this.examination =  new Examination(this.whichKindExamination(c.kind.toString()), this.whichStatusExamination(c.status.toString()), c.examinationType, c.discount, c.doctorRating, c.clinicRating, c.nurse, c.clinic, c.patient, c.doctors, c.id);\r\n          this.listExaminations.push(this.examination)\r\n          console.log(this.examination);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.listExaminations);\r\n    return this.listExaminations;\r\n  }\r\n\r\n  public addExamination(e: Examination) {\r\n    if (this.getExamination(e.id) === null) {\r\n      this.listExaminations.push(e);\r\n    }\r\n  }\r\n  public getExamination(id: number) {\r\n    if ( this.listExaminations.length === 0) {\r\n      return null;\r\n    }\r\n    for (const e of this.listExaminations) {\r\n      if (e.id === id) {\r\n        return e;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { MedicalRecord } from '../models/medicalRecord';\r\nimport { ExaminationReport } from '../models/examinationReport';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MedicalRecordService {\r\n\r\n  url = environment.baseUrl + environment.medicalRecord;\r\n  listMedicalRecord: Array<MedicalRecord> = new Array<MedicalRecord>();\r\n  medicalRecord: MedicalRecord;\r\n  examinationReport: ExaminationReport;\r\n\r\n  constructor(private http: HttpClient, ) {\r\n    this.getAllMedicalRecords();\r\n  }\r\n\r\n  public addMedicalRecord(mr: MedicalRecord) {\r\n    if (this.getMedicalRecord(mr.id) === null) {\r\n      this.listMedicalRecord.push(mr);\r\n    }\r\n  }\r\n\r\n  public getAllMedicalRecords(): Array<MedicalRecord> {\r\n    this.http.get(this.url + '/all').subscribe((data: MedicalRecord[]) => {\r\n        this.listMedicalRecord = new Array<MedicalRecord>();\r\n        for (const c of data) {\r\n          // Ostalo je da se doda examinaton_report u konstruktoru\r\n          console.log(c.id);\r\n          this.medicalRecord = new MedicalRecord(c.id, c.height, c.weight, c.bloodType, c.allergies, c.patient);\r\n          this.listMedicalRecord.push(this.medicalRecord);\r\n          console.log(this.medicalRecord);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.listMedicalRecord);\r\n    return this.listMedicalRecord;\r\n  }\r\n\r\n  public getMedicalRecord(id: number) {\r\n    if (this.listMedicalRecord.length === 0) {\r\n      return null;\r\n    }\r\n    for (const e of this.listMedicalRecord) {\r\n      if (e.id === id) {\r\n        return e;\r\n      }\r\n    }\r\n  }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport {Nurse} from '../models/nurse';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserService} from './user.service';\r\nimport {environment} from '../../environments/environment';\r\nimport {Medicine} from '../models/medicine';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MedicineService {\r\n\r\n  url = environment.baseUrl + environment.medicine\r\n  listMedicines: Array<Medicine> = new Array<Medicine>();\r\n  medicine: Medicine;\r\n\r\n  constructor(\r\n    private http: HttpClient) {\r\n\r\n    this.getAllMedicines();\r\n  }\r\n\r\n  public editMedicine(medicine) {\r\n    return this.http.post(this.url + '/edit', medicine, {responseType: 'text'});\r\n  }\r\n\r\n  public newMedicine(medicine) {\r\n    return this.http.post(this.url + '/clinicalCenterAdministrator/addMedicine', medicine);\r\n  }\r\n\r\n\r\n  public getMedicine(id: number) {\r\n    if ( this.listMedicines.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listMedicines) {\r\n      if ( u.id === id) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public setMedicine(p: Medicine) {\r\n\r\n    for (const p1 of this.listMedicines) {\r\n      if (p1.id === p.id) {\r\n        p1.title = p.title;\r\n        p1.description = p.description;\r\n        p1.strenght = p.strenght;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public addMedicine(n: Medicine) {\r\n    if (this.getMedicine(n.id) === null) {\r\n      this.listMedicines.push(n);\r\n    }\r\n  }\r\n\r\n  public getAllMedicines(): Array<Medicine> {\r\n    this.http.get(this.url + '/getAllMedicines').subscribe((data: Medicine[]) => {\r\n        for (const c of data) {\r\n          this.medicine = new Medicine(c.id, c.title, c.description, c.strenght);\r\n          this.addMedicine(this.medicine);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listMedicines;\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport {Nurse} from '../models/nurse';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\n\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\n\r\n\r\nexport class NurseService{\r\n\r\n    urlNurse = environment.baseUrl + environment.nurse;\r\n    listNurses: Array<Nurse>= new Array<Nurse>();\r\n    nurse:Nurse;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllNurses();\r\n    }\r\n  \r\n    public newNurse(nurse) {\r\n      return this.http.post(this.urlNurse + '/register', nurse);    // da li treba ?\r\n    }\r\n  \r\n    public loginNurse(nurse) {\r\n      this.userService.setToken(nurse);\r\n      return this.http.post(environment.baseUrl + '/login', nurse, {responseType: 'text'});\r\n    }\r\n\r\n    public editNurse(nurse){\r\n      return this.http.post(this.urlNurse + '/edit', nurse,{responseType: 'text'});\r\n    }\r\n  \r\n    public addNurse(p: Nurse) {\r\n      if(this.getNurse(p.email)===null){\r\n        this.listNurses.push(p);\r\n      }\r\n    }\r\n  \r\n    public getNurse(email: string) {\r\n      if ( this.listNurses.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listNurses) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setNurse(p: Nurse) {\r\n\r\n      for (const p1 of this.listNurses) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n          p1.country = p.country;\r\n          p1.address = p.address;\r\n          p1.surname = p.surname;\r\n          p1.city = p.city;\r\n          p1.password = p.password;\r\n          p1.workHoursFrom=p.workHoursFrom;\r\n          p1.workHoursTo=p.workHoursTo;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    public getAllNurses(): Array<Nurse> {\r\n      this.http.get(this.urlNurse + '/all').subscribe((data: Nurse[]) => {\r\n          for (const c of data) {\r\n            this.nurse = new Nurse(c.email,c.password,c.name,c.surname,c.number,c.address,c.city,c.country, c.workHoursFrom, c.workHoursTo);\r\n            this.addNurse(this.nurse);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listNurses;\r\n    }\r\n  \r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport {Patient} from '../models/patient';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\nimport { PatientStatus } from '../models/patientStatus';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\nexport class PatientService{\r\n\r\n    urlPatient = environment.baseUrl + environment.patient;\r\n    listPatients: Array<Patient>= new Array<Patient>();\r\n    patient:Patient;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllPatients();\r\n    }\r\n  \r\n    public newPatient(patient) {\r\n      return this.http.post(this.urlPatient + '/register', patient);\r\n    }\r\n  \r\n    public loginPatient(patient) {\r\n      this.userService.setToken(patient);\r\n      return this.http.post(environment.baseUrl + '/login', patient, {responseType: 'text'});\r\n    }\r\n\r\n    public editPatient(patient){\r\n      return this.http.post(this.urlPatient + '/edit', patient,{responseType: 'text'});\r\n    }\r\n  \r\n    public addPatient(p: Patient) {\r\n      if(this.getPatient(p.email)===null){\r\n        this.listPatients.push(p);\r\n      }\r\n    }\r\n  \r\n    public getPatient(email: string) {\r\n      if ( this.listPatients.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listPatients) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setPatient(p: Patient) {\r\n\r\n      for (const p1 of this.listPatients) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n          p1.country = p.country;\r\n          p1.address = p.address;\r\n          p1.surname = p.surname;\r\n          p1.city = p.city;\r\n          p1.password = p.password;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    public getAllPatients(): Array<Patient> {\r\n      this.http.get(this.urlPatient + '/all').subscribe((data: Patient[]) => {\r\n          for (const c of data) {\r\n            this.patient = new Patient(c.email,c.password,c.name,c.surname,c.number,c.address,c.city,c.country,c.insuranceID,c.status);\r\n            this.addPatient(this.patient);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listPatients;\r\n    }\r\n  \r\n\r\n}","import {User} from '../models/user'\r\nimport { Injectable } from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {Role} from '../models/role';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\nexport const TOKEN='LoggedInUser';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class UserService{\r\n    urlUser = environment.baseUrl + environment.user;\r\n    users: Array<User>=new Array<User>();\r\n    user:User= new User('', '', Role.NONE);\r\n    u:User;\r\n    constructor(private router: Router, private http: HttpClient) {\r\n      this.getAllUsers();\r\n      localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n    }\r\n\r\n    public addUser(u: User){\r\n      if (this.getUser(u.email) === null) {\r\n        this.users.push(u);\r\n      }\r\n    }\r\n\r\n    \r\n  public getUser(email: string) {\r\n    if ( this.users.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.users) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n    public setToken(user){\r\n        this.user=user;\r\n        localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n\r\n    }\r\n\r\n    public isLoggedIn() {\r\n        if(localStorage.getItem(TOKEN)!==null){\r\n          return localStorage.getItem(TOKEN);\r\n        }else {\r\n          \r\n          return null;\r\n        }\r\n      }\r\n\r\n      public setUser(u: User) {\r\n\r\n        for (const p1 of this.users) {\r\n          if (p1.email === u.email) {\r\n            p1.password = u.password;\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n    public logout(){\r\n      this.router.navigate(['']);\r\n      this.user =  new User('', '', Role.NONE);\r\n      localStorage.removeItem(TOKEN);\r\n      localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n    }\r\n\r\n    public isNone() {\r\n      if (this.isLoggedIn()) {\r\n        return this.user.role === Role.NONE;\r\n      }\r\n    }\r\n    \r\n    public isPatient() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.PATIENT;\r\n        }\r\n      }\r\n\r\n      public isDoctor() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.DOCTOR;\r\n        }\r\n      }\r\n\r\n      public isNurse() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.NURSE;\r\n        }\r\n      }\r\n\r\n      public isCCAdmin() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.CCADMIN;\r\n        }\r\n      }\r\n\r\n      public isClinicAdministrator() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.CLINICADMINISTRATOR;\r\n        }\r\n      }\r\n\r\n      public getAllUsers(): Array<User> {\r\n        this.http.get(this.urlUser + '/all').subscribe((data: User[]) => {\r\n            for (const c of data) {\r\n                this.u = new User(c.email, c.password, this.whichRole(c.role.toString()));\r\n                this.addUser(this.u);\r\n            }\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }\r\n        );\r\n        console.log(this.users);\r\n        return this.users;\r\n      }\r\n\r\n      public whichRole(role: string) {\r\n        if (role === 'PATIENT') {\r\n          return Role.PATIENT;\r\n        } else if (role === 'DOCTOR') {\r\n          return  Role.DOCTOR;\r\n        } else if (role === 'NURSE') {\r\n          return  Role.NURSE;\r\n        } else if (role === 'CCADMIN') {\r\n          return  Role.CCADMIN;\r\n        } else if (role === 'CLINICADMINISTRATOR') {\r\n          return  Role.CLINICADMINISTRATOR;\r\n        } else {\r\n          console.log(\"ovde je null\");\r\n          return null;\r\n        }\r\n    \r\n      }\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport {Zahtev} from '../models/zahtev';\r\nimport {environment} from '../../environments/environment';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserService} from './user.service';\r\nimport {ZahtevStatus} from '../models/zahtevStatus';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VacationService {\r\n\r\n  urlVacation = environment.baseUrl + environment.zahtev;\r\n  listVacation: Array<Zahtev> = new Array<Zahtev>();\r\n  zahtev: Zahtev;\r\n  tmp: Array<Zahtev>;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserService\r\n  ) {\r\n\r\n     this.getAllVacations();\r\n     this.getAllRequests();\r\n  }\r\n\r\n  public newVacation(zahtev) {\r\n    return this.http.post(this.urlVacation + '/nurse/VacationRequest', zahtev);\r\n  }\r\n\r\n  public newVacation1(zahtev) {\r\n    return this.http.post(this.urlVacation + '/nurse/VacationRequest', zahtev);\r\n  }\r\n\r\n  public addVacation(v: Zahtev) {\r\n    if (this.getVacations(v.email) === null) {\r\n      this.listVacation.push(v);\r\n    }\r\n  }\r\n\r\n  public addVacation1(v: Zahtev) {\r\n    if (this.getVacations(v.email) === null) {\r\n      this.listVacation.push(v);\r\n    }\r\n  }\r\n\r\n  public getVacations(email: string) {\r\n    if ( this.listVacation.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listVacation) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n  public getVacations1(email: string) {\r\n    if ( this.listVacation.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listVacation) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public editVacation(zahtev) {\r\n    return this.http.post(this.urlVacation + '/edit', zahtev, {responseType: 'text'});\r\n  }\r\n\r\n  public setVacation(p: Zahtev) {\r\n\r\n    for (const p1 of this.listVacation) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.surname = p.surname;\r\n        p1.startingDate = p.startingDate;\r\n        p1.finishDate = p.finishDate;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public setVacation1(p: Zahtev) {\r\n\r\n    for (const p1 of this.listVacation) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.surname = p.surname;\r\n        p1.startingDate = p.startingDate;\r\n        p1.finishDate = p.finishDate;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public whichStatus(status: string) {\r\n    if (status === 'AWAITING_APPROVAL') {\r\n      return ZahtevStatus.AWAITING_APPROVAL;\r\n    } else {\r\n      return ZahtevStatus.APPROVED;\r\n    }\r\n\r\n  }\r\n\r\n  public getAllVacations(): Array<Zahtev> {\r\n    this.http.get(this.urlVacation + '/all').subscribe((data: Zahtev[]) => {\r\n        for (const c of data) {\r\n          this.zahtev = new Zahtev(c.email, c.name, c.surname, c.startingDate, c.finishDate, this.whichStatus(c.status.toString()));\r\n          this.addVacation(this.zahtev);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n        console.log(\"ovde je greska antonela\");\r\n      }\r\n    );\r\n\r\n    return this.listVacation;\r\n  }\r\n\r\n  public getAllRequests(): Array<Zahtev> {\r\n    this.http.get(this.urlVacation + '/VacationRequest').subscribe((data: Zahtev[]) => {\r\n        this.tmp = new Array<Zahtev>();\r\n        for (const c of data) {\r\n          this.zahtev = new Zahtev(c.email, c.name, c.surname, c.startingDate, c.finishDate, ZahtevStatus.AWAITING_APPROVAL);\r\n          this.tmp.push(this.zahtev);\r\n          console.log(this.zahtev);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    console.log(this.tmp);\r\n    return this.tmp;\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  baseUrl: 'http://localhost:8081',\r\n  user: '/user',\r\n  patient: '/patient',\r\n  doctor: '/doctor',\r\n  nurse: '/nurse',\r\n  clinic: '/clinic',\r\n  examination: '/examination',\r\n  medicalRecord: '/medicalRecord',\r\n  examinationType: '/examination-type',\r\n  clinicalCenterAdmininistrator: '/clinicalCenterAdministrator',\r\n  codebook: '/codebook',\r\n  clinicAdministrator: '/clinicAdministrator',\r\n  zahtev: '/zahtev',\r\n  diagnose: '/diagnose',\r\n  medicine: '/medicine',\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import 'hammerjs';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}
>>>>>>> Stashed changes
