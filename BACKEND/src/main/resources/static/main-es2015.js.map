{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.html","./src/app/components/clinicadministrator-page/clinicadministrator-page.component.html","./src/app/components/clinicadministrator-profile/clinicadministrator-profile.component.html","./src/app/components/clinics-page/clinics-page.component.html","./src/app/components/doctor-page/doctor-page.component.html","./src/app/components/doctor-profile/doctor-profile.component.html","./src/app/components/login/login.component.html","./src/app/components/medical-history-page/medical-history-page.component.html","./src/app/components/medical-record-page/medical-record-page.component.html","./src/app/components/nurse-page/nurse-page.component.html","./src/app/components/nurse-profile/nurse-profile.component.html","./src/app/components/patient-page/patient-page.component.html","./src/app/components/patient-profile/patient-profile.component.html","./src/app/components/register-patient/register-patient.component.html","./node_modules/tslib/tslib.es6.js","./src/app/app-routing.module.ts","./src/app/app.component.css","./src/app/app.component.ts","./src/app/app.module.ts","./src/app/components/clinicadministrator-page/clinicadministrator-page.component.css","./src/app/components/clinicadministrator-page/clinicadministrator-page.component.ts","./src/app/components/clinicadministrator-profile/clinicadministrator-profile.component.css","./src/app/components/clinicadministrator-profile/clinicadministrator-profile.component.ts","./src/app/components/clinics-page/clinics-page.component.css","./src/app/components/clinics-page/clinics-page.component.ts","./src/app/components/doctor-page/doctor-page.component.css","./src/app/components/doctor-page/doctor-page.component.ts","./src/app/components/doctor-profile/doctor-profile.component.css","./src/app/components/doctor-profile/doctor-profile.component.ts","./src/app/components/login/login.component.css","./src/app/components/login/login.component.ts","./src/app/components/medical-history-page/medical-history-page.component.css","./src/app/components/medical-history-page/medical-history-page.component.ts","./src/app/components/medical-record-page/medical-record-page.component.css","./src/app/components/medical-record-page/medical-record-page.component.ts","./src/app/components/nurse-page/nurse-page.component.css","./src/app/components/nurse-page/nurse-page.component.ts","./src/app/components/nurse-profile/nurse-profile.component.css","./src/app/components/nurse-profile/nurse-profile.component.ts","./src/app/components/patient-page/patient-page.component.css","./src/app/components/patient-page/patient-page.component.ts","./src/app/components/patient-profile/patient-profile.component.css","./src/app/components/patient-profile/patient-profile.component.ts","./src/app/components/register-patient/register-patient.component.css","./src/app/components/register-patient/register-patient.component.ts","./src/app/material-module.ts","./src/app/models/clinic.ts","./src/app/models/clinicadministrator.ts","./src/app/models/doctor.ts","./src/app/models/examination.ts","./src/app/models/examinationTable.ts","./src/app/models/medicalRecord.ts","./src/app/models/nurse.ts","./src/app/models/patient.ts","./src/app/models/patientStatus.ts","./src/app/models/role.ts","./src/app/models/user.ts","./src/app/services/clinic.service.ts","./src/app/services/clinicadministrator.service.ts","./src/app/services/doctor.service.ts","./src/app/services/examination.service.ts","./src/app/services/medical-record.service.ts","./src/app/services/nurse.service.ts","./src/app/services/patient.service.ts","./src/app/services/user.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","export default \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\r\\n    <mat-sidenav #drawer class=\\\"sidenav\\\" fixedInViewport [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\r\\n      [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\" [opened]=\\\"(isHandset$ | async) === true\\\">\\r\\n      <mat-toolbar>Menu</mat-toolbar>\\r\\n        <mat-nav-list *ngIf = \\\"isNone()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/login\\\">Login</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/register\\\">Register</a>\\r\\n        </mat-nav-list>\\r\\n  \\r\\n        <mat-nav-list *ngIf=\\\"isPatient()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/patient/profile\\\">Profile</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/medicalRecord\\\">Medical record</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/medicalHistory\\\">Medical history</a>\\r\\n          <a mat-list-item routerLink=\\\"/patient/clinics\\\">Clinics</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n  \\r\\n        <mat-nav-list *ngIf=\\\"isDoctor()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/doctor/profile\\\">Profile</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n\\r\\n        <mat-nav-list *ngIf=\\\"isNurse()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/nurse/profile\\\">Profile</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n        <mat-nav-list *ngIf=\\\"isClincadministrator()\\\">\\r\\n          <a mat-list-item routerLink=\\\"/clinicadministrator/profile\\\">Profile</a>\\r\\n          <a mat-list-item (click)=\\\"onLogout()\\\">Logout</a>\\r\\n        </mat-nav-list>\\r\\n    </mat-sidenav>\\r\\n    <mat-sidenav-content>\\r\\n      <mat-toolbar>\\r\\n        <button type=\\\"button\\\" aria-label=\\\"Toggle sidenav\\\" mat-icon-button (click)=\\\"drawer.toggle()\\\">\\r\\n          <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\r\\n        </button>\\r\\n        <span>Clinical Centre</span>\\r\\n      </mat-toolbar>\\r\\n      <!-- Add Content Here -->\\r\\n      <router-outlet></router-outlet>\\r\\n    </mat-sidenav-content>\\r\\n  </mat-sidenav-container>\"","export default \"<p>WELCOME ADMIN!</p>\\n\"","export default \"<div class=\\\"main-content\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"row\\\">\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\n          <mat-card>\\n            <h3>{{selectedClinicadministrator.name}} profile</h3>\\n            <hr>\\n            <form [formGroup]=\\\"clinicAdministratorForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\n  \\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"email\\\">Email</label>\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorForm.get('email').errors }\\\">\\n  \\n                <div *ngIf=\\\"submitted && clinicAdministratorForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"clinicAdministratorForm.get('email').errors['required']\\\">Email is required</div>\\n                  <div *ngIf=\\\"clinicAdministratorForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\n                </div>\\n              </div>\\n  \\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"password\\\">Password</label>\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorForm.get('password').errors }\\\">\\n                <div *ngIf=\\\"submitted && clinicAdministratorForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"clinicAdministratorForm.get('password').errors['required']\\\">Password is required</div>\\n                  <div *ngIf=\\\"clinicAdministratorForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\n                    long</div>\\n                  <div *ngIf=\\\"clinicAdministratorForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\n                    1 uppercase letter\\n                    and 1 number</div>\\n                </div>\\n              </div>\\n  \\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"name\\\">First Name</label>\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorForm.get('name').errors }\\\" />\\n                <div *ngIf=\\\"submitted && clinicAdministratorForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\" clinicAdministratorForm.get('name').errors['required']\\\">First Name is required</div>\\n                </div>\\n              </div>\\n  \\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"surname\\\">Last Name</label>\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorForm.get('surname').errors }\\\" />\\n                <div *ngIf=\\\"submitted && clinicAdministratorForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"clinicAdministratorForm.get('surname').errors['required']\\\">Last Name is required</div>\\n                </div>\\n              </div>\\n  \\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"number\\\">Phone Number</label>\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorForm.get('number').errors }\\\" />\\n                <div *ngIf=\\\"submitted && clinicAdministratorForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"clinicAdministratorForm.get('number').errors['required']\\\">Phone Number is required</div>\\n                  <div *ngIf=\\\"clinicAdministratorForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\n                    digits\\n                  </div>\\n                </div>\\n              </div>\\n              \\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"clinic\\\">Clinic</label>\\n                <input type=\\\"text\\\" id=\\\"clinic\\\" formControlName=\\\"clinic\\\" class=\\\"form-control\\\"\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && clinicAdministratorForm.get('clinic').errors }\\\" />\\n                <div *ngIf=\\\"submitted && clinicAdministratorForm.get('clinic').errors\\\" class=\\\"invalid-feedback\\\">\\n                  <div *ngIf=\\\"clinicAdministratorForm.get('clinic').errors['required']\\\">Clinic is required</div>\\n                </div>\\n              </div>\\n              \\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\n  \\n            </form>\\n          </mat-card>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\"","export default \"<!-- page-header -->\\r\\n<div class=\\\"page-header\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n              <div class=\\\"page-caption\\\">\\r\\n                  <h1 class=\\\"page-title\\\">Clinics in the clinical centre</h1>\\r\\n                  <div class=\\\"text-center mt-4\\\">\\r\\n                  </div>\\r\\n              </div>\\r\\n          </div>\\r\\n      </div>\\r\\n  </div>\\r\\n</div>\\r\\n<!-- /.page-header-->\\r\\n\\r\\n<!-- page-content -->\\r\\n<div class=\\\"card-section\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n      <div class=\\\"card-block bg-white mb30\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                  <!-- section-title -->\\r\\n                  <div class=\\\"section-title mb-0\\\">\\r\\n                      <table mat-table [dataSource]=\\\"clinicDataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n\\r\\n                          <ng-container matColumnDef=\\\"name\\\">\\r\\n                              <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\\r\\n                              <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">\\r\\n                                  {{element.name}}\\r\\n                              </td>\\r\\n                          </ng-container>\\r\\n\\r\\n                          <ng-container matColumnDef=\\\"address\\\">\\r\\n                              <th mat-header-cell *matHeaderCellDef mat-sort-header> Address </th>\\r\\n                              <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.address}} </td>\\r\\n                          </ng-container>\\r\\n                          <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                          <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                      </table>\\r\\n                      <mat-paginator [pageSize]=itemsPerPage showFirstLastButtons></mat-paginator>\\r\\n                  </div>\\r\\n                  <!-- /.section-title -->\\r\\n              </div>\\r\\n          </div>\\r\\n      </div>\\r\\n  </div>\\r\\n</div>\\r\\n<!-- /.page-content -->\"","export default \"<h1>WELCOME DOCTOR</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>{{selectedDoctor.name}} profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"doctorForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"doctorForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"doctorForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"doctorForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" doctorForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"doctorForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n              \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Address</label>\\r\\n                <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('address').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('address').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('city').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('city').errors['required']\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('country').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('country').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"specialization\\\">Specialization</label>\\r\\n                <input type=\\\"text\\\" id=\\\"specialization\\\" formControlName=\\\"specialization\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && doctorForm.get('specialization').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && doctorForm.get('specialization').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"doctorForm.get('specialization').errors['required']\\\">Specialization is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n              \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n        <div class=\\\"container\\\">\\r\\n          <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n              <mat-card>\\r\\n                <h3>Login</h3>\\r\\n                <hr>\\r\\n                <form [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"email\\\">Email</label>\\r\\n                    <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\">\\r\\n                    <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\r\\n                      <div *ngIf=\\\"f.email.errors.email\\\">Email must be a valid email address</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <label for=\\\"password\\\">Password</label>\\r\\n                    <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\">\\r\\n                    <div *ngIf=\\\"submitted && f.password.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"f.password.errors.required\\\">Password is required</div>\\r\\n                      <div *ngIf=\\\"f.password.errors.minlength\\\">Password must be at least 8 characters long</div>\\r\\n                      <div *ngIf=\\\"f.password.errors.pattern\\\">Password must contain at least 1 lowercase, 1 uppercase letter and 1 number</div>\\r\\n                    </div>\\r\\n                  </div>\\r\\n      \\r\\n                  <div class=\\\"form-group\\\">\\r\\n                    <a routerLink=\\\"/patient/register\\\">Don't have an account? Register here.</a>\\r\\n                  </div>\\r\\n      \\r\\n                  <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Login</button>\\r\\n      \\r\\n                </form>\\r\\n              </mat-card>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\"","export default \"<!-- page-header -->\\r\\n<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">History of examinations and operations</h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"Kind\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Kind </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">{{element.kind}}</td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Status\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Status </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.status}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Type\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Type </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.type}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Room\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Room </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.room}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Discount\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Discount </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.discount}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Nurse\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Nurse </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.nurse}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Doctors\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Doctors </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.doctors}} </td>\\r\\n                            </ng-container>\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                        <mat-paginator [pageSize]=itemsPerPage showFirstLastButtons></mat-paginator>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<div class=\\\"page-header\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                <div class=\\\"page-caption\\\">\\r\\n                    <h1 class=\\\"page-title\\\">Medical record</h1>\\r\\n                    <div class=\\\"text-center mt-4\\\">\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-header-->\\r\\n  \\r\\n  <!-- page-content -->\\r\\n  <div class=\\\"card-section\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n        <div class=\\\"card-block bg-white mb30\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-xl-12 col-lg-12 col-md-12 col-sm-12 col-12\\\">\\r\\n                    <!-- section-title -->\\r\\n                    <div class=\\\"section-title mb-0\\\">\\r\\n                        <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8 table\\\" matSort>\\r\\n  \\r\\n                            <ng-container matColumnDef=\\\"Height\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Height </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\">{{element.height}}</td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Weight\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Weight </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.weight}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"BloodType\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Blood type </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.bloodType}} </td>\\r\\n                            </ng-container>\\r\\n                            <ng-container matColumnDef=\\\"Allergies\\\">\\r\\n                                <th mat-header-cell *matHeaderCellDef mat-sort-header> Allergies </th>\\r\\n                                <td mat-cell *matCellDef=\\\"let element\\\" class=\\\"text-in-table\\\"> {{element.allergies}} </td>\\r\\n                            </ng-container>\\r\\n                            <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns sticky: true\\\"></tr>\\r\\n                            <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\r\\n                        </table>\\r\\n                    </div>\\r\\n                    <!-- /.section-title -->\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <!-- /.page-content -->\"","export default \"<h1>WELCOME NURSE</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n        <mat-card>\\r\\n          <h3>{{selectedNurse.name}} profile</h3>\\r\\n          <hr>\\r\\n          <form [formGroup]=\\\"nurseForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"email\\\">Email</label>\\r\\n              <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('email').errors }\\\">\\r\\n\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"password\\\">Password</label>\\r\\n              <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('password').errors }\\\">\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                  long</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                  1 uppercase letter\\r\\n                  and 1 number</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"name\\\">First Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('name').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\" nurseForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"surname\\\">Last Name</label>\\r\\n              <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('surname').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"address\\\">Address</label>\\r\\n              <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('address').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('address').errors['required']\\\">Address is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"city\\\">City</label>\\r\\n              <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\"  class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('city').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('city').errors['required']\\\">City is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"country\\\">Country</label>\\r\\n              <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('country').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('country').errors['required']\\\">Country is required</div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"form-group\\\">\\r\\n              <label for=\\\"number\\\">Phone Number</label>\\r\\n              <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                     [ngClass]=\\\"{ 'is-invalid': submitted && nurseForm.get('number').errors }\\\" />\\r\\n              <div *ngIf=\\\"submitted && nurseForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                <div *ngIf=\\\"nurseForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                <div *ngIf=\\\"nurseForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                  digits\\r\\n                </div>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n            <!-- <div class=\\\"form-group\\\">\\r\\n               <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n               <input type=\\\"text\\\" readonly=\\\"readonly\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\"  class=\\\"form-control\\\"\\r\\n                      [ngClass]=\\\"{ 'is-invalid': submitted &&  patientForm.get('insuranceID').errors }\\\" />\\r\\n               <div *ngIf=\\\"submitted && patientForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                 <div *ngIf=\\\"patientForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                 </div>\\r\\n                 <div\\r\\n                   *ngIf=\\\"patientForm.get('insuranceID').errors['minlength'] ||patientForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                   Health\\r\\n                   Insurance ID must contain exactly 13 characters</div>\\r\\n               </div>\\r\\n             </div> -->\\r\\n\\r\\n\\r\\n\\r\\n             <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n\\r\\n           </form>\\r\\n         </mat-card>\\r\\n       </div>\\r\\n     </div>\\r\\n   </div>\\r\\n </div>\\r\\n\"","export default \"<h1>WELCOME</h1>\\r\\n\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>{{selectedPatient.name}} profile</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"patientForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" readonly=\\\"readonly\\\" id=\\\"email\\\" text=\\\"test\\\"  formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && patientForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"text\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" patientForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Address</label>\\r\\n                <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('address').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('address').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('city').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('city').errors['required']\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('country').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('country').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && patientForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"patientForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n                <input type=\\\"text\\\" readonly=\\\"readonly\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\"  class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted &&  patientForm.get('insuranceID').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && patientForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"patientForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                  </div>\\r\\n                  <div\\r\\n                    *ngIf=\\\"patientForm.get('insuranceID').errors['minlength'] ||patientForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                    Health\\r\\n                    Insurance ID must contain exactly 13 characters</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              \\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Save</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","export default \"<div class=\\\"main-content\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-8 offset-md-2\\\">\\r\\n          <mat-card>\\r\\n            <h3>Registration</h3>\\r\\n            <hr>\\r\\n            <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email</label>\\r\\n                <input type=\\\"email\\\" id=\\\"email\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('email').errors }\\\">\\r\\n  \\r\\n                <div *ngIf=\\\"submitted && registerForm.get('email').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('email').errors['required']\\\">Email is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('email').errors['email']\\\">Email must be a valid email address</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"password\\\">Password</label>\\r\\n                <input type=\\\"password\\\" id=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('password').errors }\\\">\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('password').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['required']\\\">Password is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['minlength']\\\">Password must be at least 8 characters\\r\\n                    long</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('password').errors['pattern']\\\">Password must contain at least 1 lowercase,\\r\\n                    1 uppercase letter\\r\\n                    and 1 number</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"name\\\">First Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"name\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('name').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('name').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\" registerForm.get('name').errors['required']\\\">First Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"surname\\\">Last Name</label>\\r\\n                <input type=\\\"text\\\" id=\\\"surname\\\" formControlName=\\\"surname\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('surname').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('surname').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('surname').errors['required']\\\">Last Name is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"address\\\">Address</label>\\r\\n                <input type=\\\"text\\\" id=\\\"address\\\" formControlName=\\\"address\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('address').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('address').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('address').errors['required']\\\">Address is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"city\\\">City</label>\\r\\n                <input type=\\\"text\\\" id=\\\"city\\\" formControlName=\\\"city\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('city').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('city').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('city').errors['required']\\\">City is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"country\\\">Country</label>\\r\\n                <input type=\\\"text\\\" id=\\\"country\\\" formControlName=\\\"country\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('country').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('country').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('country').errors['required']\\\">Country is required</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"number\\\">Phone Number</label>\\r\\n                <input type=\\\"number\\\" id=\\\"number\\\" formControlName=\\\"number\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted && registerForm.get('number').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('number').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('number').errors['required']\\\">Phone Number is required</div>\\r\\n                  <div *ngIf=\\\"registerForm.get('number').errors['minlength']\\\">A phone number must have at least 9\\r\\n                    digits\\r\\n                  </div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"insuranceID\\\">Health Insurance ID</label>\\r\\n                <input type=\\\"text\\\" id=\\\"insuranceID\\\" formControlName=\\\"insuranceID\\\" class=\\\"form-control\\\"\\r\\n                       [ngClass]=\\\"{ 'is-invalid': submitted &&  registerForm.get('insuranceID').errors }\\\" />\\r\\n                <div *ngIf=\\\"submitted && registerForm.get('insuranceID').errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                  <div *ngIf=\\\"registerForm.get('insuranceID').errors['required']\\\">Health Insurance ID is required\\r\\n                  </div>\\r\\n                  <div\\r\\n                    *ngIf=\\\"registerForm.get('insuranceID').errors['minlength'] ||registerForm.get('insuranceID').errors['maxlength']\\\">\\r\\n                    Health\\r\\n                    Insurance ID must contain exactly 13 characters</div>\\r\\n                </div>\\r\\n              </div>\\r\\n  \\r\\n              <div class=\\\"form-group\\\">\\r\\n                <a routerLink=\\\"/patient/login\\\">Already have an account? Login here.</a>\\r\\n              </div>\\r\\n  \\r\\n              <button mat-raised-button color=\\\"primary\\\" class=\\\"pull-right\\\">Register</button>\\r\\n  \\r\\n            </form>\\r\\n          </mat-card>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\"","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {LoginComponent} from './components/login/login.component'\r\nimport {RegisterPatientComponent} from './components/register-patient/register-patient.component'\r\nimport {PatientPageComponent} from './components/patient-page/patient-page.component'\r\nimport { DoctorPageComponent } from './components/doctor-page/doctor-page.component';\r\nimport {PatientProfileComponent} from './components/patient-profile/patient-profile.component'\r\nimport { MedicalRecordPageComponent } from './components/medical-record-page/medical-record-page.component';\r\nimport { MedicalHistoryPageComponent } from './components/medical-history-page/medical-history-page.component';\r\nimport { ClinicsPageComponent } from './components/clinics-page/clinics-page.component';\r\nimport { DoctorProfileComponent } from './components/doctor-profile/doctor-profile.component';\r\nimport {NursePageComponent} from './components/nurse-page/nurse-page.component';\r\nimport {NurseProfileComponent} from './components/nurse-profile/nurse-profile.component';\r\nimport {ClinicadministratorPageComponent} from './components/clinicadministrator-page/clinicadministrator-page.component';\r\nimport {ClinicadministratorProfileComponent} from './components/clinicadministrator-profile/clinicadministrator-profile.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'login',\r\n    component: LoginComponent,\r\n  },\r\n  {\r\n    path: 'patient/register',\r\n    component: RegisterPatientComponent,\r\n  },\r\n  {\r\n    path: 'patient/home',\r\n    component: PatientPageComponent,\r\n  },\r\n  {\r\n    path:'doctor/home',\r\n    component: DoctorPageComponent\r\n  },\r\n  {\r\n    path:'doctor/profile',\r\n    component: DoctorProfileComponent\r\n  },\r\n  {\r\n    path:'clinicadministrator/home',\r\n    component: ClinicadministratorPageComponent\r\n  },\r\n  {\r\n    path:'clinicadministrator/profile',\r\n    component: ClinicadministratorProfileComponent\r\n  },\r\n  {\r\n    path:'nurse/home',\r\n    component: NursePageComponent\r\n  },\r\n  {\r\n    path:'nurse/profile',\r\n    component: NurseProfileComponent\r\n  },\r\n  {\r\n    path:'patient/profile',\r\n    component: PatientProfileComponent\r\n  },{\r\n    path:'patient/medicalRecord',\r\n    component: MedicalRecordPageComponent\r\n  },{\r\n    path:'patient/medicalHistory',\r\n    component: MedicalHistoryPageComponent\r\n  },{\r\n    path:'patient/clinics',\r\n    component: ClinicsPageComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","export default \".example-full-width {\\r\\n    width: 100%;\\r\\n  }\\r\\n  \\r\\n  .main-content {\\r\\n    margin: 20px 0;\\r\\n  }\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxXQUFXO0VBQ2I7O0VBRUE7SUFDRSxjQUFjO0VBQ2hCIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuZXhhbXBsZS1mdWxsLXdpZHRoIHtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuICBcclxuICAubWFpbi1jb250ZW50IHtcclxuICAgIG1hcmdpbjogMjBweCAwO1xyXG4gIH0iXX0= */\"","import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\r\nimport { map, shareReplay } from 'rxjs/operators';\r\nimport {UserService} from '../app/services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\r\n    .pipe(\r\n      map(result => result.matches),\r\n      shareReplay()\r\n    );\r\n\r\n  constructor(private breakpointObserver: BreakpointObserver,\r\n    private userService:UserService) { }\r\n\r\n  public isLoggedIn() {\r\n    return this.userService.isLoggedIn();\r\n  }\r\n\r\n  public isNone(){\r\n    return this.userService.isNone();\r\n  }\r\n\r\n  public isPatient() {\r\n    return this.userService.isPatient();\r\n  }\r\n\r\n  public isDoctor() {\r\n    return this.userService.isDoctor();\r\n  }\r\n\r\n  public isNurse() {\r\n    return this.userService.isNurse();\r\n  }\r\n\r\n  public isClinicadministrator() {\r\n    return this.userService.isClinicadministrator();\r\n  }\r\n\r\n  public onLogout() {\r\n    this.userService.logout();\r\n  }\r\n\r\n}\r\n\r\n","\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { LayoutModule } from '@angular/cdk/layout';\r\nimport { MatToolbarModule, MatButtonModule, MatSidenavModule, MatIconModule, MatListModule, MatCardModule, MatFormFieldModule, MatInputModule } from '@angular/material';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport {DemoMaterialModule} from './material-module';\r\n\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { RegisterPatientComponent } from './components/register-patient/register-patient.component';\r\nimport { PatientPageComponent } from './components/patient-page/patient-page.component';\r\nimport { DoctorPageComponent } from './components/doctor-page/doctor-page.component';\r\nimport { PatientProfileComponent } from './components/patient-profile/patient-profile.component';\r\nimport { DoctorProfileComponent } from './components/doctor-profile/doctor-profile.component';\r\nimport { MedicalRecordPageComponent } from './components/medical-record-page/medical-record-page.component';\r\nimport { MedicalHistoryPageComponent } from './components/medical-history-page/medical-history-page.component';\r\nimport { ClinicsPageComponent } from './components/clinics-page/clinics-page.component';\r\nimport {NursePageComponent} from './components/nurse-page/nurse-page.component';\r\nimport {NurseProfileComponent} from './components/nurse-profile/nurse-profile.component';\r\nimport { ClinicadministratorPageComponent } from './components/clinicadministrator-page/clinicadministrator-page.component';\r\nimport { ClinicadministratorProfileComponent } from './components/clinicadministrator-profile/clinicadministrator-profile.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LoginComponent,\r\n    RegisterPatientComponent,\r\n    PatientPageComponent,\r\n    DoctorPageComponent,\r\n    PatientProfileComponent,\r\n    DoctorProfileComponent,\r\n    MedicalRecordPageComponent,\r\n    MedicalHistoryPageComponent,\r\n    ClinicsPageComponent,\r\n    NursePageComponent,\r\n    NurseProfileComponent,\r\n    ClinicadministratorPageComponent,\r\n    ClinicadministratorProfileComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    ToastrModule.forRoot({\r\n      timeOut: 2000,\r\n      positionClass: 'toast-top-right',\r\n      preventDuplicates: true,\r\n    }),\r\n    LayoutModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    MatNativeDateModule,\r\n    DemoMaterialModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljYWRtaW5pc3RyYXRvci1wYWdlL2NsaW5pY2FkbWluaXN0cmF0b3ItcGFnZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-clinicadministrator-page',\n  templateUrl: './clinicadministrator-page.component.html',\n  styleUrls: ['./clinicadministrator-page.component.css']\n})\nexport class ClinicadministratorPageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljYWRtaW5pc3RyYXRvci1wcm9maWxlL2NsaW5pY2FkbWluaXN0cmF0b3ItcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { Clinicadministrator } from 'src/app/models/clinicadministrator';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { User } from 'src/app/models/user';\nimport { ClinicadministratorService } from 'src/app/services/clinicadministrator.service';\nimport { Router } from '@angular/router';\nimport { UserService } from 'src/app/services/user.service';\nimport { Role } from 'src/app/models/role';\n\n@Component({\n  selector: 'app-clinicadministrator-profile',\n  templateUrl: './clinicadministrator-profile.component.html',\n  styleUrls: ['./clinicadministrator-profile.component.css']\n})\nexport class ClinicadministratorProfileComponent implements OnInit {\n\n  clinicadministratorForm: FormGroup;\n  submitted = false;\n  selectedClinicadministrator: Clinicadministrator;\n  user:User;\n  clinicadministrator:Clinicadministrator;\n\n  constructor(\n    private clinicadministratorService: ClinicadministratorService,\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private userService: UserService\n  ) {\n    this.user=JSON.parse(userService.isLoggedIn());\n    console.log(this.user);\n    this.selectedClinicadministrator=clinicadministratorService.getClinicadministrator(this.user.email);\n    console.log(this.selectedClinicadministrator);\n   }\n\n  ngOnInit() {\n    this.clinicadministratorForm = this.formBuilder.group({\n      email: new FormControl(this.selectedClinicadministrator.email, [Validators.required, Validators.email]),\n      password: new FormControl(this.selectedClinicadministrator.password, [Validators.required, Validators.minLength(8),\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\n      name: new FormControl(this.selectedClinicadministrator.name, [Validators.required]),\n      surname: new FormControl(this.selectedClinicadministrator.surname, [Validators.required]),\n      number: new FormControl(this.selectedClinicadministrator.number, [Validators.required, Validators.minLength(9)]),\n      clinic: new FormControl(this.selectedClinicadministrator.clinic, [Validators.required]),\n    });\n  }\n\n  get f() {\n    return this.clinicadministratorForm.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n\n    // Stop here if form is invalid\n    if (this.clinicadministratorForm.invalid) {\n      return;\n    }\n\n    this.clinicadministrator = new Clinicadministrator(\n      this.f.email.value,\n      this.f.password.value,\n      this.f.name.value,\n      this.f.surname.value,\n      this.f.number.value,\n      this.f.clinic.value,\n      \n    );\n\n    this.user=new User(this.f.email.value,this.f.password.value,Role.CLINICADMINISTRATOR);\n    \n    this.editClinicadministrator();\n    \n  }\n\n    public editClinicadministrator(){\n      this.clinicadministratorService.editClinicadministrator(this.clinicadministrator).subscribe(\n        data => {\n          this.userService.setUser(this.user);\n          this.clinicadministratorService.setClinicadministrator(this.clinicadministrator);\n          this.router.navigate(['/clinicadministrator/home']);\n        },\n        error => {\n          alert('Error edit clinicadministrator');\n        }\n      );\n    }\n\n \n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvY2xpbmljcy1wYWdlL2NsaW5pY3MtcGFnZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Clinic } from 'src/app/models/clinic';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { ClinicService } from 'src/app/services/clinic.service';\r\n\r\n@Component({\r\n  selector: 'app-clinics-page',\r\n  templateUrl: './clinics-page.component.html',\r\n  styleUrls: ['./clinics-page.component.css']\r\n})\r\nexport class ClinicsPageComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['name', 'address'];\r\n  clinic: Clinic;\r\n  clinicDataSource = new MatTableDataSource<Clinic>();\r\n  clinics: Array<Clinic> = new Array<Clinic>();\r\n  \r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private clinicService: ClinicService\r\n  ) {\r\n    this.clinics=this.clinicService.getAllClinics();\r\n    this.all();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n\r\n  }\r\n\r\n  all() {\r\n      this.clinicDataSource = new MatTableDataSource(this.clinicService.getAllClinics());\r\n      this.clinicDataSource.paginator = this.paginator;\r\n  }\r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXBhZ2UvZG9jdG9yLXBhZ2UuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-doctor-page',\r\n  templateUrl: './doctor-page.component.html',\r\n  styleUrls: ['./doctor-page.component.css']\r\n})\r\nexport class DoctorPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZG9jdG9yLXByb2ZpbGUvZG9jdG9yLXByb2ZpbGUuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Doctor } from '../../models/doctor';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { DoctorService } from '../../services/doctor.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\n\r\n@Component({\r\n  selector: 'app-doctor-profile',\r\n  templateUrl: './doctor-profile.component.html',\r\n  styleUrls: ['./doctor-profile.component.css']\r\n})\r\nexport class DoctorProfileComponent implements OnInit {\r\n\r\n  doctorForm: FormGroup;\r\n  submitted = false;\r\n  selectedDoctor: Doctor;\r\n  user:User;\r\n  doctor:Doctor;\r\n\r\n  constructor(\r\n    private doctorService: DoctorService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedDoctor=doctorService.getDoctor(this.user.email);\r\n    console.log(this.selectedDoctor);\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.doctorForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedDoctor.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedDoctor.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedDoctor.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedDoctor.surname, [Validators.required]),\r\n      number: new FormControl(this.selectedDoctor.number, [Validators.required, Validators.minLength(9)]),\r\n      address: new FormControl(this.selectedDoctor.address, [Validators.required]),\r\n      city: new FormControl(this.selectedDoctor.city, [Validators.required]),\r\n      country: new FormControl(this.selectedDoctor.country, [Validators.required]),\r\n      specialization: new FormControl(this.selectedDoctor.specialization, [Validators.required]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.doctorForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.doctorForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.doctor = new Doctor(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.specialization.value\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.DOCTOR);\r\n    \r\n    this.editDoctor();\r\n    \r\n  }\r\n\r\n    public editDoctor(){\r\n      this.doctorService.editDoctor(this.doctor).subscribe(\r\n        data => {\r\n          this.userService.setUser(this.user);\r\n          this.doctorService.setDoctor(this.doctor);\r\n          this.router.navigate(['/doctor/home']);\r\n        },\r\n        error => {\r\n          alert('Error edit doctor');\r\n        }\r\n      );\r\n    }\r\n\r\n \r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport {FormGroup, FormBuilder, Validators} from '@angular/forms';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport { Router } from '@angular/router';\r\nimport {User} from '../../models/user';\r\nimport {Role} from '../../models/role';\r\nimport {UserService} from '../../services/user.service';\r\nimport {DoctorService} from '../../services/doctor.service';\r\nimport { NurseService } from 'src/app/services/nurse.service';\r\nimport { ClinicadministratorService } from 'src/app/services/clinicadministrator.service';\r\n\r\n\r\nexport class LoginUser {\r\n  constructor(\r\n    public email: string,\r\n    public password: string\r\n  ) {}\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\n\r\nexport class LoginComponent implements OnInit {\r\n\r\n  private loginForm: FormGroup;\r\n  private submitted = false;\r\n  private user:User;\r\n  private loginUser:LoginUser;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService,\r\n    private doctorService:DoctorService,\r\n    private nurseService:NurseService,\r\n    private clinicadministatorService:ClinicadministratorService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loginForm=this.formBuilder.group({\r\n      email: ['',[Validators.required,Validators.email]],\r\n      password: ['',Validators.required]\r\n    })\r\n  }\r\n\r\n  get f(){\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  private onSubmit(){\r\n    this.submitted=true;\r\n\r\n    if(this.loginForm.invalid)\r\n    return;\r\n  \r\n\r\n  this.loginUser=new LoginUser(\r\n    this.f.email.value,\r\n    this.f.password.value\r\n  )\r\n    this.user=this.userService.getUser(this.f.email.value);\r\n    console.log(this.user);\r\n    this.attemptLogin();\r\n  }\r\n\r\n  public attemptLogin() {\r\n    if (this.user.role === Role.PATIENT && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.patientService.loginPatient(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/patient/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.DOCTOR && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.doctorService.loginDoctor(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/doctor/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.CLINICADMINISTRATOR && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.clinicadministatorService.loginClinicadministrator(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/clinicadministrator/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    } else if (this.user.role === Role.NURSE && this.loginUser.password === this.user.password) {\r\n      console.log(this.user);\r\n      this.nurseService.loginNurse(this.user).subscribe(\r\n        data => {\r\n          console.log(data);\r\n          if (data !== null) {\r\n            console.log('Successful logged in');\r\n            this.router.navigate(['/nurse/home']);\r\n          } else {\r\n            console.log('Login error');\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1oaXN0b3J5LXBhZ2UvbWVkaWNhbC1oaXN0b3J5LXBhZ2UuY29tcG9uZW50LmNzcyJ9 */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Examination } from 'src/app/models/examination';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { ExaminationService } from 'src/app/services/examination.service';\r\nimport { ExaminationTable } from 'src/app/models/examinationTable';\r\n\r\n\r\n@Component({\r\n  selector: 'app-medical-history-page',\r\n  templateUrl: './medical-history-page.component.html',\r\n  styleUrls: ['./medical-history-page.component.css']\r\n})\r\nexport class MedicalHistoryPageComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['Kind', 'Status','Type','Room','Discount','Nurse','Doctors'];\r\n  examination:Examination;\r\n  dataSource= new MatTableDataSource<ExaminationTable>();\r\n  examinations:Array<Examination>=new Array<Examination>();\r\n  listEx:Array<ExaminationTable>=new Array<ExaminationTable>();\r\n  exTable:ExaminationTable;\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private examinationService:ExaminationService\r\n  ) {\r\n    this.examinations=this.examinationService.getAllExaminations();\r\n    console.log(\"medicalHPage  \"+this.examinations)\r\n    this.all();\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.fillData();\r\n    this.dataSource = new MatTableDataSource(this.listEx);\r\n    this.dataSource.paginator = this.paginator;\r\n}\r\n\r\n  fillData(){\r\n    for (let i = 0; i < this.examinations.length; i++) {\r\n      const element = this.examinations[i];\r\n      const exaTable=new ExaminationTable(this.examinations[i].id,this.examinations[i].kind,this.examinations[i].status,\"type\",\"room1\",\"0\",\"nurse1\",\"patient1\",\"doctor1,doctor2\",\"0\");\r\n      let truee=0;\r\n      for (let j = 0; j < this.listEx.length; j++) {\r\n        const elemente = this.listEx[j];\r\n        if(elemente.id===exaTable.id)\r\n            {truee=1;}\r\n      }\r\n      if(truee===0)    {\r\n        this.listEx.push(exaTable);\r\n      }\r\n  }\r\n\r\n}\r\n}","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbWVkaWNhbC1yZWNvcmQtcGFnZS9tZWRpY2FsLXJlY29yZC1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MedicalRecord } from 'src/app/models/medicalRecord';\r\nimport { MatTableDataSource, MatPaginator } from '@angular/material';\r\nimport { MedicalRecordService } from 'src/app/services/medical-record.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { User } from 'src/app/models/user';\r\n\r\nexport class Table{\r\n  height:number;\r\n    weight:number;\r\n    bloodType:string;\r\n    allergies:string;\r\n\r\n    constructor(height:number,weight:number,bloodType:string,allergies:string){\r\n        this.height=height;\r\n        this.weight=weight;\r\n        this.bloodType=bloodType;\r\n        this.allergies=allergies;\r\n    }\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'app-medical-record-page',\r\n  templateUrl: './medical-record-page.component.html',\r\n  styleUrls: ['./medical-record-page.component.css']\r\n})\r\nexport class MedicalRecordPageComponent implements OnInit {\r\n\r\n\r\n  displayedColumns: string[] = ['Height', 'Weight','BloodType','Allergies'];\r\n  dataSource= new MatTableDataSource<MedicalRecord>();\r\n  record:MedicalRecord;\r\n  records:Array<MedicalRecord>=new Array<MedicalRecord>();\r\n  listTable:Array<Table>=new Array<Table>();\r\n  user:User;\r\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\r\n  constructor(\r\n    private medicalRecordService:MedicalRecordService,\r\n    private userService:UserService\r\n  ) { \r\n    this.records=this.medicalRecordService.getAllRecords();\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.all();\r\n  }\r\n\r\n  all() {\r\n    this.fillData();\r\n    this.dataSource = new MatTableDataSource(this.listTable);\r\n}\r\n\r\nfillData(){\r\n  /*for (let i = 0; i < this.records.length; i++) {\r\n    const element = this.records[i];\r\n          const table=new Table(element.height,element.weight,element.bloodType,element.allergies);\r\n          this.listTable.push(table);\r\n          \r\n  }*/\r\n  const table=new Table(180,85,\"A+\",\"No allergies\");\r\n  this.listTable.push(table);\r\n}\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtcGFnZS9udXJzZS1wYWdlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-page',\r\n  templateUrl: './nurse-page.component.html',\r\n  styleUrls: ['./nurse-page.component.css']\r\n})\r\nexport class NursePageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbnVyc2UtcHJvZmlsZS9udXJzZS1wcm9maWxlLmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-nurse-profile',\r\n  templateUrl: './nurse-profile.component.html',\r\n  styleUrls: ['./nurse-profile.component.css']\r\n})\r\nexport class NurseProfileComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1wYWdlL3BhdGllbnQtcGFnZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-patient-page',\r\n  templateUrl: './patient-page.component.html',\r\n  styleUrls: ['./patient-page.component.css']\r\n})\r\nexport class PatientPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcGF0aWVudC1wcm9maWxlL3BhdGllbnQtcHJvZmlsZS5jb21wb25lbnQuY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Patient } from '../../models/patient';\r\nimport { User } from '../../models/user';\r\n\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport { PatientService } from '../../services/patient.service';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../../services/user.service';\r\nimport { Role } from '../../models/role';\r\nimport { PatientStatus } from '../../models/patientStatus';\r\n\r\n\r\n@Component({\r\n  selector: 'app-patient-profile',\r\n  templateUrl: './patient-profile.component.html',\r\n  styleUrls: ['./patient-profile.component.css']\r\n})\r\nexport class PatientProfileComponent implements OnInit {\r\n\r\n  patientForm: FormGroup;\r\n  submitted = false;\r\n  selectedPatient: Patient;\r\n  user:User;\r\n  patient:Patient;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {\r\n    this.user=JSON.parse(userService.isLoggedIn());\r\n    console.log(this.user);\r\n    this.selectedPatient=patientService.getPatient(this.user.email);\r\n    console.log(this.selectedPatient);\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.patientForm = this.formBuilder.group({\r\n      email: new FormControl(this.selectedPatient.email, [Validators.required, Validators.email]),\r\n      password: new FormControl(this.selectedPatient.password, [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl(this.selectedPatient.name, [Validators.required]),\r\n      surname: new FormControl(this.selectedPatient.surname, [Validators.required]),\r\n      address: new FormControl(this.selectedPatient.address, [Validators.required]),\r\n      city: new FormControl(this.selectedPatient.city, [Validators.required]),\r\n      country: new FormControl(this.selectedPatient.country, [Validators.required]),\r\n      number: new FormControl(this.selectedPatient.number, [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl(this.selectedPatient.insuranceID, [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.patientForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.patientForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.PATIENT);\r\n    \r\n    this.editPatient();\r\n    \r\n  }\r\n\r\n    public editPatient(){\r\n      this.patientService.editPatient(this.patient).subscribe(\r\n        data => {\r\n          this.userService.setUser(this.user);\r\n          this.patientService.setPatient(this.patient);\r\n          this.router.navigate(['/patient/home']);\r\n        },\r\n        error => {\r\n          alert('Error edit patient');\r\n        }\r\n      );\r\n    }\r\n\r\n \r\n\r\n\r\n}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVnaXN0ZXItcGF0aWVudC9yZWdpc3Rlci1wYXRpZW50LmNvbXBvbmVudC5jc3MifQ== */\"","import { Component, OnInit, Injectable} from '@angular/core';\r\nimport { Patient} from '../../models/patient';\r\nimport {FormBuilder, FormGroup, Validators, FormControl} from '@angular/forms';\r\nimport {Router} from '@angular/router';\r\nimport {PatientService} from '../../services/patient.service';\r\nimport {PatientStatus} from '../../models/patientStatus';\r\nimport {Role} from '../../models/role';\r\nimport {User} from '../../models/user';\r\nimport {UserService} from '../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-register-patient',\r\n  templateUrl: './register-patient.component.html',\r\n  styleUrls: ['./register-patient.component.css']\r\n})\r\nexport class RegisterPatientComponent implements OnInit {\r\n\r\n  registerForm: FormGroup;\r\n  submitted = false;\r\n  patient: Patient;\r\n  user:User;\r\n\r\n  constructor(\r\n    private patientService: PatientService,\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formBuilder.group({\r\n      email: new FormControl('', [Validators.required, Validators.email]),\r\n      password: new FormControl('', [Validators.required, Validators.minLength(8),\r\n        Validators.pattern('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$')]),\r\n      name: new FormControl('', [Validators.required]),\r\n      surname: new FormControl('', [Validators.required]),\r\n      address: new FormControl('', [Validators.required]),\r\n      city: new FormControl('', [Validators.required]),\r\n      country: new FormControl('', [Validators.required]),\r\n      number: new FormControl('', [Validators.required, Validators.minLength(9)]),\r\n      insuranceID: new FormControl('', [Validators.required, Validators.minLength(13), Validators.maxLength(13)]),\r\n    });\r\n  }\r\n\r\n  get f() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n\r\n    // Stop here if form is invalid\r\n    if (this.registerForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    this.patient = new Patient(\r\n      this.f.email.value,\r\n      this.f.password.value,\r\n      this.f.name.value,\r\n      this.f.surname.value,\r\n      this.f.number.value,\r\n      this.f.address.value,\r\n      this.f.city.value,\r\n      this.f.country.value,\r\n      this.f.insuranceID.value,\r\n      PatientStatus.AWAITING\r\n    );\r\n\r\n    this.user=new User(this.f.email.value,this.f.password.value,Role.PATIENT);\r\n\r\n    this.createPatient();\r\n  }\r\n\r\n  private createPatient() {\r\n    this.patientService.newPatient(this.patient).subscribe(\r\n      data => {\r\n        this.userService.addUser(this.user);\r\n        console.log(this.user);\r\n        this.patientService.addPatient(this.patient);\r\n        this.router.navigate(['/login']);\r\n      },\r\n      error => {\r\n        alert('Error registration patient');\r\n      }\r\n    );\r\n  }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { A11yModule } from '@angular/cdk/a11y';\r\nimport { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\nimport { CdkStepperModule } from '@angular/cdk/stepper';\r\nimport { CdkTableModule } from '@angular/cdk/table';\r\nimport { CdkTreeModule } from '@angular/cdk/tree';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatButtonToggleModule } from '@angular/material/button-toggle';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatStepperModule } from '@angular/material/stepper';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatSliderModule } from '@angular/material/slider';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\n\r\n@NgModule({\r\n  exports: [\r\n    A11yModule,\r\n    CdkStepperModule,\r\n    CdkTableModule,\r\n    CdkTreeModule,\r\n    DragDropModule,\r\n    MatAutocompleteModule,\r\n    MatBadgeModule,\r\n    MatBottomSheetModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatStepperModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    PortalModule,\r\n    ScrollingModule,\r\n  ]\r\n})\r\nexport class DemoMaterialModule { }","\r\nexport class Clinic {\r\n    id: number;\r\n    name: string;\r\n    address: string;\r\n    description: string;\r\n  \r\n    constructor(name: string, address: string, description: string, id?: number) {\r\n      this.name = name;\r\n      this.address = address;\r\n      this.description = description;\r\n      this.id = id;\r\n    }\r\n  }","export class Clinicadministrator {\r\n\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    surname: string;\r\n    number: string;\r\n    clinic: string;\r\n  \r\n    constructor(email: string, password: string, name: string, surname: string, number: string, clinic: string) {\r\n      this.email = email;\r\n      this.name = name;\r\n      this.password = password;\r\n      this.surname = surname;\r\n      this.number = number;\r\n      this.clinic = clinic;\r\n    }\r\n  }","export class Doctor {\r\n\r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    surname: string;\r\n    number: string;\r\n    address: string;\r\n    city: string;\r\n    country: string;\r\n    specialization: string;\r\n  \r\n    constructor(email: string, password: string, name: string, surname: string, number1: string, address: string, city: string, country: string, specialization: string) {\r\n      this.email = email;\r\n      this.name = name;\r\n      this.password = password;\r\n      this.surname = surname;\r\n      this.number = number1;\r\n      this.address = address;\r\n      this.city = city;\r\n      this.country = country;\r\n      this.specialization = specialization;\r\n    }\r\n  }","import { Doctor } from './doctor';\r\nimport { Nurse } from './nurse';\r\nimport { Patient } from './patient';\r\nimport { ExaminationType } from './examinationType';\r\nimport { Room } from './room';\r\n\r\nexport class Examination {\r\n    id: number;\r\n    kind: String;\r\n  //  interval: DateTimeInterval;\r\n    status: String;\r\n //   examinationType: ExaminationType;\r\n   // doctors: Doctor[];\r\n  //  room: Room;\r\n    discount: number;\r\n //   nurse: Nurse;\r\n  //  patient: Patient;\r\n    constructor(id: number, kind: String,  status: String,\r\n         discount: number) {\r\n        this.id = id;\r\n        this.kind = kind;\r\n        this.status = status;\r\n     //   this.examinationType = examinationType;\r\n    //    this.room = room;\r\n        this.discount = discount;\r\n  //      this.nurse = nurse;\r\n    //    this.patient = patient;\r\n    }\r\n}","export class ExaminationTable{\r\n    id:number;\r\n     kind: String;\r\n  interval: String;\r\n    status: String;\r\n  type: String;\r\n   doctors: String;\r\n   room: String;\r\n    discount: String;\r\n  nurse: String;\r\n    patient: String;\r\n\r\n    constructor(id:number,kind: String,  status: String, type: String,\r\n      room: String, discount: String, nurse: String, patient: String,doctors:String,interval:String) {\r\n      this.id=id;\r\n      this.kind = kind;\r\n      this.status = status;\r\n      this.type = type;\r\n      this.room = room;\r\n      this.discount = discount;\r\n      this.nurse = nurse;\r\n      this.patient = patient;\r\n      this.doctors=doctors;\r\n      this.interval=interval;\r\n  }\r\n}","import { Patient } from './patient';\r\nimport { NumberValueAccessor } from '@angular/forms';\r\n\r\nexport class MedicalRecord{\r\n    height:number;\r\n    weight:number;\r\n    bloodType:string;\r\n    allergies:string;\r\n   // patient:Patient;\r\n\r\n    constructor(height:number,weight:number,bloodType:string,allergies:string){\r\n        this.height=height;\r\n        this.weight=weight;\r\n        this.bloodType=bloodType;\r\n        this.allergies=allergies;\r\n       // this.patient=patient;\r\n    }\r\n}","\r\nexport class Nurse{\r\n    \r\n    email: string;\r\n    password: string;\r\n    name: string;\r\n    surname: string;\r\n    number: string;\r\n    city: string;\r\n    address: string;\r\n    country: string;\r\n  \r\n\r\n    constructor(email: string, password: string, name: string, surname: string, number1: string, address: string, city: string, country: string) {\r\n\r\n      this.email = email;\r\n      this.name = name;\r\n      this.password = password;\r\n      this.surname = surname;\r\n      this.number = number1;\r\n\r\n      this.address = address;\r\n      this.city = city;\r\n      this.country = country;\r\n\r\n    }\r\n}","import { PatientStatus } from './patientStatus';\r\n\r\nexport class Patient{\r\n\r\n    constructor(\r\n        public email: string,\r\n        public password: string,\r\n        public name: string,\r\n        public surname: string,\r\n        public number: string,\r\n        public address: string,\r\n        public city: string,\r\n        public country: string,\r\n        public insuranceID: string,\r\n        public status: PatientStatus\r\n    ){}\r\n}","export enum PatientStatus {\r\n    AWAITING,\r\n    APPROVED\r\n  }","export enum Role {\r\n    PATIENT,\r\n    DOCTOR,\r\n    NURSE,\r\n    CLINICADMINISTRATOR,\r\n    NONE\r\n  }","import { Role } from './role';\r\n\r\nexport class User {\r\n    email: string;\r\n    password: string;\r\n    role: Role;\r\n    constructor(email:string,password:string,role:Role){\r\n        this.email=email;\r\n        this.password=password;\r\n        this.role=role;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Clinic } from '../models/clinic';\r\nimport { HttpClient } from '@angular/common/http'; \r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClinicService {\r\n\r\n  urlClinic = environment.baseUrl + environment.clinic;\r\n  listClinics: Array<Clinic> = new Array<Clinic>();\r\n  clinic: Clinic;\r\n  constructor( private http: HttpClient) {\r\n    this.getAllClinics();\r\n  }\r\n\r\n  public addClinic(c: Clinic) {\r\n    if (this.getClinic(c.name) === null) {\r\n      this.listClinics.push(c);\r\n    }\r\n  }\r\n\r\n  public getClinic(name: string) {\r\n    if ( this.listClinics.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listClinics) {\r\n      if ( u.name === name) {\r\n        return u;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public getClinicByName(name) {\r\n    return this.http.get(this.urlClinic + '/' + name);\r\n  }\r\n\r\n  public getAllClinics(): Array<Clinic> {\r\n    this.http.get(this.urlClinic + '/all').subscribe((data: Clinic[]) => {\r\n      for (const c of data) {\r\n        this.clinic = new Clinic(c.name, c.address, c.description, c.id);\r\n        this.addClinic(this.clinic);\r\n        console.log(this.clinic);\r\n      }\r\n    },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listClinics;\r\n  }\r\n}","import { Injectable } from '@angular/core';\nimport { Clinicadministrator } from '../models/clinicadministrator';\nimport { environment } from 'src/environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { UserService } from './user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClinicadministratorService {\n\n  urlClinicadministrator = environment.baseUrl + environment.doctor;\n  listClinicadministrators: Array<Clinicadministrator> = new Array<Clinicadministrator>();\n  clinicadministrator:Clinicadministrator;\n\n  constructor(\n    private http: HttpClient,\n    private userService: UserService\n  ) { \n    this.getAllClinicadministrators();\n  }\n\n  public newClinicadministrator(clinicadministrator) {\n    return this.http.post(this.urlClinicadministrator + '/register', clinicadministrator);\n  }\n\n  public loginClinicadministrator(clinicadministrator) {\n    this.userService.setToken(clinicadministrator);\n    return this.http.post(environment.baseUrl + '/login', clinicadministrator, {responseType: 'text'});\n  }\n\n  public editClinicadministrator(clinicadministrator){\n    return this.http.post(this.urlClinicadministrator + '/edit', clinicadministrator,{responseType: 'text'});\n  }\n\n  public addClinicadministrator(d: Clinicadministrator) {\n    if(this.getClinicadministrator(d.email)===null){\n      this.listClinicadministrators.push(d);\n    }\n  }\n\n  public getClinicadministrator(email: string) {\n    if ( this.listClinicadministrators.length === 0) {\n      return null;\n    }\n    for (const u of this.listClinicadministrators) {\n      if ( u.email === email) {\n        return u;\n      }\n    }\n    return null;\n  }\n\n  public setClinicadministrator(p: Clinicadministrator) {\n\n    for (const p1 of this.listClinicadministrators) {\n      if (p1.email === p.email) {\n        p1.name = p.name;\n        p1.number = p.number;\n        p1.surname = p.surname;\n        p1.password = p.password;\n        p1.clinic = p.clinic;\n        return;\n      }\n    }\n  }\n\n  public getAllClinicadministrators(): Array<Clinicadministrator> {\n    this.http.get(this.urlClinicadministrator + '/all').subscribe((data: Clinicadministrator[]) => {\n        for (const c of data) {\n          this.clinicadministrator = new Clinicadministrator(c.email,c.password,c.name,c.surname,c.number,c.clinic);\n          this.addClinicadministrator(this.clinicadministrator);\n        }\n      },\n      error => {\n        console.log(error);\n      }\n    );\n    return this.listClinicadministrators;\n  }\n}","import { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {Doctor} from '../models/doctor';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {UserService} from './user.service';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DoctorService {\r\n\r\n  urlDoctor = environment.baseUrl + environment.doctor;\r\n  listDoctors: Array<Doctor> = new Array<Doctor>();\r\n  doctor:Doctor;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserService\r\n  ) { \r\n    this.getAllDoctors();\r\n  }\r\n\r\n  public newDoctor(doctor) {\r\n    return this.http.post(this.urlDoctor + '/register', doctor);\r\n  }\r\n\r\n  public loginDoctor(doctor) {\r\n    this.userService.setToken(doctor);\r\n    return this.http.post(environment.baseUrl + '/login', doctor, {responseType: 'text'});\r\n  }\r\n\r\n  public editDoctor(doctor){\r\n    return this.http.post(this.urlDoctor + '/edit', doctor,{responseType: 'text'});\r\n  }\r\n\r\n  public addDoctor(d: Doctor) {\r\n    if(this.getDoctor(d.email)===null){\r\n      this.listDoctors.push(d);\r\n    }\r\n  }\r\n\r\n  public getDoctor(email: string) {\r\n    if ( this.listDoctors.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.listDoctors) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public setDoctor(p: Doctor) {\r\n\r\n    for (const p1 of this.listDoctors) {\r\n      if (p1.email === p.email) {\r\n        p1.name = p.name;\r\n        p1.number = p.number;\r\n        p1.surname = p.surname;\r\n        p1.password = p.password;\r\n        p1.address = p.address;\r\n        p1.city = p.city;\r\n        p1.country = p.country;\r\n        p1.specialization = p.specialization;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  public getAllDoctors(): Array<Doctor> {\r\n    this.http.get(this.urlDoctor + '/all').subscribe((data: Doctor[]) => {\r\n        for (const c of data) {\r\n          this.doctor = new Doctor(c.email,c.password,c.name,c.surname,c.number,c.address,c.city,c.country,c.specialization);\r\n          this.addDoctor(this.doctor);\r\n        }\r\n      },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n    return this.listDoctors;\r\n  }\r\n}","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Examination } from '../models/examination';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { UserService } from './user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ExaminationService {\r\n\r\n  url=environment.baseUrl+environment.examination;\r\n  listExaminations: Array<Examination> = new Array<Examination>();\r\n  examination:Examination;\r\n  constructor(\r\n    private http: HttpClient,\r\n    private userService: UserService\r\n  ) {\r\n    this.getAllExaminations();\r\n   }\r\n\r\n\r\n   public getAllExaminations(): Array<Examination> {\r\n    this.http.get(this.url + '/all').subscribe((data: Examination[]) => {\r\n      for (const c of data) {\r\n        this.examination = new Examination(c.id,c.kind,c.status,c.discount);\r\n        this.addExamination(this.examination);\r\n        console.log(this.examination);\r\n      }\r\n    },\r\n      error => {\r\n        console.log(error);\r\n      }\r\n    );\r\n\r\n    return this.listExaminations;\r\n  }\r\n\r\n  public addExamination(e: Examination) {\r\n    if (this.getExamination(e.id) === null) {\r\n      this.listExaminations.push(e);\r\n    }\r\n  }\r\n\r\n\r\n  public getExamination(id:number) {\r\n    if ( this.listExaminations.length === 0) {\r\n      return null;\r\n    }\r\n    for (const e of this.listExaminations) {\r\n      if ( e.id === id) {\r\n        return e;\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { MedicalRecord } from '../models/medicalRecord';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MedicalRecordService {\r\n\r\n  url=environment.baseUrl+environment.medicalRecord;\r\n  record:MedicalRecord;\r\n  listRecords:Array<MedicalRecord>=new Array<MedicalRecord>();\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { \r\n    this.getAllRecords();\r\n  }\r\n\r\n\r\n\r\npublic getAllRecords(): Array<MedicalRecord> {\r\n  console.log(this.url);\r\n  this.http.get(this.url + '/all').subscribe((data: MedicalRecord[]) => {\r\n    for (const c of data) {\r\n      this.record = new MedicalRecord(c.height,c.weight,c.bloodType,c.allergies);\r\n      this.addRecord(this.record);\r\n      console.log(this.record);\r\n      console.log(c.allergies);\r\n    }\r\n  },\r\n    error => {\r\n      console.log(error);\r\n    }\r\n  );\r\n\r\n  return this.listRecords;\r\n}\r\n\r\npublic addRecord(e: MedicalRecord) {\r\n  if (this.getRecord(e.height) === null) {\r\n    this.listRecords.push(e);\r\n  }\r\n}\r\n\r\npublic getRecord(height:number) {\r\n  if ( this.listRecords.length === 0) {\r\n    return null;\r\n  }\r\n  for (const e of this.listRecords) {\r\n    if ( e.height === height ) {\r\n      return e;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\n\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport {Nurse} from '../models/nurse';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\n\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\n\r\n\r\nexport class NurseService{\r\n\r\n    urlNurse = environment.baseUrl + environment.nurse;\r\n    listNurses: Array<Nurse>= new Array<Nurse>();\r\n    nurse:Nurse;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllNurses();\r\n    }\r\n  \r\n    public newNurse(nurse) {\r\n      return this.http.post(this.urlNurse + '/register', nurse);    // da li treba ?\r\n    }\r\n  \r\n    public loginNurse(nurse) {\r\n      this.userService.setToken(nurse);\r\n      return this.http.post(environment.baseUrl + '/login', nurse, {responseType: 'text'});\r\n    }\r\n\r\n    public editNurse(nurse){\r\n      return this.http.post(this.urlNurse + '/edit', nurse,{responseType: 'text'});\r\n    }\r\n  \r\n    public addNurse(p: Nurse) {\r\n      if(this.getNurse(p.email)===null){\r\n        this.listNurses.push(p);\r\n      }\r\n    }\r\n  \r\n    public getNurse(email: string) {\r\n      if ( this.listNurses.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listNurses) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setNurse(p: Nurse) {\r\n\r\n      for (const p1 of this.listNurses) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n          p1.country = p.country;\r\n          p1.address = p.address;\r\n          p1.surname = p.surname;\r\n          p1.city = p.city;\r\n          p1.password = p.password;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    public getAllNurses(): Array<Nurse> {\r\n      this.http.get(this.urlNurse + '/all').subscribe((data: Nurse[]) => {\r\n          for (const c of data) {\r\n            this.nurse = new Nurse(c.email,c.password,c.name,c.surname,c.number,c.address,c.city,c.country);\r\n            this.addNurse(this.nurse);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listNurses;\r\n    }\r\n  \r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport {Patient} from '../models/patient';\r\nimport { Injectable } from '@angular/core';\r\nimport {environment} from '../../environments/environment';\r\nimport {UserService} from '../services/user.service';\r\nimport { PatientStatus } from '../models/patientStatus';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\n\r\nexport class PatientService{\r\n\r\n    urlPatient = environment.baseUrl + environment.patient;\r\n    listPatients: Array<Patient>= new Array<Patient>();\r\n    patient:Patient;\r\n  \r\n    constructor(\r\n      private http: HttpClient,\r\n      private userService: UserService\r\n    ) {\r\n      this.getAllPatients();\r\n    }\r\n  \r\n    public newPatient(patient) {\r\n      return this.http.post(this.urlPatient + '/register', patient);\r\n    }\r\n  \r\n    public loginPatient(patient) {\r\n      this.userService.setToken(patient);\r\n      return this.http.post(environment.baseUrl + '/login', patient, {responseType: 'text'});\r\n    }\r\n\r\n    public editPatient(patient){\r\n      return this.http.post(this.urlPatient + '/edit', patient,{responseType: 'text'});\r\n    }\r\n  \r\n    public addPatient(p: Patient) {\r\n      if(this.getPatient(p.email)===null){\r\n        this.listPatients.push(p);\r\n      }\r\n    }\r\n  \r\n    public getPatient(email: string) {\r\n      if ( this.listPatients.length === 0) {\r\n        return null;\r\n      }\r\n      for (const u of this.listPatients) {\r\n        if ( u.email === email) {\r\n          return u;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n    public setPatient(p: Patient) {\r\n\r\n      for (const p1 of this.listPatients) {\r\n        if (p1.email === p.email) {\r\n          p1.name = p.name;\r\n          p1.number = p.number;\r\n          p1.country = p.country;\r\n          p1.address = p.address;\r\n          p1.surname = p.surname;\r\n          p1.city = p.city;\r\n          p1.password = p.password;\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    public getAllPatients(): Array<Patient> {\r\n      this.http.get(this.urlPatient + '/all').subscribe((data: Patient[]) => {\r\n          for (const c of data) {\r\n            this.patient = new Patient(c.email,c.password,c.name,c.surname,c.number,c.address,c.city,c.country,c.insuranceID,c.status);\r\n            this.addPatient(this.patient);\r\n          }\r\n        },\r\n        error => {\r\n          console.log(error);\r\n        }\r\n      );\r\n      return this.listPatients;\r\n    }\r\n  \r\n\r\n}","import {User} from '../models/user'\r\nimport { Injectable } from '@angular/core';\r\nimport {Router} from '@angular/router';\r\nimport {Role} from '../models/role';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\nexport const TOKEN='LoggedInUser';\r\n\r\n@Injectable({\r\n    providedIn:'root'\r\n})\r\nexport class UserService{\r\n    urlUser = environment.baseUrl + environment.user;\r\n    users: Array<User>=new Array<User>();\r\n    user:User= new User('', '', Role.NONE);\r\n    u:User;\r\n    constructor(private router: Router, private http: HttpClient) {\r\n      this.getAllUsers();\r\n      localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n    }\r\n\r\n    public addUser(u: User){\r\n      if (this.getUser(u.email) === null) {\r\n        this.users.push(u);\r\n      }\r\n    }\r\n\r\n    \r\n  public getUser(email: string) {\r\n    if ( this.users.length === 0) {\r\n      return null;\r\n    }\r\n    for (const u of this.users) {\r\n      if ( u.email === email) {\r\n        return u;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n    public setToken(user){\r\n        this.user=user;\r\n        localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n\r\n    }\r\n\r\n    public isLoggedIn() {\r\n        if(localStorage.getItem(TOKEN)!==null){\r\n          return localStorage.getItem(TOKEN);\r\n        }else {\r\n          \r\n          return null;\r\n        }\r\n      }\r\n\r\n      public setUser(u: User) {\r\n\r\n        for (const p1 of this.users) {\r\n          if (p1.email === u.email) {\r\n            p1.password = u.password;\r\n            return;\r\n          }\r\n        }\r\n      }\r\n\r\n    public logout(){\r\n      this.router.navigate(['']);\r\n      this.user =  new User('', '', Role.NONE);\r\n      localStorage.removeItem(TOKEN);\r\n      localStorage.setItem(TOKEN, JSON.stringify(this.user));\r\n    }\r\n\r\n    public isNone() {\r\n      if (this.isLoggedIn()) {\r\n        return this.user.role === Role.NONE;\r\n      }\r\n    }\r\n    \r\n    public isPatient() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.PATIENT;\r\n        }\r\n      }\r\n\r\n      public isDoctor() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.DOCTOR;\r\n        }\r\n      }\r\n\r\n      public isNurse() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.NURSE;\r\n        }\r\n      }\r\n\r\n      public isClinicadministrator() {\r\n        if (this.isLoggedIn()) {\r\n          return this.user.role === Role.CLINICADMINISTRATOR;\r\n        }\r\n      }\r\n\r\n      public getAllUsers(): Array<User> {\r\n        this.http.get(this.urlUser + '/all').subscribe((data: User[]) => {\r\n            for (const c of data) {\r\n                this.u = new User(c.email, c.password, this.whichRole(c.role.toString()));\r\n                this.addUser(this.u);\r\n            }\r\n          },\r\n          error => {\r\n            console.log(error);\r\n          }\r\n        );\r\n        console.log(this.users);\r\n        return this.users;\r\n      }\r\n\r\n      public whichRole(role: string) {\r\n        if (role === 'PATIENT') {\r\n          return Role.PATIENT;\r\n        } else if (role === 'DOCTOR') {\r\n          return  Role.DOCTOR;\r\n        } else if (role === 'NURSE') {\r\n          return  Role.NURSE;\r\n        } else if (role === 'CLINICADMINISTRATOR') {\r\n          return  Role.CLINICADMINISTRATOR;\r\n        } else {\r\n          return null;\r\n        }\r\n    \r\n      }\r\n\r\n\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  baseUrl: 'http://localhost:8080',\r\n  user: '/user',\r\n  patient: '/patient',\r\n  doctor: '/doctor',\r\n  nurse: '/nurse',\r\n  clinic: '/clinic',\r\n  examination: '/examination',\r\n  medicalRecord: '/medicalRecord',\r\n  clinicalCentreAdmin: '/clinical-centre-admin',\r\n  clinicAdministrator: '/clinicadministrator',\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import 'hammerjs';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}